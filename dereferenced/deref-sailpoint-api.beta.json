{
  "openapi": "3.0.1",
  "info": {
    "title": "Identity Security Cloud Beta API",
    "description": "Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.",
    "termsOfService": "https://developer.sailpoint.com/discuss/tos",
    "contact": {
      "name": "Developer Relations",
      "url": "https://developer.sailpoint.com/discuss/api-help"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "3.1.0-beta"
  },
  "servers": [
    {
      "url": "https://{tenant}.api.identitynow.com/beta",
      "description": "This is the beta API server.",
      "variables": {
        "tenant": {
          "default": "sailpoint",
          "description": "This is the name of your tenant, typically your company's name."
        }
      }
    },
    {
      "url": "https://{apiUrl}/beta",
      "description": "This is the beta API server.",
      "variables": {
        "apiUrl": {
          "default": "sailpoint.api.identitynow.com",
          "description": "This is the api url of your tenant"
        }
      }
    }
  ],
  "security": [
    {
      "userAuth": [
        "sp:scopes:all"
      ]
    }
  ],
  "tags": [
    {
      "name": "Access Model Metadata",
      "description": "Use this API to create and manage metadata attributes for your Access Model.\nAccess Model Metadata allows you to add contextual information to your ISC Access Model items using pre-defined metadata for risk, regulations, privacy levels, etc., or by creating your own metadata attributes to reflect the unique needs of your organization. This release of the API includes support for entitlement metadata. Support for role and access profile metadata will be introduced in a subsequent release.\n\nCommon usages for Access Model metadata include:\n\n- Organizing and categorizing access items to make it easier for your users to search for and find the access rights they want to request, certify, or manage.\n\n- Providing richer information about access that is being acted on to allow stakeholders to make better decisions when approving, certifying, or managing access rights.\n\n- Identifying access that may requires additional approval requirements or be subject to more frequent review.\n"
    },
    {
      "name": "Access Profiles",
      "description": "Use this API to implement and customize access profile functionality.\nWith this functionality in place, administrators can create access profiles and configure them for use throughout Identity Security Cloud, enabling users to get the access they need quickly and securely.\n\nAccess profiles group entitlements, which represent access rights on sources.\n\nFor example, an Active Directory source in Identity Security Cloud can have multiple entitlements: the first, 'Employees,' may represent the access all employees have at the organization, and a second, 'Developers,' may represent the access all developers have at the organization.\n\nAn administrator can then create a broader set of access in the form of an access profile, 'AD Developers' grouping the 'Employees' entitlement with the 'Developers' entitlement.\n\nWhen users only need Active Directory employee access, they can request access to the 'Employees' entitlement.\n\nWhen users need both Active Directory employee and developer access, they can request access to the 'AD Developers' access profile.\n\nIdentity Security Cloud uses access profiles in many features, including the following:\n\n- Provisioning: When you use the Provisioning Service, lifecycle states and roles both grant access to users in the form of access profiles.\n\n- Certifications: You can approve or revoke access profiles in certification campaigns, just like entitlements.\n\n- Access Requests: You can assign access profiles to applications, and when a user requests access to the app associated with an access profile and someone approves the request, access is granted to both the application and its associated access profile.\n\n- Roles: You can group one or more access profiles into a role to quickly assign access items based on an identity's role.\n\nIn Identity Security Cloud, administrators can use the Access drop-down menu and select Access Profiles to view, configure, and delete existing access profiles, as well as create new ones.\nAdministrators can enable and disable an access profile, and they can also make the following configurations:\n\n- Manage Entitlements: Manage the profile's access by adding and removing entitlements.\n\n- Access Requests: Configure access profiles to be requestable and establish an approval process for any requests that the access profile be granted or revoked.\nDo not configure an access profile to be requestable without first establishing a secure access request approval process for the access profile.\n\n- Multiple Account Options: Define the logic Identity Security Cloud uses to provision access to an identity with multiple accounts on the source.\n\nRefer to [Managing Access Profiles](https://documentation.sailpoint.com/saas/help/access/access-profiles.html) for more information about access profiles.\n"
    },
    {
      "name": "Access Request Approvals",
      "description": "Use this API to implement and customize access request approval functionality.\nWith this functionality in place, administrators can delegate qualified users to review users' requests for access or managers' requests to revoke team members' access to applications, entitlements, or roles.\nThis enables more qualified users to review access requests and the others to spend their time on other tasks.\n\nIn Identity Security Cloud, users can request access to applications, entitlements, and roles, and managers can request that team members' access be revoked.\nFor applications and entitlements, administrators can set access profiles to require approval from the access profile owner, the application owner, the source owner, the requesting user's manager, or a governance group for access to be granted or revoked.\nFor roles, administrators can also set roles to allow access requests and require approval from the role owner, the requesting user's manager, or a governance group for access to be granted or revoked.\nIf the administrator designates a governance group as the required approver, any governance group member can approve the requests.\n\nWhen a user submits an access request, Identity Security Cloud sends the first required approver in the queue an email notification, based on the access request configuration's approval and reminder escalation configuration.\n\nIn Approvals in Identity Security Cloud, required approvers can view pending access requests under the Requested tab and approve or deny them, or the approvers can reassign the requests to different reviewers for approval.\nIf the required approver approves the request and is the only reviewer required, Identity Security Cloud grants or revokes access, based on the request.\nIf multiple reviewers are required, Identity Security Cloud sends the request to the next reviewer in the queue, based on the access request configuration's approval reminder and escalation configuration.\nThe required approver can then view any completed access requests under the Reviewed tab.\n\nRefer to [Access Requests](https://documentation.sailpoint.com/saas/help/requests/index.html) for more information about access request approvals.\n"
    },
    {
      "name": "Access Request Identity Metrics",
      "description": "Use this API to implement access request identity metrics functionality.\nWith this functionality in place, access request reviewers can see relevant details about the requested access item and associated source activity. \nThis allows reviewers to see how many of the identities who share a manager with the access requester have this same type of access and how many of them have had activity in the related source. \nThis additional context about whether the access has been granted before and how often it has been used can help those approving access requests make more informed decisions.\n"
    },
    {
      "name": "Access Requests",
      "description": "Use this API to implement and customize access request functionality.\nWith this functionality in place, users can request access to applications, entitlements, or roles, and managers can request that team members' access be revoked.\nThis allows users to get access to the tools they need quickly and securely, and it allows managers to take away access to those tools.\n\nIdentity Security Cloud's Access Request service allows end users to request access that requires approval before it can be granted to users and enables qualified users to review those requests and approve or deny them.\n\nIn the Request Center in Identity Security Cloud, users can view available applications, roles, and entitlements and request access to them.\nIf the requested tools requires approval, the requests appear as 'Pending' under the My Requests tab until the required approver approves, rejects, or cancels them.\n\nUsers can use My Requests to track and/or cancel the requests.\n\nIn My Team on the Identity Security Cloud Home, managers can submit requests to revoke their team members' access.\nThey can use the My Requests tab under Request Center to track and/or cancel the requests.\n\nRefer to [Requesting Access](https://documentation.sailpoint.com/saas/user-help/requests/requesting_access.html) for more information about access requests.\n"
    },
    {
      "name": "Account Activities",
      "description": "Use this API to implement account activity tracking functionality.\nWith this functionality in place, users can track source account activity in Identity Security Cloud, which greatly improves traceability in the system.\n\nAn account activity refers to a log of each action performed on a source account. This is useful for auditing the changes that occur on an account throughout its life.\nIn Identity Security Cloud's Search, users can search for account activities and select the activity's row to get an overview of the activity's account action and view its progress, its involved sources, and its most basic metadata, such as the identity requesting the option and the recipient.\n\nAccount activity includes most actions Identity Security Cloud completes on source accounts. Users can search in Identity Security Cloud for the following account action types:\n\n- Access Request: These include any access requests the source account is involved in.\n\n- Account Attribute Updates: These include updates to a single attribute on an account on a source.\n\n- Account State Update: These include locking or unlocking actions on an account on a source.\n\n- Certification: These include actions removing an entitlement from an account on a source as a result of the entitlement's revocation during a certification.\n\n- Cloud Automated `Lifecyclestate`: These include automated lifecycle state changes that result in a source account's correlated identity being assigned to a different lifecycle state.\nIdentity Security Cloud replaces the `Lifecyclestate` variable with the name of the lifecycle state it has moved the account's identity to.\n\n- Identity Attribute Update: These include updates to a source account's correlated identity attributes as the result of a provisioning action.\nWhen you update an identity attribute that also updates an identity's lifecycle state, the cloud automated `Lifecyclestate` event also displays.\nAccount Activity does not include attribute updates that occur as a result of aggregation.\n\n- Identity Refresh: These include correlated identity refreshes that occur for an account on a source whenever the account's correlated identity profile gets a new role or updates.\nThese also include refreshes that occur whenever Identity Security Cloud assigns an application to the account's correlated identity based on the application's being assigned to All Users From Source or Specific Users From Source.\n\n- Lifecycle State Refresh: These include the actions that took place when a lifecycle state changed. This event only occurs after a cloud automated `Lifecyclestate` change or a lifecycle state change.\n\n- Lifecycle State Change: These include the account activities that result from an identity's manual assignment to a null lifecycle state.\n\n- Password Change: These include password changes on sources.\n\nRefer to [Account Activity](https://documentation.sailpoint.com/saas/help/search/index.html#account-activity) for more information about account activities.\n"
    },
    {
      "name": "Account Aggregations",
      "description": "Use this API to implement account aggregation progress tracking functionality.\nWith this functionality in place, administrators can view in-progress account aggregations, their statuses, and their relevant details.\n\nAn account aggregation refers to the process Identity Security Cloud uses to gather and load account data from a source into Identity Security Cloud.\n\nWhenever Identity Security Cloud is in the process of aggregating a source, it adds an entry to the Aggregation Activity Log, along with its relevant details.\nTo view aggregation activity, administrators can select the Connections drop-down menu, select Sources, and select the relevant source, select its Import Data tab, and select Account Aggregation.\nIn Account Aggregation, administrators can view the account aggregations' statuses and details in the Account Activity Log.\n\nRefer to [Loading Account Data](https://documentation.sailpoint.com/saas/help/accounts/loading_data.html) for more information about account aggregations.\n"
    },
    {
      "name": "Account Usages",
      "description": "Use this API to implement account usage insight functionality.\nWith this functionality in place, administrators can gather information and insights about how their tenants' source accounts are being used.\nThis allows organizations to get the information they need to start optimizing and securing source account usage.\n"
    },
    {
      "name": "Accounts",
      "description": "Use this API to implement and customize account functionality.\nWith this functionality in place, administrators can manage users' access across sources in Identity Security Cloud.\n\nIn Identity Security Cloud, an account refers to a user's account on a supported source.\nThis typically includes a unique identifier for the user, a unique password, a set of permissions associated with the source and a set of attributes. Identity Security Cloud loads accounts through the creation of sources in Identity Security Cloud.\n\nAdministrators can correlate users' identities with the users' accounts on the different sources they use.\nThis allows Identity Security Cloud to govern the access of identities and all their correlated accounts securely and cohesively.\n\nTo view the accounts on a source and their correlated identities, administrators can use the Connections drop-down menu, select Sources, select the relevant source, and select its Account tab.\n\nTo view and edit source account statuses for an identity in Identity Security Cloud, administrators can use the Identities drop-down menu, select Identity List, select the relevant identity, and select its Accounts tab.\nAdministrators can toggle an account's Actions to aggregate the account, enable/disable it, unlock it, or remove it from the identity.\n\nAccounts can have the following statuses:\n\n- Enabled: The account is enabled. The user can access it.\n\n- Disabled: The account is disabled, and the user cannot access it, but the identity is not disabled in Identity Security Cloud. This can occur when an administrator disables the account or when the user's lifecycle state changes.\n\n- Locked: The account is locked. This may occur when someone has entered an incorrect password for the account too many times.\n\n- Pending: The account is currently updating. This status typically lasts seconds.\n\nAdministrators can select the source account to view its attributes, entitlements, and the last time the account's password was changed.\n\nRefer to [Managing User Accounts](https://documentation.sailpoint.com/saas/help/common/users/user_access.html#managing-user-accounts) for more information about accounts.\n"
    },
    {
      "name": "Application Discovery",
      "description": "Use this API to implement application discovery functionality. \nWith this functionality in place, you can discover applications within your Okta connector and receive connector recommendations by manually uploading application names.\n"
    },
    {
      "name": "Approvals",
      "description": "Use this API to implement approval functionality. With this functionality in place, you can get generic approvals and modify them. \n\nThe main advantages this API has vs [Access Request Approvals](https://developer.sailpoint.com/docs/api/beta/access-request-approvals) are that you can use it to get generic approvals individually or in batches and make changes to those approvals.\n"
    },
    {
      "name": "Apps",
      "description": "Use this API to implement source application functionality. \nWith this functionality in place, you can create, customize, and manage applications within sources.\n"
    },
    {
      "name": "Auth Profile",
      "description": "Use this API to implement Auth Profile functionality. \nWith this functionality in place, users can read authentication profiles and make changes to them. \n\nAn authentication profile represents an identity profile's authentication configuration. \nWhen the identity profile is created, its authentication profile is also created. \nAn authentication profile includes information like its authentication profile type (`BLOCK`, `MFA`, `NON_PTA`, PTA`) and settings controlling whether or not it blocks access from off network or untrusted geographies.\n"
    },
    {
      "name": "Certification Campaigns",
      "description": "Use this API to implement certification campaign functionality.\nWith this functionality in place, administrators can create, customize, and manage certification campaigns for their organizations' use.\nCertification campaigns provide Identity Security Cloud users with an interactive review process they can use to identify and verify access to systems.\nCampaigns help organizations reduce risk of inappropriate access and satisfy audit requirements.\n\nA certification refers to Identity Security Cloud's mechanism for reviewing a user's access to entitlements (sets of permissions) and approving or removing that access.\nThese certifications serve as a way of showing that a user's access has been reviewed and approved.\nMultiple certifications by different reviewers are often required to approve a user's access.\nA set of multiple certifications is called a certification campaign.\n\nFor example, an organization may use a Manager Certification campaign as a way of showing that a user's access has been reviewed and approved by multiple managers.\nOnce this campaign has been completed, Identity Security Cloud would provision all the access the user needs, nothing more.\n\nIdentity Security Cloud provides two simple campaign types users can create without using search queries, Manager and Source Owner campaigns:\n\nYou can create these types of campaigns without using any search queries in Identity Security Cloud:\n\n- ManagerCampaign: Identity Security Cloud provides this campaign type as a way to ensure that an identity's access is certified by their managers.\nYou only need to provide a name and description to create one.\n\n- Source Owner Campaign: Identity Security Cloud provides this campaign type as a way to ensure that an identity's access to a source is certified by its source owners.\nYou only need to provide a name and description to create one.\nYou can specify the sources whose owners you want involved or just run it across all sources.\n\nFor more information about these campaign types, refer to [Starting a Manager or Source Owner Campaign](https://documentation.sailpoint.com/saas/help/certs/starting_campaign.html).\n\nOne useful way to create certification campaigns in Identity Security Cloud is to use a specific search and then run a campaign on the results returned by that search.\nThis allows you to be much more specific about whom you are certifying in your campaigns and what access you are certifying in your campaigns.\nFor example, you can search for all identities who are managed by \"Amanda.Ross\" and also have the access to the \"Accounting\" role and then run a certification campaign based on that search to ensure that the returned identities are appropriately certified.\n\nYou can use Identity Security Cloud search queries to create these types of campaigns:\n\n- Identities: Use this campaign type to review and revoke access items for specific identities.\nYou can either build a search query and create a campaign certifying all identities returned by that query, or you can search for individual identities and add those identities to the certification campaign.\n\n- Access Items: Use this campaign type to review and revoke a set of roles, access profiles, or entitlements from the identities that have them.\nYou can either build a search query and create a campaign certifying all access items returned by that query, or you can search for individual access items and add those items to the certification campaign.\n\n- Role Composition: Use this campaign type to review a role's composition, including its title, description, and membership criteria.\nYou can either build a search query and create a campaign certifying all roles returned by that query, or you can search for individual roles and add those roles to the certification campaign.\n\n- Uncorrelated Accounts: Use this campaign type to certify source accounts that aren't linked to an authoritative identity in Identity Security Cloud.\nYou can use this campaign type to view all the uncorrelated accounts for a source and certify them.\n\nFor more information about search-based campaigns, refer to [Starting a Campaign from Search](https://documentation.sailpoint.com/saas/help/certs/starting_search_campaign.html).\n\nOnce you have generated your campaign, it becomes available for preview.\nAn administrator can review the campaign and make changes, or if it's ready and accurate, activate it.\n\nOnce the campaign is active, organization administrators or certification administrators can designate other Identity Security Cloud users as certification reviewers.\nThose reviewers can view any of the certifications they either need to review (active) or have already reviewed (completed).\n\nWhen a certification campaign is in progress, certification reviewers see the listed active certifications whose involved identities they can review.\nReviewers can then make decisions to grant or revoke access, as well as reassign the certification to another reviewer. If the reviewer chooses this option, they must provide a reason for reassignment in the form of a comment.\n\nOnce a reviewer has made decisions on all the certification's involved access items, he or she must \"Sign Off\" to complete the review process.\nDoing so converts the certification into read-only status, preventing any further changes to the review decisions and deleting the work item (task) from the reviewer's list of work items.\n\nOnce all the reviewers have signed off, the certification campaign either completes or, if any reviewers decided to revoke access for any of the involved identities, it moves into a remediation phase.\nIn the remediation phase, identities' entitlements are altered to remove any entitlements marked for revocation.\nIn this situation, the certification campaign completes once all the remediation requests are completed.\n\nThe end of a certification campaign is determined by its deadline, its completion status, or by an administrator's decision.\n\nFor more information about certifications and certification campaigns, refer to [Certifications](https://documentation.sailpoint.com/saas/user-help/certifications.html).\n"
    },
    {
      "name": "Certifications",
      "description": "Use this API to implement certification functionality.\nThis API provides specific functionality that improves an organization's ability to manage its certification process.\n\nA certification refers to Identity Security Cloud's mechanism for reviewing a user's access to entitlements (sets of permissions) and approving or removing that access.\nThese certifications serve as a way of showing that a user's access has been reviewed and approved.\nMultiple certifications by different reviewers are often required to approve a user's access.\nA set of multiple certifications is called a certification campaign.\n\nFor example, an organization may use a Manager Certification as a way of showing that a user's access has been reviewed and approved by their manager, or if the certification is part of a campaign, that the user's access has been reviewed and approved by multiple managers.\nOnce this certification has been completed, Identity Security Cloud  would provision all the access the user needs, nothing more.\n\nThis API enables administrators and reviewers to get useful information about certifications at a high level, such as the reviewers involved, and at a more granular level, such as the permissions affected by changes to entitlements within those certifications.\nIt also provides the useful ability to reassign identities and items within certifications to other reviewers, rather than [reassigning the entire certifications themselves](https://developer.sailpoint.com/idn/api/beta/submit-reassign-certs-async/).\n\nRefer to [Managing User Accounts](https://documentation.sailpoint.com/saas/help/common/users/user_access.html#managing-user-accounts) for more information about accounts.\n"
    },
    {
      "name": "Connector Rule Management",
      "description": "Use this API to implement connector rule management functionality. \nWith this functionality in place, administrators can implement connector-executed rules in a programmatic, scalable way. \n\nIn Identity Security Cloud (ISC), [rules](https://developer.sailpoint.com/docs/extensibility/rules) serve as a flexible configuration framework you can leverage to perform complex or advanced configurations. \n[Connector-executed rules](https://developer.sailpoint.com/docs/extensibility/rules/connector-rules) are rules that are executed in the ISC virtual appliance (VA), usually extensions of the [connector](https://documentation.sailpoint.com/connectors/isc/landingpages/help/landingpages/isc_landing.html) itself, the bridge between the data source and ISC. \nThis API allows administrators to view existing connector-executed rules, make changes to them, delete them, and create new ones from the available types.\n"
    },
    {
      "name": "Connectors",
      "description": "Use this API to implement connector functionality.\nWith this functionality in place, administrators can view available connectors.\n\nConnectors are the bridges Identity Security Cloud uses to communicate with and aggregate data from sources.\nFor example, if it is necessary to set up a connection between Identity Security Cloud and the Active Directory source, a connector can bridge the two and enable Identity Security Cloud to synchronize data between the systems.\nThis ensures account entitlements and states are correct throughout the organization.\n\nIn Identity Security Cloud, administrators can use the Connections drop-down menu and select Sources to view the available source connectors.\n\nRefer to [Identity Security Cloud Connectors](https://documentation.sailpoint.com/connectors/identitynow/landingpages/help/landingpages/identitynow_connectivity_landing.html) for more information about the connectors available in Identity Security Cloud.\n\nRefer to [SaaS Connectivity](https://developer.sailpoint.com/docs/connectivity/saas-connectivity) for more information about the SaaS custom connectors that do not need VAs (virtual appliances) to communicate with their sources.\n\nRefer to [Managing Sources](https://documentation.sailpoint.com/saas/help/sources/managing_sources.html) for more information about using connectors in Identity Security Cloud.\n"
    },
    {
      "name": "Custom Forms",
      "description": "Use this API to build and manage custom forms.\nWith this functionality in place, administrators can create and view form definitions and form instances.\n\nForms are composed of sections and fields. Sections split the form into logical groups of fields and fields are the data collection points within the form. Configure conditions to modify elements of the form as the responder provides input. Create form inputs to pass information from a calling feature, like a workflow, to your form.\n\nForms can be used within workflows as an action or as a trigger. The Form Action allows you to assign a form as a step in a running workflow, suspending the workflow until the form is submitted or times out, and the workflow resumes. The Form Submitted Trigger initiates a workflow when a form is submitted. The trigger can be configured to initiate on submission of a full form, a form element with any value, or a form element with a particular value.\n\nRefer to [Forms](https://documentation.sailpoint.com/saas/help/forms/index.html) for more information about using forms in Identity Security Cloud.\n"
    },
    {
      "name": "Custom Password Instructions",
      "description": "Use this API to implement custom password instruction functionality.\nWith this functionality in place, administrators can create custom password instructions to help users reset their passwords, change them, unlock their accounts, or recover their usernames.\nThis allows administrators to emphasize password policies or provide organization-specific instructions.\n\nAdministrators must first use [Update Password Org Config](https://developer.sailpoint.com/docs/api/beta/put-password-org-config/) to set `customInstructionsEnabled` to `true`.\n\nOnce they have enabled custom instructions, they can use [Create Custom Password Instructions](https://developer.sailpoint.com/docs/api/beta/create-custom-password-instructions/) to create custom page content for the specific pageId they select.\n\nFor example, an administrator can use the pageId forget-username:user-email to set the custom text for the case when users forget their usernames and must enter their emails.\n\nRefer to [Creating Custom Instruction Text](https://documentation.sailpoint.com/saas/help/pwd/pwd_reset.html#creating-custom-instruction-text) for more information about creating custom password instructions.\n"
    },
    {
      "name": "Entitlements",
      "description": "Use this API to implement and customize entitlement functionality.\nWith this functionality in place, administrators can view entitlements and configure them for use throughout Identity Security Cloud in certifications, access profiles, and roles.\nAdministrators in Identity Security Cloud can then grant users access to the entitlements or configure them so users themselves can request access to the entitlements whenever they need them.\nWith a good approval process, this entitlement functionality allows users to gain the specific access they need on sources quickly and securely.\n\nEntitlements represent access rights on sources.\nEntitlements are the most granular form of access in Identity Security Cloud.\nEntitlements are often grouped into access profiles, and access profiles themselves are often grouped into roles, the broadest form of access in Identity Security Cloud.\n\nFor example, an Active Directory source in Identity Security Cloud can have multiple entitlements: the first, 'Employees,' may represent the access all employees have at the organization, and a second, 'Developers,' may represent the access all developers have at the organization.\n\nAn administrator can then create a broader set of access in the form of an access profile, 'AD Developers' grouping the 'Employees' entitlement with the 'Developers' entitlement.\n\nAn administrator can then create an even broader set of access in the form of a role grouping the 'AD Developers' access profile with another profile, 'GitHub Developers,' grouping entitlements for the GitHub source.\n\nWhen users only need Active Directory employee access, they can request access to the 'Employees' entitlement.\n\nWhen users need both Active Directory employee and developer access, they can request access to the 'AD Developers' access profile.\n\nWhen users need both the 'AD Developers' access profile and the 'GitHub Developers' access profile, they can request access to the role grouping both.\n\nAdministrators often use roles and access profiles within those roles to manage access so that users can gain access more quickly, but the hierarchy of access all starts with entitlements.\n\nAnywhere entitlements appear, you can select them to find more information about the following:\n\n- Cloud Access Details: These provide details about the cloud access entitlements on cloud-enabled sources.\n\n- Permissions: Permissions represent individual units of read/write/admin access to a system.\n\n- Relationships: These list each entitlement's parent and child relationships.\n\n- Type: This is the entitlement's type. Some sources support multiple types, each with a different attribute schema.\n\nIdentity Security Cloud uses entitlements in many features, including the following:\n\n- Certifications: Entitlements can be revoked from an identity that no longer needs them.\n\n- Roles: Roles can group access profiles which themselves group entitlements. You can grant and revoke access on a broad level with roles. Role membership criteria can grant roles to identities based on whether they have certain entitlements or attributes.\n\n- Access Profiles: Access profiles group entitlements.\nThey are the most important units of access in Identity Security Cloud.\nIdentity Security Cloud uses them in provisioning, certifications, and access requests, and administrators can configure them to grant very broad or very granular access.\n\nYou cannot delete entitlements directly from Identity Security Cloud.\nEntitlements are deleted based on their inclusion in aggregations.\n\nRefer to [Deleting Entitlements](https://documentation.sailpoint.com/saas/help/access/entitlements.html#deleting-entitlements) more information about deleting entitlements.\n\nRefer to [Entitlements](https://documentation.sailpoint.com/saas/help/access/entitlements.html) for more information about entitlements.\n"
    },
    {
      "name": "Governance Groups",
      "description": "Use this API to implement and customize Governance Group functionality. With this functionality in place, administrators can create Governance Groups and configure them for use throughout Identity Security Cloud.\n\nA governance group is a group of users that can make governance decisions about access. If your organization has the Access Request or Certifications service, you can configure governance groups to review access requests or certifications. A governance group can determine whether specific access is appropriate for a user.\n\nRefer to [Creating and Managing Governance Groups](https://documentation.sailpoint.com/saas/help/common/users/governance_groups.html) for more information about how to build Governance Groups in the visual builder in the Identity Security Cloud UI.\n"
    },
    {
      "name": "IAI Access Request Recommendations"
    },
    {
      "name": "IAI Common Access"
    },
    {
      "name": "IAI Message Catalogs"
    },
    {
      "name": "IAI Outliers"
    },
    {
      "name": "IAI Peer Group Strategies"
    },
    {
      "name": "IAI Recommendations"
    },
    {
      "name": "IAI Role Mining"
    },
    {
      "name": "Icons",
      "description": "Use this API to implement functionality related to object icons (application icons for example). \nWith this functionality in place, administrators can set or remove an icon for specific object type for use throughout Identity Security Cloud.\n"
    },
    {
      "name": "Identities",
      "description": "Use this API to implement identity functionality.\nWith this functionality in place, administrators can synchronize an identity's attributes with its various source attributes.\n\nIdentity Security Cloud uses identities as users' authoritative accounts. Identities can own other accounts, entitlements, and attributes.\n\nAn identity has a variety of attributes, such as an account name, an email address, a job title, and more.\nThese identity attributes can be correlated with different attributes on different sources.\nFor example, the identity John.Smith can own an account in the GitHub source with the account name John-Smith-Org, and Identity Security Cloud knows they are the same person with the same access and attributes.\n\nIn Identity Security Cloud, administrators often set up these synchronizations to get triggered automatically with a change or to run on a schedule.\nTo manually synchronize attributes for an identity, administrators can use the Identities drop-down menu and select Identity List to view the list of identities.\nThey can then select the identity they want to manually synchronize and use the hamburger menu to select 'Synchronize Attributes.'\nDoing so immediately begins the attribute synchronization and analyzes all accounts for the selected identity.\n\nRefer to [Synchronizing Attributes](https://documentation.sailpoint.com/saas/help/provisioning/attr_sync.html) for more information about synchronizing attributes.\n"
    },
    {
      "name": "Identity Attributes"
    },
    {
      "name": "Identity History"
    },
    {
      "name": "Identity Profiles",
      "description": "Use this API to implement and customize identity profile functionality.\nWith this functionality in place, administrators can manage identity profiles and configure them for use by identities throughout Identity Security Cloud.\n\nIdentity profiles represent the configurations that can be applied to identities as a way of granting them a set of security and access, as well as defining the mappings between their identity attributes and their source attributes.\nThis allows administrators to save time by applying identity profiles to any number of similar identities rather than configuring each one individually.\n\nIn Identity Security Cloud, administrators can use the Identities drop-down menu and select Identity Profiles to view the list of identity profiles.\nThis list shows some details about each identity profile, along with its status. They can select an identity profile to view and modify its settings, its mappings between identity attributes and correlating source account attributes, and its provisioning settings.\nAdministrators can also use this page to create new identity profiles or delete existing ones.\n\nRefer to [Creating Identity Profiles](https://documentation.sailpoint.com/saas/help/setup/identity_profiles.html) for more information about identity profiles.\n"
    },
    {
      "name": "Launchers",
      "description": "Use this API to manage Launchers.\n\nLaunchers are objects that allow users to launch various tasks from ISC such as Privileged Workflows.\n"
    },
    {
      "name": "Lifecycle States",
      "description": "Use this API to implement and customize lifecycle state functionality.\nWith this functionality in place, administrators can view and configure custom lifecycle states for use across their organizations, which is key to controlling which users have access, when they have access, and the access they have.\n\nA lifecycle state describes a user's status in a company. For example, two lifecycle states come by default with Identity Security Cloud: 'Active' and 'Inactive.'\nWhen an active employee takes an extended leave of absence from a company, his or her lifecycle state may change to 'Inactive,' for security purposes.\nThe inactive employee would lose access to all the applications, sources, and sensitive data during the leave of absence, but when the employee returns and becomes active again, all that access would be restored.\nThis saves administrators the time that would otherwise be spent provisioning the employee's access to each individual tool, reviewing the employee's certification history, etc.\n\nAdministrators must define the criteria for being in each lifecycle state, and they must define how Identity Security Cloud manages users' access to apps and sources for each lifecycle state.\n\nIn Identity Security Cloud, administrators can manage lifecycle states by going to Admin > Identities > Identity Profile, selecting the identity profile whose lifecycle states they want to manage, selecting the 'Provisioning' tab, and using the left panel to select the lifecycle state they want to modify.\n\nIn the 'Provisioning' tab, administrators can make the following access changes to an identity profile's lifecycle state:\n\n- Enable/disable the lifecycle state for the identity profile.\n\n- Enable/disable source accounts for the identity profile's lifecycle state.\n\n- Add existing access profiles to grant to the identity profiles in that lifecycle state.\n\n- Create a new access profile to grant to the identity profile in that lifecycle state.\n\nAccess profiles granted in a previous lifecycle state are automatically revoked when the identity moves to a new lifecycle state.\nTo maintain access across multiple lifecycle states, administrators must grant the access profiles in each lifecycle state.\nFor example, if an administrator wants users with the 'HR Employee' identity profile to maintain their building access in both the 'Active' and 'Leave of Absence' lifecycle states, the administrator must grant the access profile for that building access to both lifecycle states.\n\nDuring scheduled refreshes, Identity Security Cloud evaluates lifecycle states to determine whether their assigned identities have the access defined in the lifecycle states' access profiles.\nIf the identities are missing access, Identity Security Cloud provisions that access.\n\nAdministrators can also use the 'Provisioning' tab to configure email notifications for Identity Security Cloud to send whenever an identity with that identity profile has a lifecycle state change.\nRefer to [Configuring Lifecycle State Notifications](https://documentation.sailpoint.com/saas/help/provisioning/lifecycle.html#configuring-lifecycle-state-notifications) for more information on how to do so.\n\nAn identity's lifecycle state can have four different statuses: the lifecycle state's status can be 'Active,' it can be 'Not Set,' it can be 'Not Valid,' or it 'Does Not Match Technical Name Case.'\nRefer to [Moving Identities into Lifecycle States](https://documentation.sailpoint.com/saas/help/provisioning/lifecycle.html#moving-identities-into-lifecycle-states) for more information about these different lifecycle state statuses.\n\nRefer to [Setting Up Lifecycle States](https://documentation.sailpoint.com/saas/help/provisioning/lifecycle.html) for more information about lifecycle states.\n"
    },
    {
      "name": "Managed Clients",
      "description": "Use this API to implement managed client functionality. \nWith this functionality in place, administrators can modify and delete existing managed clients, create new ones, and view and make changes to their log configurations.\n"
    },
    {
      "name": "Managed Clusters",
      "description": "Use this API to implement managed cluster functionality. \nWith this functionality in place, administrators can modify and delete existing managed clients, get their statuses, and create new ones.\n"
    },
    {
      "name": "MFA Configuration",
      "description": "Configure and test multifactor authentication (MFA) methods"
    },
    {
      "name": "MFA Controller",
      "description": "This API used for multifactor authentication functionality belong to gov-multi-auth service. This controller allow you to verify authentication by specified method"
    },
    {
      "name": "Multi-Host Integration",
      "description": "Use this API to build a Multi-Host Integration.\nMulti-Host Integration will help customers to configure and manage similar type of target system in Identity Security Cloud.\nIn Identity Security Cloud, administrators can create a Multi-Host Integration by going to Admin > Connections > Multi-Host Sources and selecting 'Create.'\n"
    },
    {
      "name": "Non-Employee Lifecycle Management",
      "description": "Use this API to implement non-employee lifecycle management functionality.\nWith this functionality in place, administrators can create non-employee records and configure them for use in their organizations.\nThis allows organizations to provide secure access to non-employees and control that access.\n\nThe 'non-employee' term refers to any consultant, contractor, intern, or other user in an organization who is not a full-time permanent employee.\nOrganizations can track non-employees' access and activity in Identity Security Cloud by creating and maintaining non-employee sources.\nOrganizations can have a maximum of 50 non-employee sources.\n\nBy using SailPoint's Non-Employee Lifecycle Management functionality, you agree to the following:\n\n- SailPoint is not responsible for storing sensitive data.\nYou may only add account attributes to non-employee identities that are necessary for business operations and are consistent with your contractual limitations on data that may be sent or stored in Identity Security Cloud.\n\n- You are responsible for regularly downloading your list of non-employee accounts for all the sources you create and storing this list of accounts in a managed location to maintain an authoritative system of record and backup data for these accounts.\n\nTo manage non-employees in Identity Security Cloud, administrators must create a non-employee source and add accounts to the source.\n\nTo create a non-employee source in Identity Security Cloud, administrators must use the Admin panel to go to Connections > Sources.\nThey must then specify 'Non-Employee' in the 'Source Type' field.\nRefer to [Creating a Non-Employee Source](https://documentation.sailpoint.com/saas/help/common/non-employee-mgmt.html#creating-a-non-employee-source) for more details about how to create non-employee sources.\n\nTo add accounts to a non-employee source in Identity Security Cloud, administrators can select the non-employee source and add the accounts.\nThey can also use the 'Manage Non-Employees' widget on their user dashboards to reach the list of sources and then select the non-employee source they want to add the accounts to.\n\nAdministrators can either add accounts individually or in bulk. Each non-employee source can have a maximum of 20,000 accounts.\nTo add accounts in bulk, they must select the 'Bulk Upload' option and upload a CSV file.\nRefer to [Adding Accounts](https://documentation.sailpoint.com/saas/help/common/non-employee-mgmt.html#adding-accounts) for more details about how to add accounts to non-employee sources.\n\nOnce administrators have created the non-employee source and added accounts to it, they can create identity profiles to generate identities for the non-employee accounts and manage the non-employee identities the same way they would any other identities.\n\nRefer to [Managing Non-Employee Sources and Accounts](https://documentation.sailpoint.com/saas/help/common/non-employee-mgmt.html) for more information about non-employee lifecycle management.\n"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "OAuth Clients",
      "description": "Use this API to implement OAuth client functionality.\nWith this functionality in place, users with the appropriate security scopes can create and configure OAuth clients to use as a way to obtain authorization to use the Identity Security Cloud REST API.\nRefer to [Authentication](https://developer.sailpoint.com/docs/api/authentication/) for more information about OAuth and how it works with the Identity Security Cloud REST API.\n"
    },
    {
      "name": "Org Config",
      "description": "Use this API to implement organization configuration functionality. \nAdministrators can use this functionality to manage organization settings, such as time zones.\n"
    },
    {
      "name": "Password Configuration",
      "description": "Use this API to implement organization password configuration functionality.\nWith this functionality in place, organization administrators can create organization-specific password configurations.\n\nThese configurations include details like custom password instructions, as well as digit token length and duration.\n\nRefer to [Configuring User Authentication for Password Resets](https://documentation.sailpoint.com/saas/help/pwd/pwd_reset.html) for more information about organization password configuration functionality.\n"
    },
    {
      "name": "Password Dictionary",
      "description": "Use this API to implement password dictionary functionality.\nWith this functionality in place, administrators can create password dictionaries to prevent users from using certain words or characters in their passwords.\n\nA password dictionary is a list of words or characters that users are prevented from including in their passwords.\nThis can help protect users from themselves and force them to create passwords that are not easy to break.\n\nA password dictionary must meet the following requirements to for the API to handle them correctly:\n\n- It must be in .txt format.\n\n- All characters must be UTF-8 characters.\n\n- Each line must contain a single word or character with no spaces or whitespace characters.\n\n- It must contain at least one line other than the locale string.\n\n- Each line must not exceed 128 characters.\n\n- The file must not exceed 2500 lines.\n\nAdministrators should also consider the following when they create their dictionaries:\n\n- Lines starting with a # represent comments.\n\n- All words in the password dictionary are case-insensitive.\nFor example, adding the word \"password\" to the dictionary also disallows the following: PASSWORD, Password, and PassWord.\n\n- The dictionary uses substring matching.\nFor example, adding the word \"spring\" to the dictionary also disallows the following: Spring124, 345SprinG, and 8spring.\nUsers can then select 'Change Password' to update their passwords.\n\nAdministrators must do the following to create a password dictionary:\n\n- Create the text file that will contain the prohibited password values.\n\n- If the dictionary is not in English, they must add a locale string to the top line: locale:`languageCode`_`countryCode`\n\nThe languageCode value refers to the language's 2-letter ISO 639-1 code.\nThe countryCode value refers to the country's 2-letter ISO 3166-1 code.\n\nRefer to this list https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html to see all the available ISO 639-1 language codes and ISO 3166-1 country codes.\n\n- Upload the .txt file to Identity Security Cloud with [Update Password Dictionary](https://developer.sailpoint.com/docs/api/beta/put-password-dictionary). Uploading a new file always overwrites the previous dictionary file.\n\nAdministrators can then specify which password policies check new passwords against the password dictionary by doing the following: In the Admin panel, they can use the Password Mgmt dropdown menu to select Policies, select the policy, and select the 'Prevent use of words in this site's password dictionary' checkbox beside it.\n\nRefer to [Configuring Advanced Password Management Options](https://documentation.sailpoint.com/saas/help/pwd/adv_config.html) for more information about password dictionaries.\n"
    },
    {
      "name": "Password Management",
      "description": "Use this API to implement password management functionality.\nWith this functionality in place, users can manage their identity passwords for all their applications.\n\nIn Identity Security Cloud, users can select their names in the upper right corner of the page and use the drop-down menu to select Password Manager.\nPassword Manager lists the user's identity's applications, possibly grouped to share passwords.\nUsers can then select 'Change Password' to update their passwords.\n\nGrouping passwords allows users to update their passwords more broadly, rather than requiring them to update each password individually.\nPassword Manager may list the applications and sources in the following groups:\n\n- Password Group: This refers to a group of applications that share a password.\nFor example, a user can use the same password for Google Drive, Google Mail, and YouTube.\nUpdating the password for the password group updates the password for all its included applications.\n\n- Multi-Application Source: This refers to a source with multiple applications that share a password.\nFor example, a user can have a source, G Suite, that includes the Google Calendar, Google Drive, and Google Mail applications.\nUpdating the password for the multi-application source updates the password for all its included applications.\n\n- Applications: These are applications that do not share passwords with other applications.\n\nAn organization may require some authentication for users to update their passwords.\nUsers may be required to answer security questions or use a third-party authenticator before they can confirm their updates.\n\nRefer to [Managing Passwords](https://documentation.sailpoint.com/saas/user-help/accounts/passwords.html) for more information about password management.\n"
    },
    {
      "name": "Password Policies",
      "description": "Use these APIs to implement password policies functionality.\nThese APIs allow you to define the policy parameters for choosing passwords.\n\nIdentityNow comes with a default policy that you can modify to define the password requirements your users must meet to log in to IdentityNow, such as requiring a minimum password length, including special characters, and disallowing certain patterns.\nIf you have licensed Password Management, you can create additional password policies beyond the default one to manage passwords for supported sources in your org.\n\nIn the Identity Security Cloud Admin panel, administrators can use the Password Mgmt dropdown menu to select Sync Groups.\n\nRefer to [Managing Password Policies](https://documentation.sailpoint.com/saas/help/pwd/pwd_policies/pwd_policies.html) for more information about password policies.\n"
    },
    {
      "name": "Password Sync Groups",
      "description": "Use this API to implement password sync group functionality.\nWith this functionality in place, administrators can group sources into password sync groups so that all their applications share the same password.\nThis allows users to update the password for all the applications in a sync group if they want, rather than updating each password individually.\n\nA password sync group is a group of applications that shares a password.\nAdministrators create these groups by grouping the applications' sources.\nFor example, an administrator can group the ActiveDirectory, GitHub, and G Suite sources together so that all those sources' applications can also be grouped to share a password.\nA user can then update his or her password for ActiveDirectory, GitHub, Gmail, Google Drive, and Google Calendar all at once, rather then updating each one individually.\n\nThe following are required for administrators to create a password sync group in Identity Security Cloud:\n\n- At least two direct connect sources connected to Identity Security Cloud and configured for Password Management.\n\n- Each authentication source in a sync group must have at least one application. Refer to [Adding and Resetting Application Passwords](https://documentation.sailpoint.com/saas/help/pwd/adv_config.html#adding-and-resetting-application-passwords) for more information about adding applications to sources.\n\n- At least one password policy. Refer to [Managing Password Policies](https://documentation.sailpoint.com/saas/help/pwd/policies.html) for more information about password policies.\n\nIn the Admin panel in Identity Security Cloud, administrators can use the Password Mgmt dropdown menu to select Sync Groups.\nTo create a sync group, administrators must provide a name, choose a password policy to be enforced across the sources in the sync group, and select the sources to include in the sync group.\n\nAdministrators can also delete sync groups in Identity Security Cloud, but they should know the following before they do:\n\n- Passwords related to the associated sources will become independent, so changing one will not change the others anymore.\n\n- Passwords for the sources' connected applications will also become independent.\n\n- Password policies assigned to the sync group are then assigned directly to the associated sources.\nTo change the password policy for a source, administrators must edit it directly.\n\nOnce the password sync group has been created, users can update the password for the group in Password Manager.\n\nRefer to [Managing Password Sync Groups](https://documentation.sailpoint.com/saas/help/pwd/sync_grps.html) for more information about password sync groups.\n"
    },
    {
      "name": "Personal Access Tokens",
      "description": "Use this API to implement personal access token (PAT) functionality.\nWith this functionality in place, users can use PATs as an alternative to passwords for authentication in Identity Security Cloud.\n\nPATs embed user information into the client ID and secret.\nThis replaces the API clients' need to store and provide a username and password to establish a connection, improving Identity Security Cloud organizations' integration security.\n\nIn Identity Security Cloud, users can do the following to create and manage their PATs: Select the dropdown menu under their names, select Preferences, and then select Personal Access Tokens.\nThey must then provide a description about the token's purpose.\nThey can then select 'Create Token' at the bottom of the page to generate and view the Secret and Client ID.\n\nRefer to [Managing Personal Access Tokens](https://documentation.sailpoint.com/saas/help/common/generate_tokens.html) for more information about PATs.\n"
    },
    {
      "name": "Public Identities Config",
      "description": "Use this API to implement public identity configuration functionality.\nWith this functionality in place, administrators can make up to 5 identity attributes publicly visible so other non-administrator users can see the relevant information they need to make decisions.\nThis can be helpful for access approvers, certification reviewers, managers viewing their direct reports' access, and source owners viewing their tasks.\n\nBy default, non-administrators can select an identity and view the following attributes: email, lifecycle state, and manager.\nHowever, it may be helpful for a non-administrator reviewer to see other identity attributes like department, region, title, etc.\nAdministrators can use this API to make those necessary identity attributes public to non-administrators.\n\nFor example, a non-administrator deciding whether to approve another identity's request for access to the Workday application, whose access may be restricted to members of the HR department, would want to know whether the identity is a member of the HR department.\nIf an administrator has used [Update Public Identity Config](https://developer.sailpoint.com/docs/api/beta/update-public-identity-config/) to make the \"department\" attribute public, the approver can see the department and make a decision without requesting any more information.\n"
    },
    {
      "name": "Requestable Objects",
      "description": "Use this API to implement requestable object functionality.\nWith this functionality in place, administrators can determine which access items can be requested with the [Access Request APIs](https://developer.sailpoint.com/docs/api/beta/access-requests/), along with their statuses.\nThis can be helpful for administrators who are implementing and customizing access request functionality as a way of checking which items are requestable as they are created, assigned, and made available.\n"
    },
    {
      "name": "Role Insights"
    },
    {
      "name": "Roles",
      "description": "Use this API to implement and customize role functionality.\nWith this functionality in place, administrators can create roles and configure them for use throughout Identity Security Cloud.\nIdentity Security Cloud can use established criteria to automatically assign the roles to qualified users. This enables users to get all the access they need quickly and securely and administrators to spend their time on other tasks.\n\nEntitlements represent the most granular level of access in Identity Security Cloud.\nAccess profiles represent the next level and often group entitlements.\nRoles represent the broadest level of access and often group access profiles.\n\nFor example, an Active Directory source in Identity Security Cloud can have multiple entitlements: the first, 'Employees,' may represent the access all employees have at the organization, and a second, 'Developers,' may represent the access all developers have at the organization.\n\nAn administrator can then create a broader set of access in the form of an access profile, 'AD Developers' grouping the 'Employees' entitlement with the 'Developers' entitlement.\n\nAn administrator can then create an even broader set of access in the form of a role grouping the 'AD Developers' access profile with another profile, 'GitHub Developers,' grouping entitlements for the GitHub source.\n\nWhen users only need Active Directory employee access, they can request access to the 'Employees' entitlement.\n\nWhen users need both Active Directory employee and developer access, they can request access to the 'AD Developers' access profile.\n\nWhen users need both the 'AD Developers' access profile and the 'GitHub Developers' access profile, they can request access to the role grouping both.\n\nRoles often represent positions within organizations.\nFor example, an organization's accountant can access all the tools the organization's accountants need with the 'Accountant' role.\nIf the accountant switches to engineering, a qualified member of the organization can quickly revoke the accountant's 'Accountant' access and grant access to the 'Engineer' role instead, granting access to all the tools the organization's engineers need.\n\nIn Identity Security Cloud, adminstrators can use the Access drop-down menu and select Roles to view, configure, and delete existing roles, as well as create new ones.\nAdministrators can enable and disable the role, and they can also make the following configurations:\n\n- Manage Access: Manage the role's access by adding or removing access profiles.\n\n- Define Assignment: Define the criteria Identity Security Cloud uses to assign the role to identities.\nUse the first option, 'Standard Criteria,' to provide specific criteria for assignment like specific account attributes, entitlements, or identity attributes.\nUse the second, 'Identity List,' to specify the identities for assignment.\n\n- Access Requests: Configure roles to be requestable and establish an approval process for any requests that the role be granted or revoked.\nDo not configure a role to be requestable without establishing a secure access request approval process for that role first.\n\nRefer to [Working with Roles](https://documentation.sailpoint.com/saas/help/access/roles.html) for more information about roles.\n"
    },
    {
      "name": "Search Attribute Configuration",
      "description": "Use this API to implement search attribute configuration functionality, along with [Search](https://developer.sailpoint.com/docs/api/v3/search).\nWith this functionality in place, administrators can create custom search attributes that and run extended searches based on those attributes to further narrow down their searches and get the information and insights they want. \n\nIdentity Security Cloud (ISC) enables organizations to store user data from across all their connected sources and manage the users' access, so the ability to query and filter that data is essential.  \nIts search goes through all those sources and finds the results quickly and specifically. \n\nThe search query is flexible - it can be very broad or very narrow. \nThe search only returns results for searchable objects it is filtering for. \nThe following objects are searchable: identities, roles, access profiles, entitlements, events, and account activities. \nBy default, no filter is applied, so a search for \"Ad\" returns both the identity \"Adam.Archer\" as well as the role \"Administrator.\"\n\nUsers can further narrow their results by using ISC's specific syntax and punctuation to structure their queries. \nFor example, the query \"attributes.location:austin AND NOT manager.name:amanda.ross\" returns all results associated with the Austin location, but it excludes those associated with the manager Amanda Ross.\nRefer to [Building a Search Query](https://documentation.sailpoint.com/saas/help/search/building-query.html) for more information about how to construct specific search queries. \n\nRefer to [Using Search](https://documentation.sailpoint.com/saas/help/search/index.html) for more information about ISC's search and its different possibilities. \n\nWith Search Attribute Configuration, administrators can create, manage, and run searches based on the attributes they want to search.\n"
    },
    {
      "name": "Segments",
      "description": "Use this API to implement and customize access request segment functionality. \nWith this functionality in place, administrators can create and manage access request segments. \nSegments provide organizations with a way to make the access their users have even more granular - this can simply the access request process for the organization's users and improves security by reducing the risk of overprovisoning access. \n\nSegments represent sets of identities, all grouped by specified identity attributes, who are only able to see and access the access items associated with their segments.\nFor example, administrators could group all their organization's London office employees into one segment, \"London Office Employees,\" by their shared location. \nThe administrators could then define the access items the London employees would need, and the identities in the \"London Office Employees\" would then only be able to see and access those items.\n\nIn Identity Security Cloud, administrators can use the 'Access' drop-down menu and select 'Segments' to reach the 'Access Requests Segments' page. \nThis page lists all the existing access request segments, along with their statuses, enabled or disabled. \nAdministrators can use this page to create, edit, enable, disable, and delete segments. \nTo create a segment, an administrator must provide a name, define the identities grouped in the segment, and define the items the identities in the segment can access.\nThese items can be access profiles, roles, or entitlements. \n\nWhen administrators use the API to create and manage segments, they use a JSON expression in the `visibilityCriteria` object to define the segment's identities and access items. \n\nRefer to [Managing Access Request Segments](https://documentation.sailpoint.com/saas/help/requests/segments.html) for more information about segments in Identity Security Cloud.\n"
    },
    {
      "name": "Service Desk Integration",
      "description": "Use this API to build an integration between Identity Security Cloud and a service desk ITSM (IT service management) solution.\nOnce an administrator builds this integration between Identity Security Cloud and a service desk, users can use Identity Security Cloud to raise and track tickets that are synchronized between Identity Security Cloud and the service desk.\n\nIn Identity Security Cloud, administrators can create a service desk integration (sometimes also called an SDIM, or Service Desk Integration Module) by going to Admin > Connections > Service Desk and selecting 'Create.'\n\nTo create a Generic Service Desk integration, for example, administrators must provide the required information on the General Settings page, the Connectivity and Authentication information, Ticket Creation information, Status Mapping information, and Requester Source information on the Configure page.\nRefer to [Integrating SailPoint with Generic Service Desk](https://documentation.sailpoint.com/connectors/generic_sd/help/integrating_generic_service_desk/intro.html) for more information about the process of setting up a Generic Service Desk in Identity Security Cloud.\n\nAdministrators can create various service desk integrations, all with their own nuances.\nThe following service desk integrations are available:\n\n- [Atlassian Cloud Jira Service Management](https://documentation.sailpoint.com/connectors/atlassian/jira_cloud/help/integrating_jira_cloud_sd/introduction.html)\n\n- [Atlassian Server Jira Service Management](https://documentation.sailpoint.com/connectors/atlassian/jira_server/help/integrating_jira_server_sd/introduction.html)\n\n- [BMC Helix ITSM Service Desk](https://documentation.sailpoint.com/connectors/bmc/helix_ITSM_sd/help/integrating_bmc_helix_itsm_sd/intro.html)\n\n- [BMC Helix Remedyforce Service Desk](https://documentation.sailpoint.com/connectors/bmc/helix_remedyforce_sd/help/integrating_bmc_helix_remedyforce_sd/intro.html)\n\n- [Generic Service Desk](https://documentation.sailpoint.com/connectors/generic_sd/help/integrating_generic_service_desk/intro.html)\n\n- [ServiceNow Service Desk](https://documentation.sailpoint.com/connectors/servicenow/sdim/help/integrating_servicenow_sdim/intro.html)\n\n- [Zendesk Service Desk](https://documentation.sailpoint.com/connectors/zendesk/help/integrating_zendesk_sd/introduction.html)\n"
    },
    {
      "name": "SIM Integrations",
      "description": "Use this API to administer IdentityNow's Service Integration Module, or SIM integration with ServiceNow, so that it converts IdentityNow provisioning actions into tickets in ServiceNow.\n\nServiceNow is a software platform that supports IT service management and automates common business processes for requesting and fulfilling service requests across a business enterprise.\n\nYou must have an IdentityNow ServiceNow ServiceDesk license to use this integration. Contact your Customer Success Manager for more information.\n\nService Desk integration for IdentityNow and in deprecation - not available for new implementation, as of July 21st, 2021. As per SailPoint’s [support policy](https://community.sailpoint.com/t5/Connector-Directory/SailPoint-Support-Policy-for-Connectivity/ta-p/79422), all existing SailPoint IdentityNow customers using this legacy integration will be supported until July 2022.\n"
    },
    {
      "name": "SOD Policies",
      "description": "Use this API to implement and manage \"separation of duties\" (SOD) policies. \nWith SOD policy functionality in place, administrators can organize the access in their tenants to prevent individuals from gaining conflicting or excessive access. \n\n\"Separation of duties\" refers to the concept that people shouldn't have conflicting sets of access - all their access should be configured in a way that protects your organization's assets and data.  \nFor example, people who record monetary transactions shouldn't be able to issue payment for those transactions.\nAny changes to major system configurations should be approved by someone other than the person requesting the change. \n\nOrganizations can use \"separation of duties\" (SOD) policies to enforce and track their internal security rules throughout their tenants.\nThese SOD policies limit each user's involvement in important processes and protects the organization from individuals gaining excessive access. \n\nTo create SOD policies in Identity Security Cloud, administrators use 'Search' and then access 'Policies'.\nTo create a policy, they must configure two lists of access items. Each access item can only be added to one of the two lists.\nThey can search for the entitlements they want to add to these access lists.\n\n>Note: You can have a maximum of 500 policies of any type (including general policies) in your organization. In each access-based SOD policy, you can have a maximum of 50 entitlements in each access list.\n\nOnce a SOD policy is in place, if an identity has access items on both lists, a SOD violation will trigger. \nThese violations are included in SOD violation reports that other users will see in emails at regular intervals if they're subscribed to the SOD policy.\nThe other users can then better help to enforce these SOD policies. \n\nTo create a subscription to a SOD policy in Identity Security Cloud, administrators use 'Search' and then access 'Layers'.\nThey can create a subscription to the policy and schedule it to run at a regular interval. \n\nRefer to [Managing Policies](https://documentation.sailpoint.com/saas/help/sod/manage-policies.html) for more information about SOD policies. \n\nRefer to [Subscribe to a SOD Policy](https://documentation.sailpoint.com/saas/help/sod/policy-violations.html#subscribe-to-an-sod-policy) for more information about SOD policy subscriptions.\n"
    },
    {
      "name": "SOD Violations",
      "description": "Use this API to check for current \"separation of duties\" (SOD) policy violations as well as potential future SOD policy violations. \nWith SOD violation functionality in place, administrators can get information about current SOD policy violations and predict whether an access change will trigger new violations, which helps to prevent them from occurring at all. \n\n\"Separation of duties\" refers to the concept that people shouldn't have conflicting sets of access - all their access should be configured in a way that protects your organization's assets and data.  \nFor example, people who record monetary transactions shouldn't be able to issue payment for those transactions.\nAny changes to major system configurations should be approved by someone other than the person requesting the change. \n\nOrganizations can use \"separation of duties\" (SOD) policies to enforce and track their internal security rules throughout their tenants.\nThese SOD policies limit each user's involvement in important processes and protects the organization from individuals gaining excessive access. \n\nOnce a SOD policy is in place, if an identity has conflicting access items, a SOD violation will trigger. \nThese violations are included in SOD violation reports that other users will see in emails at regular intervals if they're subscribed to the SOD policy.\nThe other users can then better help to enforce these SOD policies.\n\nAdministrators can use the SOD violations APIs to check a set of identities for any current SOD violations, and they can use them to check whether adding an access item would potentially trigger a SOD violation. \nThis second option is a good way to prevent SOD violations from triggering at all. \n\nRefer to [Handling Policy Violations](https://documentation.sailpoint.com/saas/help/sod/policy-violations.html) for more information about SOD policy violations.\n"
    },
    {
      "name": "Source Usages",
      "description": "Use this API to implement source usage insight functionality.\nWith this functionality in place, administrators can gather information and insights about how their tenants' sources are being used.\nThis allows organizations to get the information they need to start optimizing and securing source usage.\n"
    },
    {
      "name": "Sources",
      "description": "Use this API to implement and customize source functionality.\nWith source functionality in place, organizations can use Identity Security Cloud to connect their various sources and user data sets and manage access across all those different sources in a secure, scalable way.\n\n[Sources](https://documentation.sailpoint.com/saas/help/sources/managing_sources.html) refer to the Identity Security Cloud representations for external applications, databases, and directory management systems that maintain their own sets of users, like Dropbox, GitHub, and Workday, for example.\nOrganizations may use hundreds, if not thousands, of different source systems, and any one employee within an organization likely has a different user record on each source, often with different permissions on many of those records.\nConnecting these sources to Identity Security Cloud makes it possible to manage user access across them all.\nThen, if a new hire starts at an organization, Identity Security Cloud can grant the new hire access to all the sources they need.\nIf an employee moves to a new department and needs access to new sources but no longer needs access to others, Identity Security Cloud can grant the necessary access and revoke the unnecessary access for all the employee's various sources.\nIf an employee leaves the company, Identity Security Cloud can revoke access to all the employee's various source accounts immediately.\nThese are just a few examples of the many ways that source functionality makes identity governance easier, more efficient, and more secure.\n\nIn Identity Security Cloud, administrators can create configure, manage, and edit sources, and they can designate other users as source admins to be able to do so.\nThey can also designate users as source sub-admins, who can perform the same source actions but only on sources associated with their governance groups.\nAdmins go to Connections > Sources to see a list of the existing source representations in their organizations.\nThey can create new sources or select existing ones.\n\nTo create a new source, the following must be specified: Source Name, Description, Source Owner, and Connection Type.\nRefer to [Configuring a Source](https://documentation.sailpoint.com/saas/help/accounts/loading_data.html#configuring-a-source) for more information about the source configuration process.\n\nIdentity Security Cloud connects with its sources either by a direct communication with the source server (connection information specific to the source must be provided) or a flat file feed, a CSV file containing all the relevant information about the accounts to be loaded in.\nDifferent sources use different connectors to share data with Identity Security Cloud, and each connector's setup process is specific to that connector.\nSailPoint has built a number of connectors to come out of the box and connect to the most common sources, and SailPoint actively maintains these connectors.\nRefer to [Identity Security Cloud Connectors](https://documentation.sailpoint.com/connectors/identitynow/landingpages/help/landingpages/identitynow_connectivity_landing.html) for more information about these SailPoint supported connectors.\nRefer to the following links for more information about two useful connectors:\n\n- [JDBC Connector](https://documentation.sailpoint.com/connectors/jdbc/help/integrating_jdbc/introduction.html): This customizable connector an directly connect to databases that support JDBC (Java Database Connectivity).\n\n- [Web Services Connector](https://documentation.sailpoint.com/connectors/webservices/help/integrating_webservices/introduction.html): This connector can directly connect to databases that support Web Services.\n\nRefer to [SaaS Connectivity](https://developer.sailpoint.com/docs/connectivity/saas-connectivity/) for more information about SailPoint's new connectivity framework that makes it easy to build and manage custom connectors to SaaS sources.\n\nWhen admins select existing sources, they can view the following information about the source:\n\n- Associated connections (any associated identity profiles, apps, or references to the source in a transform).\n\n- Associated user accounts. These accounts are linked to their identities - this provides a more complete picture of each user's access across sources.\n\n- Associated entitlements (sets of access rights on sources).\n\n- Associated access profiles (groupings of entitlements).\n\nThe user account data and the entitlements update with each data aggregation from the source.\nOrganizations generally run scheduled, automated data aggregations to ensure that their data is always in sync between their sources and their Identity Security Cloud tenants so an access change on a source is detected quickly in Identity Security Cloud.\nAdmins can view a history of these aggregations, and they can also run manual imports.\nRefer to [Loading Account Data](https://documentation.sailpoint.com/saas/help/accounts/loading_data.html) for more information about manual and scheduled aggregations.\n\nAdmins can also make changes to determine which user account data Identity Security Cloud collects from the source and how it correlates that account data with identity data.\nTo define which account attributes the source shares with Identity Security Cloud, admins can edit the account schema on the source.\nRefer to [Managing Source Account Schemas](https://documentation.sailpoint.com/saas/help/accounts/schema.html) for more information about source account schemas and how to edit them.\nTo define the mapping between the source account attributes and their correlating identity attributes, admins can edit the correlation configuration on the source.\nRefer to [Assigning Source Accounts to Identities](https://documentation.sailpoint.com/saas/help/accounts/correlation.html) for more information about this correlation process between source accounts and identities.\n\nAdmins can also delete sources, but they must first ensure that the sources no longer have any active connections: the source must not be associated with any identity profile or any app, and it must not be referenced by any transform.\nRefer to [Deleting Sources](https://documentation.sailpoint.com/saas/help/sources/managing_sources.html#deleting-sources) for more information about deleting sources.\n\nWell organized, mapped out connections between sources and Identity Security Cloud are essential to achieving comprehensive identity access governance across all the source systems organizations need.\nRefer to [Managing Sources](https://documentation.sailpoint.com/saas/help/sources/managing_sources.html) for more information about all the different things admins can do with sources once they are connected.\n"
    },
    {
      "name": "SP-Config",
      "description": "Import and export configuration for some objects between tenants."
    },
    {
      "name": "Suggested Entitlement Description",
      "description": "Use this API to implement Suggested Entitlement Description (SED) functionality. \nSED functionality leverages the power of LLM to generate suggested entitlement descriptions. \nRefer to [GenAI Entitlement Descriptions](https://documentation.sailpoint.com/saas/help/access/entitlements.html#genai-entitlement-descriptions) to learn more about SED in Identity Security Cloud (ISC).\n"
    },
    {
      "name": "Tagged Objects",
      "description": "Use this API to implement object tagging functionality. \nWith object tagging functionality in place, any user in an organization can use tags as a way to group objects together and find them more quickly when the user searches Identity Security Cloud. \n\nIn Identity Security Cloud, users can search their tenants for information and add tags objects they find.\nTagging an object provides users with a way of grouping objects together and makes it easier to find these objects in the future. \n\nFor example, if a user is searching for an entitlement that grants a risky level of access to Active Directory, it's possible that the user may have to search through hundreds of entitlements to find the correct one. \nOnce the user finds that entitlement, the user can add a tag to the entitlement, \"AD_RISKY\" to make it easier to find the entitlement again.\nThe user can add the same tag to multiple objects the user wants to group together for an easy future search, and the user can also do so in bulk.\nWhen the user wants to find that tagged entitlement again, the user can search for \"tags:AD_RISKY\" to find all objects with that tag. \n\nWith the API, you can tag even more different object types than you can in Identity Security Cloud (access profiles, entitlements, identities, and roles). \nYou can use the API to tag all these objects:\n\n- Access profiles \n\n- Applications \n\n- Certification campaigns\n\n- Entitlements\n\n- Identities \n\n- Roles \n\n- SOD (separation of duties) policies\n\n- Sources \n\nYou can also use the API to directly find, create, and manage tagged objects without using search queries. \n\nThere are limits to tags: \n\n- You can have up to 500 different tags in your tenant.\n\n- You can apply up to 30 tags to one object. \n\n- You can have up to 10,000 tag associations, pairings of 1 tag to 1 object, in your tenant. \n\nBecause of these limits, it is recommended that you work with your governance experts and security teams to establish a list of tags that are most expressive of governance objects and access managed by Identity Security Cloud. \n\nThese are the types of information often expressed in tags: \n\n- Affected departments\n\n- Compliance and regulatory categories \n\n- Remediation urgency levels \n\n- Risk levels \n\nRefer to [Tagging Items in Search](https://documentation.sailpoint.com/saas/help/search/index.html?h=tags#tagging-items-in-search) for more information about tagging objects in Identity Security Cloud.\n"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Task Management"
    },
    {
      "name": "Tenant",
      "description": "API for reading tenant details."
    },
    {
      "name": "Transforms",
      "description": "The purpose of this API is to expose functionality for the manipulation of Transform objects.\nTransforms are a form of configurable objects which define an easy way to manipulate attribute data without having\nto write code. \n\nRefer to [Transforms](https://developer.sailpoint.com/docs/extensibility/transforms/) for more information about transforms.\n"
    },
    {
      "name": "Triggers",
      "description": "Event Triggers provide real-time updates to changes in Identity Security Cloud so you can take action as soon as an event occurs, rather than poll an API endpoint for updates. Identity Security Cloud provides a user interface within the admin console to create and manage trigger subscriptions.  These endpoints allow for programatically creating and managing trigger subscriptions.\n\nThere are two types of event triggers:\n  * `FIRE_AND_FORGET`: This trigger type will send a payload to each subscriber without needing a response.  Each trigger of this type has a limit of **50 subscriptions**.\n  * `REQUEST_RESPONSE`: This trigger type will send a payload to a subscriber and expect a response back.  Each trigger of this type may only have **one subscription**.\n\n## Available Event Triggers\nProduction ready event triggers that are available in all tenants.\n\n| Name | ID | Type | Trigger condition |\n|-|-|-|-|\n| [Access Request Dynamic Approval](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-dynamic-approval/) | idn:access-request-dynamic-approver | REQUEST_RESPONSE |After an access request is submitted. Expects the subscriber to respond with the ID of an identity or workgroup to add to the approval workflow. |\n| [Access Request Decision](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-decision/) | idn:access-request-post-approval | FIRE_AND_FORGET | After an access request is approved. |\n| [Access Request Submitted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-submitted/) | idn:access-request-pre-approval | REQUEST_RESPONSE | After an access request is submitted. Expects the subscriber to respond with an approval decision. |\n| [Account Aggregation Completed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/account-aggregation-completed/) | idn:account-aggregation-completed | FIRE_AND_FORGET | After an account aggregation completed, terminated, failed. |\n| Account Attributes Changed | idn:account-attributes-changed | FIRE_AND_FORGET | After an account aggregation, and one or more account attributes have changed. |\n| Account Correlated | idn:account-correlated | FIRE_AND_FORGET | After an account is added to an identity. |\n| Accounts Collected for Aggregation |  idn:aggregation-accounts-collected | FIRE_AND_FORGET | New, changed, and deleted accounts have been gathered during an aggregation and are being processed. |\n| Account Uncorrelated | idn:account-uncorrelated | FIRE_AND_FORGET | After an account is removed from an identity. |\n| Campaign Activated | idn:campaign-activated | FIRE_AND_FORGET | After a campaign is activated. |\n| Campaign Ended | idn:campaign-ended | FIRE_AND_FORGET | After a campaign ends. |\n| Campaign Generated | idn:campaign-generated | FIRE_AND_FORGET | After a campaign finishes generating. |\n| Certification Signed Off | idn:certification-signed-off | FIRE_AND_FORGET | After a certification is signed off by its reviewer. |\n| [Identity Attributes Changed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/account-aggregation-completed/) | idn:identity-attributes-changed | FIRE_AND_FORGET | After One or more identity attributes changed. |\n| [Identity Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/identity-created/) | idn:identity-created | FIRE_AND_FORGET | After an identity is created. |\n| [Provisioning Action Completed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/provisioning-completed/) |  idn:post-provisioning | FIRE_AND_FORGET | After a provisioning action completed on a source. |\n| [Scheduled Search](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/scheduled-search/) |  idn:saved-search-complete | FIRE_AND_FORGET | After a scheduled search completed. |\n| [Source Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-created/) | idn:source-created | FIRE_AND_FORGET | After a source is created. |\n| [Source Deleted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-deleted/) | idn:source-deleted | FIRE_AND_FORGET | After a source is deleted. |\n| [Source Updated](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-updated/) | idn:source-updated | FIRE_AND_FORGET | After configuration changes have been made to a source. |\n| [VA Cluster Status Change](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/va-cluster-status-change/) | idn:va-cluster-status-change | FIRE_AND_FORGET | After the status of a VA cluster has changed. |\n\n## Early Access Event Triggers\nTriggers that are in-development and not ready for production use.  Please contact support to enable these triggers in your tenant.\n\n| Name | ID | Type | Trigger condition |\n|-|-|-|-|\n| [Identity Deleted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/identity-deleted/) | idn:identity-deleted | FIRE_AND_FORGET | After an identity is deleted. |\n| [Source Account Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-created/) | idn:source-account-created | FIRE_AND_FORGET | After a source account is created. |\n| [Source Account Deleted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-deleted/) | idn:source-account-deleted | FIRE_AND_FORGET | After a source account is deleted. |\n| [Source Account Updated](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-updated/) | idn:source-account-updated | FIRE_AND_FORGET | After a source account is changed. |\n"
    },
    {
      "name": "UI Metadata",
      "description": "API for managing UI Metadata. Use this API to manage metadata about your User Interface.\nFor example you can set the iFrameWhitelist parameter to permit another domain to encapsulate IDN within an iframe or set the usernameEmptyText to change the placeholder text for Username on your tenant's login screen."
    },
    {
      "name": "Vendor Connector Mappings",
      "description": "Vendors use ISC connectors to connect their source data to ISC, but the data in their source and the data in ISC may be stored in different formats. \nConnector mappings allow vendors to match their data on both sides of the connection. \nThe vendors can then track and manage access across their sources from ISC. \nThis API allows you to create and manage these vendor connector mappings.\n"
    },
    {
      "name": "Work Items",
      "description": "Use this API to implement work item functionality.\nWith this functionality in place, users can manage their work items (tasks).\n\nWork items refer to the tasks users see in Identity Security Cloud's Task Manager.\nThey can see the pending work items they need to complete, as well as the work items they have already completed.\nTask Manager lists the work items along with the involved sources, identities, accounts, and the timestamp when the work item was created.\nFor example, a user may see a pending 'Create an Account' work item for the identity Fred.Astaire in GitHub for Fred's GitHub account, fred-astaire-sp.\nOnce the user completes the work item, the work item will be listed with his or her other completed work items.\n\nTo complete work items, users can use their dashboards and select the 'My Tasks' widget.\nThe widget will list any work items they need to complete, and they can select the work item from the list to review its details.\nWhen they complete the work item, they can select 'Mark Complete' to add it to their list of completed work items.\n\nRefer to [Task Manager](https://documentation.sailpoint.com/saas/user-help/task_manager.html) for more information about work items, including the different types of work items users may need to complete.\n"
    },
    {
      "name": "Work Reassignment",
      "description": "Use this API to implement work reassignment functionality.\n\nWork Reassignment allows access request reviews, certifications, and manual provisioning tasks assigned to a user to be reassigned to a different user. This is primarily used for:\n\n- Temporarily redirecting work for users who are out of office, such as on vacation or sick leave\n- Permanently redirecting work for users who should not be assigned these tasks at all, such as senior executives or service identities\n\nUsers can define reassignments for themselves, managers can add them for their team members, and administrators can configure them on any user’s behalf. Work assigned during the specified reassignment timeframes will be automatically reassigned to the designated user as it is created.\n\nRefer to [Work Reassignment](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html) for more information about this topic.\n"
    },
    {
      "name": "Workflows",
      "description": "Workflows allow administrators to create custom automation scripts directly within Identity Security Cloud.  These automation scripts respond to [event triggers](https://developer.sailpoint.com/docs/extensibility/event-triggers/#how-to-get-started-with-event-triggers) and perform a series of actions to perform tasks that are either too cumbersome or not available in the Identity Security Cloud UI.  Workflows can be configured via a graphical user interface within Identity Security Cloud, or by creating and uploading a JSON formatted script to the Workflow service.  The Workflows API collection provides the necessary functionality to create, manage, and test your workflows via REST.\n"
    }
  ],
  "paths": {
    "/access-model-metadata/attributes": {
      "get": {
        "summary": "List access model metadata attributes",
        "description": "Get a list of Access Model Metadata Attributes",
        "tags": [
          "Access Model Metadata"
        ],
        "operationId": "listAccessModelMetadataAttribute",
        "security": [
          {
            "userAuth": [
              "idn:access-model-metadata:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "name eq \"Privacy\"",
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**key**: *eq*\n\n**name**: *eq*\n\n**type**: *eq*\n\n**status**: *eq*\n\n**objectTypes**: *eq*\n\n**Supported composite operators**: *and*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, key**",
            "example": "name,-key",
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-model-metadata/attributes/{key}": {
      "get": {
        "summary": "Get access model metadata attribute",
        "description": "Get single Access Model Metadata Attribute",
        "tags": [
          "Access Model Metadata"
        ],
        "operationId": "getAccessModelMetadataAttribute",
        "security": [
          {
            "userAuth": [
              "idn:access-model-metadata:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute.",
            "example": "iscPrivacy",
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttribute"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-model-metadata/attributes/{key}/values": {
      "get": {
        "summary": "List access model metadata values",
        "description": "Get a list of Access Model Metadata Attribute Values",
        "tags": [
          "Access Model Metadata"
        ],
        "operationId": "listAccessModelMetadataAttributeValue",
        "security": [
          {
            "userAuth": [
              "idn:access-model-metadata:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute.",
            "example": "iscPrivacy",
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttribute"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValueDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-model-metadata/attributes/{key}/values/{value}": {
      "get": {
        "summary": "Get access model metadata value",
        "description": "Get single Access Model Metadata Attribute Value",
        "tags": [
          "Access Model Metadata"
        ],
        "operationId": "getAccessModelMetadataAttributeValue",
        "security": [
          {
            "userAuth": [
              "idn:access-model-metadata:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute.",
            "example": "iscPrivacy",
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttribute"
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute value.",
            "example": "public",
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttributeValue"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeValueDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-profiles": {
      "get": {
        "operationId": "listAccessProfiles",
        "tags": [
          "Access Profiles"
        ],
        "summary": "List access profiles",
        "description": "Get a list of access profiles.\n>**Note:** When you filter for access profiles that have the '+' symbol in their names, the response is blank. ",
        "parameters": [
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "description": "Filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID or the special value **me**, which is shorthand for the calling identity's ID.\n\nIf you specify an identity that isn't a subadmin, the API returns a 400 Bad Request error.",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**created**: *gt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**requestable**: *eq*\n\n**source.id**: *eq, in*\n\nFiltering is not supported for access profiles and entitlements that have the '+' symbol in their names. ",
            "example": "name eq \"SailPoint Support\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filters access profiles to only those assigned to the segment(s) with the specified IDs.\nIf segmentation is currently unavailable, specifying this parameter results in an error.",
            "example": "0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Indicates whether the response list should contain unsegmented access profiles. If `for-segment-ids` is absent or empty, specifying *include-unsegmented* as `false` results in an error.",
            "example": false,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of access profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessProfile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:read"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      },
      "post": {
        "operationId": "createAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Create access profile",
        "description": "Create an access profile.\nA user with `ROLE_SUBADMIN` or `SOURCE_SUBADMIN` authority must be associated with the access profile's source.\nThe maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles. However, any new access profiles as well as any updates to existing descriptions are limited to 2000 characters.\n>**Note:** To use this endpoint, you need all the listed scopes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessProfile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Access profile created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:manage",
              "idn:entitlement:read",
              "idn:identity:read",
              "idn:sources:read"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:manage",
              "idn:entitlement:read",
              "idn:identity:read",
              "idn:sources:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/access-profiles/{id}": {
      "get": {
        "operationId": "getAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Get an access profile",
        "description": "This API returns an Access Profile by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Access Profile",
            "example": "2c9180837ca6693d017ca8d097500149",
            "x-sailpoint-resource-operation-id": "listAccessProfiles"
          }
        ],
        "responses": {
          "200": {
            "description": "An AccessProfile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:read",
              "idn:access-profile:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:read",
              "idn:access-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      },
      "patch": {
        "operationId": "patchAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Patch a specified access profile",
        "description": "This API updates an existing Access Profile. The following fields are patchable:\n**name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria**\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer.\n>  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.\n\n> You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile's source.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Access Profile to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            },
            "x-sailpoint-resource-operation-id": "listAccessProfiles"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "Add Entitlements": {
                  "description": "Add one or more entitlements to the end of the list",
                  "value": [
                    {
                      "op": "add",
                      "path": "/entitlements",
                      "value": [
                        {
                          "id": "2c9180857725c14301772a93bb77242d",
                          "type": "ENTITLEMENT",
                          "name": "AD User Group"
                        }
                      ]
                    }
                  ]
                },
                "Insert Entitlement": {
                  "description": "Add an entitlement at the beginning of the entitlement list",
                  "value": [
                    {
                      "op": "add",
                      "path": "/entitlements/0",
                      "value": {
                        "id": "2c9180857725c14301772a93bb77242d",
                        "type": "ENTITLEMENT",
                        "name": "AD User Group"
                      }
                    }
                  ]
                },
                "Replace Entitlements": {
                  "description": "Replace all entitlements with a new list of entitlements",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/entitlements",
                      "value": [
                        {
                          "id": "2c9180857725c14301772a93bb77242d",
                          "type": "ENTITLEMENT",
                          "name": "AD User Group"
                        }
                      ]
                    }
                  ]
                },
                "Remove Entitlement": {
                  "description": "Remove the first entitlement in the list",
                  "value": [
                    {
                      "op": "remove",
                      "path": "/entitlements/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Access Profile as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:manage"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteAccessProfile",
        "tags": [
          "Access Profiles"
        ],
        "summary": "Delete the specified access profile",
        "description": "This API deletes an existing Access Profile.\n\nThe Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.\n\nA token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Access Profile to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            },
            "x-sailpoint-resource-operation-id": "listAccessProfiles"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Returned when an access profile cannot be deleted as it's being used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "examples": {
                  "400.2.1.0 Object in use by another": {
                    "description": "Returned when an access profile cannot be deleted as it's being used",
                    "value": {
                      "detailCode": "400.2.1.0 Object in use by another",
                      "trackingId": "c9c1033c55b84ebc9e93e926dcf8b8b3",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The \"testAccessProfile\" access profile can't be deleted because it's in use."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:manage"
            ]
          }
        ]
      }
    },
    "/access-profiles/bulk-delete": {
      "post": {
        "operationId": "deleteAccessProfilesInBulk",
        "summary": "Delete access profile(s)",
        "tags": [
          "Access Profiles"
        ],
        "description": "This endpoint initiates a bulk deletion of one or more access profiles.\nWhen the request is successful, the endpoint returns the bulk delete's task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result's status and information. \nThis endpoint can only bulk delete up to a limit of 50 access profiles per request. \nBy default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessProfileBulkDeleteRequest"
              },
              "example": {
                "bestEffortOnly": true,
                "accessProfileIds": [
                  "2c91808876438bb2017668b91919ecca",
                  "2c91808876438ba801766e129f151816"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned only if **bestEffortOnly** is **false**, and one or more Access Profiles are in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfileBulkDeleteResponse"
                },
                "example": {
                  "pending": [],
                  "inUse": [
                    {
                      "accessProfileId": "2c91808876438ba801766e129f151816",
                      "usages": [
                        {
                          "type": "Role",
                          "id": "2c9180887643764201766e9f6e121518"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Returned if at least one deletion will be performed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfileBulkDeleteResponse"
                },
                "example": {
                  "taskId": "2c91808a7813090a01781412a1119a20",
                  "pending": [
                    "2c91808a7813090a017813fe1919ecca"
                  ],
                  "inUse": [
                    {
                      "accessProfileId": "2c91808876438ba801766e129f151816",
                      "usages": [
                        {
                          "type": "Role",
                          "id": "2c9180887643764201766e9f6e121518"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/access-profiles/bulk-update-requestable": {
      "post": {
        "operationId": "updateAccessProfilesInBulk",
        "summary": "Update access profile(s) requestable field.",
        "tags": [
          "Access Profiles"
        ],
        "description": "This API initiates a bulk update of field requestable for one or more Access Profiles.\n\n>  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**\n    list of the response.Requestable field of these Access Profiles marked as **true** or **false**.\n\n>  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated.\nA SOURCE_SUBADMIN user may only use this API to update Access Profiles which are associated with Sources they are able to administer.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessProfileBulkUpdateRequest"
              },
              "example": [
                {
                  "id": "464ae7bf-791e-49fd-b746-06a2e4a89635",
                  "requestable": false
                }
              ]
            }
          }
        },
        "responses": {
          "207": {
            "description": "List of updated and not updated Access Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProfileBulkUpdateResponse"
                },
                "example": [
                  {
                    "id": "464ae7bf-791e-49fd-b746-06a2e4a89635",
                    "status": "201",
                    "requestable": false,
                    "description": "Access Profile updated successfully."
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "412": {
            "$ref": "#/components/responses/412"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/access-profiles/{id}/entitlements": {
      "get": {
        "operationId": "getAccessProfileEntitlements",
        "tags": [
          "Access Profiles"
        ],
        "summary": "List access profile's entitlements",
        "description": "Use this API to get a list of an access profile's entitlements. \nA user with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the access profile containing the entitlements.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            },
            "x-sailpoint-resource-operation-id": "listAccessProfiles"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**attribute**: *eq, sw*\n\n**value**: *eq, sw*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**source.id**: *eq, in*\n\nFiltering is not supported for access profiles and entitlements that have the '+' symbol in their names.  ",
            "example": "attribute eq \"memberOf\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, attribute, value, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:access-profile:read",
              "idn:access-profile:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:access-profile:read",
              "idn:access-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/access-requests": {
      "post": {
        "operationId": "createAccessRequest",
        "security": [
          {
            "userAuth": [
              "idn:access-request:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "USER"
        ],
        "summary": "Submit access request",
        "tags": [
          "Access Requests"
        ],
        "description": "Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.\n\n:::info\nThe ability to request access using this API is constrained by the Access Request Segments defined in the API token’s user context.\n:::\n\nAccess requests are processed asynchronously by ISC. A successful response from this endpoint means that the request\nhas been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn't return an error\nif you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.\n\nIt's best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can\nbe accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also\nuse the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting\nan access request to ensure that you aren't requesting access that is already granted. If you use this API to request access that an identity already has, \nwithout changing the account details or end date information from the existing assignment, \nthe API will cancel the request as a duplicate.\n\nThere are two types of access request:\n\n__GRANT_ACCESS__\n* Can be requested for multiple identities in a single request.\n* Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.  \n* Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others.\n* Roles, access profiles and entitlements can be requested.\n* You can specify a `removeDate` to set or alter a sunset date-time on an assignment. The removeDate must be a future date-time, in the UTC timezone. Additionally, if the user already has the access assigned with a sunset date, you can also submit a request without a `removeDate` to request removal of the sunset date and time.\n* If a `removeDate` is specified, then the requested role, access profile, or entitlement will be removed on that date and time.\n* Now supports an alternate field 'requestedForWithRequestedItems' for users to specify account selections while requesting items where they have more than one account on the source.\n\n:::caution\n\nIf any entitlements are being requested, then the maximum number of entitlements that can be requested is 25, and the maximum number of identities that can be requested for is 10. If you exceed these limits, the request will fail with a 400 error. If you are not requesting any entitlements, then there are no limits.\n\n:::\n\n__REVOKE_ACCESS__\n* Can only be requested for a single identity at a time.\n* You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning. \n* Does not support self request. Only manager can request to revoke access for their directly managed employees.\n* If a `removeDate` is specified, then the requested role, access profile, or entitlement will be removed on that date and time.\n* Roles, access profiles, and entitlements can be requested for revocation.\n* Revoke requests for entitlements are limited to 1 entitlement per access request currently.\n* You can specify a `removeDate` to add or alter a sunset date and time on an assignment. The `removeDate` must be a future date-time, in the UTC timezone. If the user already has the access assigned with a sunset date and time, the removeDate must be a date-time earlier than the existing sunset date and time. \n* Allows a manager to request to revoke access for direct employees. A user with ORG_ADMIN authority can also request to revoke access from anyone.\n* Now supports REVOKE_ACCESS requests for identities with multiple accounts on a single source, with the help of 'assignmentId' and 'nativeIdentity' fields. These fields should be used within the 'requestedItems' section for the revoke requests. \n* Usage of 'requestedForWithRequestedItems' field is not supported for revoke requests.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Access Request Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-requests/cancel": {
      "post": {
        "operationId": "cancelAccessRequest",
        "security": [
          {
            "userAuth": [
              "idn:access-request:cancel"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "Access Requests"
        ],
        "summary": "Cancel access request",
        "description": "This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step.\nIn addition to users with ORG_ADMIN, any user who originally submitted the access request may cancel it.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelAccessRequest"
              },
              "example": {
                "accountActivityId": "2c91808568c529c60168cca6f90c1313",
                "comment": "I requested this role by mistake."
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-requests/close": {
      "post": {
        "operationId": "closeAccessRequest",
        "tags": [
          "Access Requests"
        ],
        "summary": "Close access request",
        "security": [
          {
            "userAuth": [
              "sp:scopes:all"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request's lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/).\n\nTo find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select 'Tracking Number', and use the 'Download' button to export a CSV containing the tracking numbers.\n\nTo find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).\n\nInput the IDs from either source.\n\nTo track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.\n\nThis API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseAccessRequest"
              },
              "example": {
                "accessRequestIds": [
                  "2c90ad2a70ace7d50170acf22ca90010"
                ],
                "executionStatus": "Terminated",
                "completionStatus": "Failure",
                "message": "The IdentityNow Administrator manually closed this request."
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-config": {
      "get": {
        "operationId": "getAccessRequestConfig",
        "security": [
          {
            "userAuth": [
              "idn:access-request-config:read"
            ]
          }
        ],
        "summary": "Get access request configuration",
        "tags": [
          "Access Requests"
        ],
        "description": "This endpoint returns the current access-request configuration.",
        "responses": {
          "200": {
            "description": "Access Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setAccessRequestConfig",
        "security": [
          {
            "userAuth": [
              "idn:access-request-config:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "summary": "Update access request configuration",
        "tags": [
          "Access Requests"
        ],
        "description": "This endpoint replaces the current access-request configuration.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-status": {
      "get": {
        "operationId": "listAccessRequestStatus",
        "security": [
          {
            "userAuth": [
              "idn:access-request-status:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "Access Requests"
        ],
        "summary": "Access request status",
        "description": "Use this API to return a list of access request statuses based on the specified query parameters.\nIf an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses.\nAny user with any user level can get the status of their own access requests. A user with ORG_ADMIN is required to call this API to get a list of statuses for other users.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "example": "2c9180877b2b6ea4017b2c545f971429",
            "description": "Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "requested-by",
            "schema": {
              "type": "string"
            },
            "example": "2c9180877b2b6ea4017b2c545f971429",
            "description": "Filter the results by the identity who made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "regarding-identity",
            "schema": {
              "type": "string"
            },
            "example": "2c9180877b2b6ea4017b2c545f971429",
            "description": "Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.",
            "required": false
          },
          {
            "in": "query",
            "name": "assigned-to",
            "schema": {
              "type": "string"
            },
            "example": "2c9180877b2b6ea4017b2c545f971429",
            "description": "Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.",
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": "If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 250,
              "default": 250
            },
            "example": 100
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "accountActivityItemId eq \"2c918086771c86df0177401efcdf54c0\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**accessRequestId**: *eq, in, ge, gt, le, lt, ne, sw*\n\n**accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**created**: *eq, in, ge, gt, le, lt, ne, isnull, sw*",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created, modified, accountActivityItemId, name**",
            "example": "created",
            "required": false
          },
          {
            "in": "query",
            "name": "request-state",
            "schema": {
              "type": "string"
            },
            "example": "request-state=EXECUTING",
            "description": "Filter the results by the state of the request. The only valid value is *EXECUTING*.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of requested item statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestedItemStatus"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/pending": {
      "get": {
        "operationId": "listPendingApprovals",
        "summary": "Pending access request approvals list",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "If present, the value returns only pending approvals for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.\n   * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**requestedFor.id**: *eq, in*\n\n**modified**: *gt, lt, ge, le, eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Pending Approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingApproval"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/completed": {
      "get": {
        "operationId": "listCompletedApprovals",
        "summary": "Completed access request approvals list",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "If present, the value returns only completed approvals for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.\n   * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value."
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**modified**: *gt, lt, ge, le, eq, in, ne, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Completed Approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompletedApproval"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/approve": {
      "post": {
        "operationId": "approveAccessRequest",
        "summary": "Approve access request approval",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Approval ID.",
            "example": "2c91808b7294bea301729568c68c002e",
            "x-sailpoint-resource-operation-id": "getApprovals"
          }
        ],
        "requestBody": {
          "description": "Reviewer's comment.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentDto-2"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/reject": {
      "post": {
        "operationId": "rejectAccessRequest",
        "summary": "Reject access request approval",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPendingApprovals",
            "description": "Approval ID.",
            "example": "2c91808b7294bea301729568c68c002e"
          }
        ],
        "requestBody": {
          "description": "Reviewer's comment.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentDto-2"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/{approvalId}/forward": {
      "post": {
        "operationId": "forwardAccessRequest",
        "summary": "Forward access request approval",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.",
        "parameters": [
          {
            "in": "path",
            "name": "approvalId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPendingApprovals",
            "description": "Approval ID.",
            "example": "2c91808b7294bea301729568c68c002e"
          }
        ],
        "requestBody": {
          "description": "Information about the forwarded approval.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardApprovalDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-approvals/approval-summary": {
      "get": {
        "operationId": "getAccessRequestApprovalSummary",
        "security": [
          {
            "userAuth": [
              "idn:access-request-approvals-summary:read"
            ]
          }
        ],
        "summary": "Get access requests approvals number",
        "tags": [
          "Access Request Approvals"
        ],
        "description": "Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.\n   * ORG_ADMIN users can call this with any identity ID value.\n   * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.\n   * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.",
            "example": "2c91808568c529c60168cca6f90c1313",
            "required": false
          },
          {
            "in": "query",
            "name": "from-date",
            "schema": {
              "type": "string"
            },
            "description": "This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.",
            "example": "from-date=2020-03-19T19:59:11Z",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Number of pending, approved, rejected access request approvals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSummary"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the query parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations": {
      "get": {
        "operationId": "getAccessRequestRecommendations",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "Identity access request recommendations",
        "description": "This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.",
        "parameters": [
          {
            "in": "query",
            "name": "identity-id",
            "description": "Get access request recommendations for an identityId. *me* indicates the current user.",
            "schema": {
              "type": "string",
              "default": "me"
            },
            "required": false,
            "example": "2c91808570313110017040b06f344ec9"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 15,
              "default": 15
            },
            "example": 15
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "include-translation-messages",
            "description": "If *true* it will populate a list of translation messages in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "example": false
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**access.name**: *co*\n\n**access.type**: *eq, in*\n\n**access.description**: *co, eq, in*",
            "required": false,
            "example": "access.name co \"admin\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **access.name, access.type**\n\nBy default the recommendations are sorted by highest confidence first.",
            "required": false,
            "example": "access.name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of access request recommendations for the identityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestRecommendationItemDetail"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/ignored-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsIgnoredItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "Ignore access request recommendation",
        "description": "This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.",
        "requestBody": {
          "description": "The recommended access item to ignore for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestRecommendationActionItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendation successfully stored as ignored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsIgnoredItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "List ignored access request recommendations",
        "description": "This API returns the list of ignored access request recommendations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*",
            "required": false,
            "example": "identityId eq \"2c9180846b0a0583016b299f210c1314\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**",
            "required": false,
            "example": "access.id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of ignored access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/requested-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsRequestedItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "Accept access request recommendation",
        "description": "This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.",
        "requestBody": {
          "description": "The recommended access item that was requested for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestRecommendationActionItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notification successfully acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsRequestedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "List accepted access request recommendations",
        "description": "This API returns a list of requested access request recommendations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*",
            "required": false,
            "example": "access.id eq \"2c9180846b0a0583016b299f210c1314\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**",
            "required": false,
            "example": "access.id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of requested access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/viewed-items": {
      "post": {
        "operationId": "addAccessRequestRecommendationsViewedItem",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "Mark viewed access request recommendations",
        "description": "This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.",
        "requestBody": {
          "description": "The recommended access that was viewed for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestRecommendationActionItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendation successfully stored as viewed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getAccessRequestRecommendationsViewedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "List viewed access request recommendations",
        "description": "This API returns the list of viewed access request recommendations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**access.id**: *eq, in*\n\n**access.type**: *eq, in*\n\n**identityId**: *eq, in*",
            "required": false,
            "example": "access.id eq \"2c9180846b0a0583016b299f210c1314\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **access.id, access.type, identityId, timestamp**",
            "required": false,
            "example": "access.id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of viewed access request recommendations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ai-access-request-recommendations/viewed-items/bulk-create": {
      "post": {
        "operationId": "addAccessRequestRecommendationsViewedItems",
        "tags": [
          "IAI Access Request Recommendations"
        ],
        "security": [
          {
            "userAuth": [
              "iai:access-request-recommender:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "summary": "Bulk mark viewed access request recommendations",
        "description": "This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.",
        "requestBody": {
          "description": "The recommended access items that were viewed for an identity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessRequestRecommendationActionItemDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recommendations successfully stored as viewed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestRecommendationActionItemResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "operationId": "listAccounts",
        "tags": [
          "Accounts"
        ],
        "summary": "Accounts list",
        "description": "List accounts.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Accounts List](https://developer.sailpoint.com/docs/api/v2025/list-accounts/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:read",
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "detailLevel",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "SLIM",
                "FULL"
              ]
            },
            "description": "This value determines whether the API provides `SLIM` or increased level of detail (`FULL`) for each account in the returned list. `FULL` is the default behavior.",
            "example": "FULL"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "identityId eq \"2c9180858082150f0180893dbaf44201\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in, sw*\n\n**identityId**: *eq, in, sw*\n\n**name**: *eq, in, sw*\n\n**nativeIdentity**: *eq, in, sw*\n\n**sourceId**: *eq, in, sw*\n\n**uncorrelated**: *eq*\n\n**entitlements**: *eq*\n\n**origin**: *eq, in*\n\n**manuallyCorrelated**: *eq*\n\n**hasEntitlements**: *eq*\n\n**identity.name**: *eq, in, sw*\n\n**identity.correlated**: *eq*\n\n**identity.identityState**: *eq, in*\n\n**source.displayableName**: *eq, in*\n\n**source.authoritative**: *eq*\n\n**source.connectionType**: *eq, in*\n\n**recommendation.method**: *eq, in, isnull*\n\n**created**: *eq, ge, gt, le*\n\n**modified**: *eq, ge, gt, le, lt*"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "id,name",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, nativeIdentity, uuid, manuallyCorrelated, hasEntitlements, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType, sourceOwner.name**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                },
                "examples": {
                  "SlimAccounts": {
                    "description": "List of slim accounts that would result with *detailLevel = SLIM*",
                    "value": [
                      {
                        "attributes": null,
                        "created": "2021-09-28T02:15:44.644Z",
                        "description": null,
                        "disabled": false,
                        "features": "PROVISIONING, GROUP_PROVISIONING, SYNC_PROVISIONING, AUTHENTICATE",
                        "hasEntitlements": true,
                        "id": "2c9180867c184ff6017c2a2fbf031667",
                        "identityId": "2c9180867c184ff6017c2a2fbf031666",
                        "locked": false,
                        "manuallyCorrelated": false,
                        "modified": "2021-09-28T02:16:12.207Z",
                        "name": "Geovanni.0a7cad6df",
                        "nativeIdentity": "CN=Geovanni 0a7cad6df,OU=hpun,OU=org-data-service,DC=TestAutomationAD,DC=local",
                        "sourceId": "2c91808b7c28b350017c2a2ec5790aa1",
                        "uuid": "{e4218fa4-da52-4bb0-aa41-d2dcc08a7ad8}"
                      }
                    ]
                  },
                  "FullAccounts": {
                    "description": "List of slim accounts that would result with *detailLevel = FULL*  or not specifying it",
                    "value": [
                      {
                        "attributes": null,
                        "authoritative": true,
                        "created": "2021-09-28T02:15:44.644Z",
                        "description": null,
                        "disabled": false,
                        "features": "PROVISIONING, GROUP_PROVISIONING, SYNC_PROVISIONING, AUTHENTICATE",
                        "hasEntitlements": true,
                        "id": "2c9180867c184ff6017c2a2fbf031667",
                        "identityId": "2c9180867c184ff6017c2a2fbf031666",
                        "locked": false,
                        "manuallyCorrelated": false,
                        "modified": "2021-09-28T02:16:12.207Z",
                        "name": "Geovanni.0a7cad6df",
                        "nativeIdentity": "CN=Geovanni 0a7cad6df,OU=hpun,OU=org-data-service,DC=TestAutomationAD,DC=local",
                        "sourceId": "2c91808b7c28b350017c2a2ec5790aa1",
                        "systemAccount": false,
                        "uncorrelated": false,
                        "uuid": "{e4218fa4-da52-4bb0-aa41-d2dcc08a7ad8}"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Create account",
        "description": "Submits an account creation task - the API then returns the task ID.  \n\nThe `sourceId` where this account will be created must be included in the `attributes` object.\n\nThis endpoint creates an account on the source record in your ISC tenant.\nThis is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time. \n\nHowever, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source. \nThe endpoint doesn't actually provision the account on the target source, which means that if the account doesn't also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant. \n\nBy providing the account ID of an existing account in the request body, this API will function as a PATCH operation and update the account.\n",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Create Account](https://developer.sailpoint.com/docs/api/v2025/create-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAttributesCreate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "getAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Account details",
        "description": "Use this API to return the details for a single account by its ID.  \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Account Details](https://developer.sailpoint.com/docs/api/v2025/get-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:read",
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "responses": {
          "200": {
            "description": "Account object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update account",
        "description": "Use this API to update account details. \nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\n\nThis API supports updating an account's correlation by modifying the `identityId` and `manuallyCorrelated` fields. \nTo reassign an account from one identity to another, replace the current `identityId` with a new value. \nIf the account you're assigning was provisioned by Identity Security Cloud (ISC), it's possible for ISC to create a new account \nfor the previous identity as soon as the account is moved. If the account you're assigning is authoritative, \nthis causes the previous identity to become uncorrelated and can even result in its deletion.\nAll accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.\n\n>**Note:** The `attributes` field can only be modified for flat file accounts. \n",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Update Account](https://developer.sailpoint.com/docs/api/v2025/update-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": {
                "Uncorrelate account": {
                  "description": "Remove account from Identity",
                  "value": [
                    {
                      "op": "remove",
                      "path": "/identityId"
                    }
                  ]
                },
                "Reassign account": {
                  "description": "Move account from one Identity to another Identity",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/identityId",
                      "value": "2c9180857725c14301772a93bb77242d"
                    }
                  ]
                },
                "Add account attribute": {
                  "description": "Add flat file account's attribute",
                  "value": [
                    {
                      "op": "add",
                      "path": "/attributes/familyName",
                      "value": "Smith"
                    }
                  ]
                },
                "Replace account attribute": {
                  "description": "Replace flat file account's attribute",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/attributes/familyName",
                      "value": "Smith"
                    }
                  ]
                },
                "Remove account attribute": {
                  "description": "Remove flat file account's attribute",
                  "value": [
                    {
                      "op": "remove",
                      "path": "/attributes/familyName"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Update request accepted and is in progress.",
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Update account",
        "description": "Use this API to update an account with a PUT request. \n\nThis endpoint submits an account update task and returns the task ID.  \n\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\n\n>**Note: You can only use this PUT endpoint to update accounts from flat file sources.**\n",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Update Account](https://developer.sailpoint.com/docs/api/v2025/put-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAttributes"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Delete account",
        "description": "Use this API to delete an account. \nThis endpoint submits an account delete task and returns the task ID. \nThis endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account's returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future. \nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\n>**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Delete Account](https://developer.sailpoint.com/docs/api/v2025/delete-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/entitlements": {
      "get": {
        "operationId": "getAccountEntitlements",
        "tags": [
          "Accounts"
        ],
        "summary": "Account entitlements",
        "description": "This API returns entitlements of the account.  \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Account Entitlements](https://developer.sailpoint.com/docs/api/v2025/get-account-entitlements) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of account entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/reload": {
      "post": {
        "operationId": "submitReloadAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Reload account",
        "description": "This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.  \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Reload Account](https://developer.sailpoint.com/docs/api/v2025/submit-reload-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/enable": {
      "post": {
        "operationId": "enableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Enable account",
        "description": "This API submits a task to enable account and returns the task ID.  \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Enable Account](https://developer.sailpoint.com/docs/api/v2025/enable-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountToggleRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/disable": {
      "post": {
        "operationId": "disableAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Disable account",
        "description": "This API submits a task to disable the account and returns the task ID.  \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Disable Account](https://developer.sailpoint.com/docs/api/v2025/disable-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account id",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountToggleRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/unlock": {
      "post": {
        "operationId": "unlockAccount",
        "tags": [
          "Accounts"
        ],
        "summary": "Unlock account",
        "description": "This API submits a task to unlock an account and returns the task ID.  \nTo use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required. \nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Unlock Account](https://developer.sailpoint.com/docs/api/v2025/unlock-account) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage",
              "idn:accounts-provisioning:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "HELPDESK"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUnlockRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Async task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsAsyncResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{id}/remove": {
      "post": {
        "operationId": "deleteAccountAsync",
        "summary": "Remove account",
        "tags": [
          "Accounts"
        ],
        "description": "Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.\n\nThis endpoint is good for:\n* Removing accounts that no longer exist on the source.\n* Removing accounts that won't be aggregated following updates to the source configuration.\n* Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listAccounts",
            "description": "The account id",
            "example": "c350d6aa4f104c61b062cb632421ad10"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. Returns task result details of removal request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultDto"
                },
                "example": {
                  "type": "TASK_RESULT",
                  "id": "464ae7bf791e49fdb74606a2e4a89635",
                  "name": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ]
      }
    },
    "/identities-accounts/{id}/enable": {
      "post": {
        "operationId": "enableAccountForIdentity",
        "tags": [
          "Accounts"
        ],
        "summary": "Enable idn account for identity",
        "description": "This API submits a task to enable IDN account for a single identity.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Enable IDN Account for Identity](https://developer.sailpoint.com/docs/api/v2025/enable-account-for-identity) for latest API.\n",
        "externalDocs": {
          "description": "Learn more about enabling identities here",
          "url": "https://documentation.sailpoint.com/saas/help/common/users/user_access.html#enabling-user-identities"
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "The identity id.",
            "example": "2c91808384203c2d018437e631158309"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities-accounts/{id}/disable": {
      "post": {
        "operationId": "disableAccountForIdentity",
        "tags": [
          "Accounts"
        ],
        "summary": "Disable idn account for identity",
        "description": "This API submits a task to disable IDN account for a single identity.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Disable IDN Account for Identity](https://developer.sailpoint.com/docs/api/v2025/disable-account-for-identity) for latest API.\n",
        "externalDocs": {
          "description": "Learn more about disabling identities here",
          "url": "https://documentation.sailpoint.com/saas/help/common/users/user_access.html#disabling-user-identities"
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "The identity id.",
            "example": "2c91808384203c2d018437e631158309"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities-accounts/enable": {
      "post": {
        "operationId": "enableAccountsForIdentities",
        "tags": [
          "Accounts"
        ],
        "summary": "Enable idn accounts for identities",
        "description": "This API submits tasks to enable IDN account for each identity provided in the request body.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Enable IDN Accounts for Identities](https://developer.sailpoint.com/docs/api/v2025/enable-accounts-for-identities) for latest API.\n",
        "externalDocs": {
          "description": "Learn more about enabling identities here",
          "url": "https://documentation.sailpoint.com/saas/help/common/users/user_access.html#enabling-user-identities"
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentitiesAccountsBulkRequest"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Bulk response details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkIdentitiesAccountsResponse"
                  },
                  "example": [
                    {
                      "id": "2c9180858082150f0180893dbaf553fe",
                      "statusCode": 404,
                      "message": "Referenced identity \"2c9180858082150f0180893dbaf553fe\" was not found."
                    },
                    {
                      "id": "2c91808384203c2d018437e631158308",
                      "statusCode": 202,
                      "message": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities-accounts/disable": {
      "post": {
        "operationId": "disableAccountsForIdentities",
        "tags": [
          "Accounts"
        ],
        "summary": "Disable idn accounts for identities",
        "description": "This API submits tasks to disable IDN account for each identity provided in the request body.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Disable IDN Accounts for Identities](https://developer.sailpoint.com/docs/api/v2025/disable-accounts-for-identities) for latest API.\n",
        "externalDocs": {
          "description": "Learn more about disabling identities here",
          "url": "https://documentation.sailpoint.com/saas/help/common/users/user_access.html#disabling-user-identities"
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts-state:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentitiesAccountsBulkRequest"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Bulk response details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkIdentitiesAccountsResponse"
                  },
                  "example": [
                    {
                      "id": "2c9180858082150f0180893dbaf553fe",
                      "statusCode": 404,
                      "message": "Referenced identity \"2c9180858082150f0180893dbaf553fe\" was not found."
                    },
                    {
                      "id": "2c91808384203c2d018437e631158308",
                      "statusCode": 202,
                      "message": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/search-attribute-config": {
      "post": {
        "operationId": "createSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Create extended search attributes",
        "security": [
          {
            "userAuth": [
              "idn:account-config:create"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "Create and configure extended search attributes.  This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create the attribute promotion configuration in the Link ObjectConfig.\n>**Note: Give searchable attributes unique names.  Do not give them the same names used for account attributes or source attributes.  Also, do not give them the same names present in account schema for a current or future source, regardless of whether that source is included in the searchable attributes' `applicationAttributes`.**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAttributeConfig"
              },
              "example": {
                "name": "newMailAttribute",
                "displayName": "New Mail Attribute",
                "applicationAttributes": {
                  "2c9180866166b5b0016167c32ef31a66": "mail",
                  "2c9180866166b5b0016167c32ef31a67": "mail"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getSearchAttributeConfig",
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "List extended search attributes",
        "security": [
          {
            "userAuth": [
              "idn:account-config:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "Get a list of attribute/application attributes currently configured in Identity Security Cloud (ISC).\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of attribute configurations in ISC.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchAttributeConfig"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/search-attribute-config/{name}": {
      "get": {
        "operationId": "getSingleSearchAttributeConfig",
        "security": [
          {
            "userAuth": [
              "idn:account-config:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Get extended search attribute",
        "description": "Get an extended attribute configuration by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the extended search attribute configuration to get.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getSearchAttributeConfig",
            "schema": {
              "type": "string",
              "example": "newMailAttribute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specific attribute configuration in IdentityNow.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchAttributeConfig"
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSearchAttributeConfig",
        "security": [
          {
            "userAuth": [
              "idn:account-config:delete"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Delete extended search attribute",
        "description": "Delete an extended attribute configuration by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the extended search attribute configuration to delete.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getSearchAttributeConfig",
            "schema": {
              "type": "string",
              "example": "newMailAttribute"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSearchAttributeConfig",
        "security": [
          {
            "userAuth": [
              "idn:account-config:create"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "Search Attribute Configuration"
        ],
        "summary": "Update extended search attribute",
        "description": "Update an existing search attribute configuration. \nYou can patch these fields:\n* name  * displayName * applicationAttributes",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the extended search attribute configuration to patch.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getSearchAttributeConfig",
            "schema": {
              "type": "string",
              "example": "promotedMailAttribute"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "newAttributeName"
                },
                {
                  "op": "replace",
                  "path": "/displayName",
                  "value": "new attribute display name"
                },
                {
                  "op": "add",
                  "path": "/applicationAttributes",
                  "value": {
                    "2c91808b79fd2422017a0b35d30f3968": "employeeNumber"
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the search attribute configuration as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchAttributeConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/account-activities": {
      "get": {
        "operationId": "listAccountActivities",
        "tags": [
          "Account Activities"
        ],
        "summary": "List account activities",
        "description": "This gets a collection of account activities that satisfy the given query parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "requested-by",
            "schema": {
              "type": "string"
            },
            "description": "The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.",
            "required": false
          },
          {
            "in": "query",
            "name": "regarding-identity",
            "schema": {
              "type": "string"
            },
            "description": "The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of account activity.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*\n\n**modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **type, created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of account activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CancelableAccountActivity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/account-activities/{id}": {
      "get": {
        "operationId": "getAccountActivity",
        "tags": [
          "Account Activities"
        ],
        "summary": "Get account activity",
        "description": "This gets a single account activity by its id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account activity id",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccountActivities"
          }
        ],
        "responses": {
          "200": {
            "description": "An account activity object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelableAccountActivity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/account-aggregations/{id}/status": {
      "get": {
        "operationId": "getAccountAggregationStatus",
        "tags": [
          "Account Aggregations"
        ],
        "summary": "In-progress account aggregation status",
        "description": "This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.\n\nAccounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.\n\nSince this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.\n\n*Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*\n\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account aggregation id",
            "example": "2c91808477a6b0c60177a81146b8110b",
            "x-sailpoint-resource-operation-id": "importAccounts"
          }
        ],
        "responses": {
          "200": {
            "description": "An account aggregation status object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAggregationStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth-profiles": {
      "get": {
        "operationId": "getProfileConfigList",
        "tags": [
          "Auth Profile"
        ],
        "summary": "Get list of auth profiles.",
        "description": "This API returns a list of auth profiles.",
        "security": [
          {
            "userAuth": [
              "sp:auth-profile:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of Auth Profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthProfileSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth-profiles/{id}": {
      "get": {
        "operationId": "getProfileConfig",
        "tags": [
          "Auth Profile"
        ],
        "summary": "Get auth profile.",
        "description": "This API returns auth profile information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Auth Profile to get.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            },
            "x-sailpoint-resource-operation-id": "getProfileConfigList"
          }
        ],
        "security": [
          {
            "userAuth": [
              "sp:auth-profile:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Auth Profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchProfileConfig",
        "tags": [
          "Auth Profile"
        ],
        "summary": "Patch a specified auth profile",
        "description": "This API updates an existing Auth Profile. The following fields are patchable:\n**offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Auth Profile to patch.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            },
            "x-sailpoint-resource-operation-id": "getProfileConfigList"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Auth Profile as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:auth-profile:update"
            ]
          }
        ]
      }
    },
    "/campaigns": {
      "get": {
        "operationId": "getActiveCampaigns",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "List campaigns",
        "description": "Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).\n\nA token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign:read",
              "idn:campaign:manage",
              "idn:campaign-report:read",
              "idn:campaign-report:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "CERT_ADMIN",
          "REPORT_ADMIN"
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "name": "detail",
            "schema": {
              "type": "string",
              "enum": [
                "SLIM",
                "FULL"
              ]
            },
            "required": false,
            "description": "Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.",
            "example": "FULL"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**status**: *eq, in*",
            "example": "name eq \"Manager Campaign\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "required": false,
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created**",
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaign objects. By default, the API returns a list of SLIM campaigns.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Campaign"
                      },
                      {
                        "$ref": "#/components/schemas/SlimCampaign"
                      }
                    ]
                  }
                },
                "examples": {
                  "Slim Campaign": {
                    "$ref": "#/components/examples/SlimCampaigns"
                  },
                  "Full Campaign": {
                    "$ref": "#/components/examples/FullCampaigns"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Create campaign",
        "description": "Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "CERT_ADMIN"
        ],
        "deprecated": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Campaign"
              },
              "examples": {
                "Manager": {
                  "$ref": "#/components/examples/CreateCampaignManager"
                },
                "Search": {
                  "$ref": "#/components/examples/CreateCampaignSearch"
                },
                "Source Owner": {
                  "$ref": "#/components/examples/CreateCampaignSourceOwner"
                },
                "Role Composition": {
                  "$ref": "#/components/examples/CreateCampaignRoleComposition"
                },
                "Machine Account Owner": {
                  "$ref": "#/components/examples/CreateCampaignMachineAccount"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response indicates that the requested campaign has been successfully accepted into the system, and its representation is returned by the API.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/FullCampaignManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/FullCampaignSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/FullCampaignSourceOwner"
                  },
                  "Role Composition": {
                    "$ref": "#/components/examples/FullCampaignRoleComposition"
                  },
                  "Machine Account Owner": {
                    "$ref": "#/components/examples/FullCampaignMachineAccount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/delete": {
      "post": {
        "operationId": "deleteCampaigns",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Delete campaigns",
        "description": "Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "requestBody": {
          "description": "IDs of the campaigns to delete.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCampaignsRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}": {
      "get": {
        "operationId": "getCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get campaign",
        "description": "Use this API to get information for an existing certification campaign by the campaign's ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign:read",
              "idn:campaign:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign to be retrieved.",
            "example": "2c91808571bcfcf80171c23e4b4221fc",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlimCampaign"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/SlimCampaignManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/SlimCampaignSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/SlimCampaignSourceOwner"
                  },
                  "RoleComposition": {
                    "$ref": "#/components/examples/SlimCampaignRoleComposition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Update a campaign",
        "description": "Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/update-campaign).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign:read",
              "idn:campaign:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign being modified.",
            "example": "2c91808571bcfcf80171c23e4b4221fc",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nThe fields that can be patched differ based on the status of the campaign.\n\nWhen the campaign is in the *STAGED* status, you can patch these fields:\n* name\n* description\n* recommendationsEnabled\n* deadline\n* emailNotificationEnabled\n* autoRevokeAllowed\n\nWhen the campaign is in the *ACTIVE* status, you can patch these fields:\n* deadline\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "This field has been updated!"
                },
                {
                  "op": "copy",
                  "from": "/name",
                  "path": "/description"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response indicates that the PATCH operation succeeded, and the API returns the campaign's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlimCampaign"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/SlimCampaignManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/SlimCampaignSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/SlimCampaignSourceOwner"
                  },
                  "RoleComposition": {
                    "$ref": "#/components/examples/SlimCampaignRoleComposition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/activate": {
      "post": {
        "operationId": "startCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Activate a campaign",
        "description": "Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "deprecated": true,
        "requestBody": {
          "description": "Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller's timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCampaignOptions"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Campaign ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/complete": {
      "post": {
        "operationId": "completeCampaign",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Complete a campaign",
        "description": ":::caution\n\nThis endpoint will run successfully for any campaigns that are **past due**.\n\nThis endpoint will return a content error if the campaign is **not past due**.\n\n:::\n\nUse this API to complete a certification campaign. This functionality is provided to admins so that they\ncan complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "requestBody": {
          "description": "Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction=REVOKE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteCampaignOptions"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Campaign ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/run-remediation-scan": {
      "post": {
        "operationId": "startCampaignRemediationScan",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Run campaign remediation scan",
        "description": "Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).\n\nA token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign-report:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "ID of the campaign the remediation scan is being run for.",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/reassign": {
      "post": {
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "operationId": "move",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Reassign certifications",
        "description": "This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification campaign ID",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminReviewReassign"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The reassign task that has been submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificationTask"
                },
                "example": {
                  "id": "2c918086719eec070171a7e3355a360a",
                  "type": "ADMIN_REASSIGN",
                  "targetType": "CAMPAIGN",
                  "targetId": "2c918086719eec070171a7e3355a834c",
                  "status": "QUEUED",
                  "errors": [],
                  "created": "2020-09-24T18:10:47.693Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/reports": {
      "get": {
        "operationId": "getCampaignReports",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get campaign reports",
        "deprecated": true,
        "description": "Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).\n\nA token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign-report:read",
              "idn:campaign-report:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "ID of the campaign whose reports are being fetched.",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of campaign report objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignReport"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/{id}/run-report/{type}": {
      "post": {
        "operationId": "startCampaignReport",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Run campaign report",
        "deprecated": true,
        "description": "Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).\n\nA token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign-report:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "2c91808571bcfcf80171c23e4b4221fc"
            },
            "required": true,
            "description": "ID of the campaign the report is being run for.",
            "x-sailpoint-resource-operation-id": "getActiveCampaigns"
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ReportType"
            },
            "required": true,
            "description": "Type of report to run."
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaigns/reports-configuration": {
      "get": {
        "operationId": "getCampaignReportsConfig",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get campaign reports configuration",
        "deprecated": true,
        "description": "Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign:read",
              "idn:campaign:manage"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign report configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignReportsConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setCampaignReportsConfig",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Set campaign reports configuration",
        "deprecated": true,
        "description": "Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Campaign report configuration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignReportsConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The persisted campaign report configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignReportsConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaign-templates": {
      "get": {
        "operationId": "getCampaignTemplates",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "List campaign templates",
        "description": "Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).\n\nThe endpoint returns all campaign templates matching the query parameters.\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:read",
              "idn:campaign-template:manage"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *eq, ge, gt, in, le, lt, ne, sw*\n\n**id**: *eq, ge, gt, in, le, lt, ne, sw*",
            "example": "name eq \"manager template\""
          }
        ],
        "responses": {
          "200": {
            "description": "List of campaign template objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignTemplate"
                  }
                },
                "example": [
                  {
                    "id": "e7dbec99d49349c8951bd84f58a05120",
                    "name": "Manager Review",
                    "created": "2022-08-02T19:16:42.632Z",
                    "modified": null,
                    "description": "A review of everyone's access by their manager.",
                    "deadlineDuration": "P14D",
                    "ownerRef": {
                      "email": "support@testmail.identitysoon.com",
                      "type": "IDENTITY",
                      "id": "7ec252acbd4245548bc25df22348cb75",
                      "name": "SailPoint Support"
                    },
                    "scheduled": false,
                    "campaign": {
                      "created": null,
                      "modified": null,
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
                        "name": "Test Manager Filter"
                      },
                      "sunsetCommentsRequired": true,
                      "sourceOwnerCampaignInfo": null,
                      "searchCampaignInfo": null,
                      "roleCompositionCampaignInfo": null,
                      "alerts": null,
                      "totalCertifications": null,
                      "completedCertifications": null,
                      "sourcesWithOrphanEntitlements": null,
                      "id": null,
                      "name": "Manager Review",
                      "description": "Review everyone's access.",
                      "deadline": null,
                      "type": "MANAGER",
                      "status": null,
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "mandatoryCommentRequirement": "NO_DECISIONS"
                    }
                  },
                  {
                    "id": "b7e6459eed5247ac8b98a5fed81fe27f",
                    "name": "Reporting Access Review",
                    "created": "2022-07-28T19:19:40.035Z",
                    "modified": null,
                    "description": "A review of everyone's access to the reporting system.",
                    "deadlineDuration": "P14D",
                    "ownerRef": {
                      "email": "support@testmail.identitysoon.com",
                      "type": "IDENTITY",
                      "id": "7ec252acbd4245548bc25df22348cb75",
                      "name": "SailPoint Support"
                    },
                    "scheduled": false,
                    "campaign": {
                      "created": null,
                      "modified": null,
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
                        "name": "Test Search Filter"
                      },
                      "sunsetCommentsRequired": true,
                      "sourceOwnerCampaignInfo": null,
                      "searchCampaignInfo": {
                        "type": "ACCESS",
                        "description": "Identities with reporting abilities",
                        "reviewerId": null,
                        "reviewer": null,
                        "query": "@access(name: (\"reporter\"))",
                        "identityIds": null,
                        "accessConstraints": []
                      },
                      "roleCompositionCampaignInfo": null,
                      "alerts": null,
                      "totalCertifications": null,
                      "completedCertifications": null,
                      "sourcesWithOrphanEntitlements": null,
                      "id": null,
                      "name": "Search Campaign",
                      "description": "Review everyone's access to the reporting system.",
                      "deadline": null,
                      "type": "SEARCH",
                      "status": null,
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "mandatoryCommentRequirement": "NO_DECISIONS"
                    }
                  },
                  {
                    "id": "b9f41bc69e7a4291b9de0630396d030d",
                    "name": "Campaign With Admin Role",
                    "created": "2022-08-02T13:40:36.857Z",
                    "modified": null,
                    "description": "Campaign With Admin Role",
                    "deadlineDuration": null,
                    "ownerRef": {
                      "email": "support@testmail.identitysoon.com",
                      "type": "IDENTITY",
                      "id": "7ec252acbd4245548bc25df22348cb75",
                      "name": "SailPoint Support"
                    },
                    "scheduled": false,
                    "campaign": {
                      "created": null,
                      "modified": null,
                      "filter": null,
                      "sunsetCommentsRequired": true,
                      "sourceOwnerCampaignInfo": null,
                      "searchCampaignInfo": null,
                      "roleCompositionCampaignInfo": {
                        "remediatorRef": {
                          "type": "IDENTITY",
                          "id": "7ec252acbd4245548bc25df22348cb75",
                          "name": "SailPoint Support"
                        },
                        "reviewerId": null,
                        "reviewer": null,
                        "roleIds": [
                          "b15d609fc5c8434b865fe552315fda8f"
                        ],
                        "query": null,
                        "description": null
                      },
                      "alerts": null,
                      "totalCertifications": null,
                      "completedCertifications": null,
                      "sourcesWithOrphanEntitlements": null,
                      "id": null,
                      "name": "Campaign With Admin Role",
                      "description": "Campaign With Admin Role",
                      "deadline": null,
                      "type": "ROLE_COMPOSITION",
                      "status": null,
                      "emailNotificationEnabled": false,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "mandatoryCommentRequirement": "NO_DECISIONS"
                    }
                  },
                  {
                    "id": "b9f41bc69e7a4291b9de0630396d030d",
                    "name": "AD Source Review",
                    "created": "2022-08-02T13:40:36.857Z",
                    "modified": null,
                    "description": "A review of our AD source.",
                    "deadlineDuration": "P1M",
                    "ownerRef": {
                      "email": "support@testmail.identitysoon.com",
                      "type": "IDENTITY",
                      "id": "7ec252acbd4245548bc25df22348cb75",
                      "name": "SailPoint Support"
                    },
                    "scheduled": false,
                    "campaign": {
                      "created": null,
                      "modified": null,
                      "filter": {
                        "type": "CAMPAIGN_FILTER",
                        "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
                        "name": "Test Source Owner Filter"
                      },
                      "sunsetCommentsRequired": true,
                      "sourceOwnerCampaignInfo": {
                        "sourceIds": [
                          "2c918084707deba501709d45ce4e5569"
                        ]
                      },
                      "searchCampaignInfo": null,
                      "roleCompositionCampaignInfo": null,
                      "alerts": null,
                      "totalCertifications": null,
                      "completedCertifications": null,
                      "sourcesWithOrphanEntitlements": null,
                      "id": null,
                      "name": "AD Source Review",
                      "description": "Review everyone's access.",
                      "deadline": null,
                      "type": "SOURCE_OWNER",
                      "status": null,
                      "emailNotificationEnabled": true,
                      "autoRevokeAllowed": false,
                      "recommendationsEnabled": false,
                      "correlatedStatus": "CORRELATED",
                      "mandatoryCommentRequirement": "NO_DECISIONS"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Create a campaign template",
        "description": "Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:manage"
            ]
          }
        ],
        "deprecated": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignTemplate"
              },
              "examples": {
                "Manager": {
                  "$ref": "#/components/examples/CreateCampaignTemplateManager"
                },
                "Search": {
                  "$ref": "#/components/examples/CreateCampaignTemplateSearch"
                },
                "Source Owner": {
                  "$ref": "#/components/examples/CreateCampaignTemplateSourceOwner"
                },
                "RoleComposition": {
                  "$ref": "#/components/examples/CreateCampaignTemplateRoleComposition"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignTemplate"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/CampaignTemplateManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/CampaignTemplateSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/CampaignTemplateSourceOwner"
                  },
                  "RoleComposition": {
                    "$ref": "#/components/examples/CampaignTemplateRoleComposition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}": {
      "get": {
        "operationId": "getCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get a campaign template",
        "description": "Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:read",
              "idn:campaign-template:manage"
            ]
          }
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Requested campaign template's ID.",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "responses": {
          "200": {
            "description": "Data for the campaign matching the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignTemplate"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/CampaignTemplateManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/CampaignTemplateSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/CampaignTemplateSourceOwner"
                  },
                  "RoleComposition": {
                    "$ref": "#/components/examples/CampaignTemplateRoleComposition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Update a campaign template",
        "description": "Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template being modified.",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* description\n* deadlineDuration\n* campaign (all fields that are allowed during create)\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                },
                {
                  "op": "replace",
                  "path": "/campaign/filter/id",
                  "value": "ff80818155fe8c080155fe8d925b0316"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response indicates that the PATCH operation succeeded, and the API returns the template's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignTemplate"
                },
                "examples": {
                  "Manager": {
                    "$ref": "#/components/examples/CampaignTemplateManager"
                  },
                  "Search": {
                    "$ref": "#/components/examples/CampaignTemplateSearch"
                  },
                  "Source Owner": {
                    "$ref": "#/components/examples/CampaignTemplateSourceOwner"
                  },
                  "RoleComposition": {
                    "$ref": "#/components/examples/CampaignTemplateRoleComposition"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Delete a campaign template",
        "description": "Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template being deleted.",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "The campaign template was successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}/generate": {
      "post": {
        "operationId": "startGenerateCampaignTemplate",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Generate a campaign from template",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:campaign-template:manage"
            ]
          }
        ],
        "description": "Use this API to generate a new certification campaign from a campaign template.\n\nThe campaign object contained in the template has special formatting applied to its name and description\nfields that determine the generated campaign's name/description. Placeholders in those fields are\nformatted with the current date and time upon generation.\n\nPlaceholders consist of a percent sign followed by a letter indicating what should be inserted. For\nexample, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a\ncampaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).\n\nValid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).\n\nThough this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template to use for generation.",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "responses": {
          "200": {
            "description": "This response indicates that a campaign was successfully generated from this template, and the API returns a reference to the new campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignReference"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/campaign-templates/{id}/schedule": {
      "get": {
        "operationId": "getCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Get campaign template schedule",
        "description": "Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": []
          }
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template whose schedule is being fetched.",
            "example": "04bedce387bd47b2ae1f86eb0bb36dee",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "responses": {
          "200": {
            "description": "Current schedule for the campaign template. See the [Set Campaign Template Schedule endpoint documentation](https://developer.sailpoint.com/docs/api/beta/set-campaign-template-schedule) for more examples.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Set campaign template schedule",
        "description": "Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one. \nThough this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": []
          }
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template being scheduled.",
            "example": "04bedce387bd47b2ae1f86eb0bb36dee",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              },
              "examples": {
                "Monthly": {
                  "description": "Runs on the 15th and last day of the month, at 5PM.",
                  "value": {
                    "type": "MONTHLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "17"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "15"
                      ]
                    }
                  }
                },
                "Once a year": {
                  "description": "Runs every January 1st at midnight.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "0"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "--01-01"
                      ]
                    }
                  }
                },
                "Quarterly": {
                  "description": "Runs once a quarter (every 3 months) on the first of the month at 1AM.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "months": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ],
                      "interval": 3
                    }
                  }
                },
                "Yearly on Specific Days": {
                  "description": "Runs on March 12 and December 5 at 1AM, every year.",
                  "value": {
                    "type": "ANNUALLY",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "--03-12",
                        "--12-05"
                      ]
                    }
                  }
                },
                "On a Specific Date": {
                  "description": "Runs at 1AM on February 18th, 2020",
                  "value": {
                    "type": "CALENDAR",
                    "hours": {
                      "type": "LIST",
                      "values": [
                        "1"
                      ]
                    },
                    "days": {
                      "type": "LIST",
                      "values": [
                        "2020-02-18"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCampaignTemplateSchedule",
        "tags": [
          "Certification Campaigns"
        ],
        "summary": "Delete campaign template schedule",
        "description": "Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).\n\nA token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.\n",
        "security": [
          {
            "userAuth": []
          }
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the campaign template whose schedule is being deleted.",
            "example": "04bedce387bd47b2ae1f86eb0bb36dee",
            "x-sailpoint-resource-operation-id": "getCampaignTemplates"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/reassign-async": {
      "post": {
        "operationId": "submitReassignCertsAsync",
        "tags": [
          "Certifications"
        ],
        "summary": "Reassign certifications asynchronously",
        "description": "This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:certification:write"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityCertifications",
            "description": "The identity campaign certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewReassign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A certification task object for the reassignment which can be queried for status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityCertificationTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/tasks/{taskId}": {
      "get": {
        "operationId": "getIdentityCertificationTaskStatus",
        "tags": [
          "Certifications"
        ],
        "summary": "Certification task status",
        "description": "This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityCertifications",
            "description": "The identity campaign certification ID"
          },
          {
            "in": "path",
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getIdentityCertificationPendingTasks",
            "description": "The certification task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A certification task object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityCertificationTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/tasks-pending": {
      "get": {
        "operationId": "getIdentityCertificationPendingTasks",
        "tags": [
          "Certifications"
        ],
        "summary": "Pending certification tasks",
        "description": "This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityCertifications",
            "description": "The identity campaign certification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pending (`QUEUED` or `IN_PROGRESS`) certification task objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityCertificationTask"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications/{certificationId}/access-review-items/{itemId}/permissions": {
      "get": {
        "operationId": "getIdentityCertificationItemPermissions",
        "tags": [
          "Certifications"
        ],
        "summary": "Permissions for entitlement certification item",
        "description": "This API returns the permissions associated with an entitlement certification item based on the certification item's ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:certification:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**target**: *eq, sw*\n\n**rights**: *ca*\n\nAll field values (second filter operands) are case-insensitive for this API.\n\nOnly a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.\n\nFor example, the following is valid: `?filters=rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22`\n\nThe following is invalid: `?filters=rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)`",
            "example": "target eq \"SYS.OBJAUTH2\""
          },
          {
            "in": "path",
            "name": "certificationId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityCertifications",
            "description": "The certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityAccessReviewItems",
            "description": "The certification item ID",
            "example": "2c91808671bcbab40171bd945d961227"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of permissions associated with the given itemId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications/{id}/reviewers": {
      "get": {
        "operationId": "listCertificationReviewers",
        "tags": [
          "Certifications"
        ],
        "summary": "List of reviewers for certification",
        "description": "This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.",
        "security": [
          {
            "userAuth": [
              "idn:certification:read"
            ]
          }
        ],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The certification ID",
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listCertifications"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**email**: *eq, sw*",
            "example": "name eq \"Bob\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, email**",
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reviewers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/certifications": {
      "get": {
        "operationId": "listCertifications",
        "tags": [
          "Certifications"
        ],
        "summary": "Certifications by ids",
        "description": "This API returns a list of certifications that satisfy the given query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned.",
        "parameters": [
          {
            "in": "query",
            "name": "reviewer-identitiy",
            "schema": {
              "type": "string"
            },
            "description": "The ID of reviewer identity. *me* indicates the current user.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**phase**: *eq*\n\n**completed**: *eq, ne*\n\n**campaignRef.campaignType**: *eq, in*\n\n**campaignRef.id**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, due, signed**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of certifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificationDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/connector-rules": {
      "get": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "getConnectorRuleList",
        "summary": "List connector rules",
        "description": "Returns the list of connector rules.\nA token with ORG_ADMIN authority is required to call this API.",
        "responses": {
          "200": {
            "description": "A list of connector rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectorRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:read",
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "createConnectorRule",
        "summary": "Create connector rule",
        "description": "Creates a new connector rule.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "The connector rule to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorRuleCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      }
    },
    "/connector-rules/{id}": {
      "get": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Connector-rule by id",
        "operationId": "getConnectorRule",
        "description": "Returns the connector rule specified by ID.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "8c190e6787aa4ed9a90bd9d5344523fb",
            "x-sailpoint-resource-operation-id": "getConnectorRuleList"
          }
        ],
        "responses": {
          "200": {
            "description": "Connector rule with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:read",
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Update a connector rule",
        "description": "Updates an existing connector rule with the one provided in the request body. Note that the fields 'id', 'name', and 'type' are immutable.\nA token with ORG_ADMIN authority is required to call this API.",
        "operationId": "updateConnectorRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "8c190e6787aa4ed9a90bd9d5344523fb",
            "x-sailpoint-resource-operation-id": "getConnectorRuleList"
          }
        ],
        "requestBody": {
          "description": "The connector rule with updated data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorRuleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Connector Rule Management"
        ],
        "summary": "Delete a connector-rule",
        "description": "Deletes the connector rule specified by the given ID.\nA token with ORG_ADMIN authority is required to call this API.",
        "operationId": "deleteConnectorRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the connector rule to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "8c190e6787aa4ed9a90bd9d5344523fb",
            "x-sailpoint-resource-operation-id": "getConnectorRuleList"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      }
    },
    "/connector-rules/validate": {
      "post": {
        "tags": [
          "Connector Rule Management"
        ],
        "operationId": "validateConnectorRule",
        "summary": "Validate connector rule",
        "description": "Returns a list of issues within the code to fix, if any.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "The code to validate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The status of the code's eligibility as a connector rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorRuleValidationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:rule-management-connector:read",
              "idn:rule-management-connector:manage"
            ]
          }
        ]
      }
    },
    "/connectors": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "operationId": "getConnectorList",
        "summary": "Get connector list",
        "description": "Fetches list of connectors that have 'RELEASED' status using filtering and pagination.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**type**: *eq*\n\n**directConnect**: *eq*\n\n**category**: *eq*\n\n**features**: *ca*",
            "example": "directConnect eq \"true\""
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "no",
                "fi",
                "sv",
                "ru",
                "pt",
                "ko",
                "zh-TW",
                "en",
                "it",
                "fr",
                "zh-CN",
                "hu",
                "es",
                "cs",
                "ja",
                "pl",
                "da",
                "nl"
              ],
              "example": "de"
            },
            "description": "The locale to apply to the config. If no viable locale is given, it will default to \"en\""
          }
        ],
        "responses": {
          "200": {
            "description": "A Connector Dto object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/V3ConnectorDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:connector-config:read",
              "idn:connector-config:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/custom-password-instructions": {
      "post": {
        "operationId": "createCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Create custom password instructions",
        "description": "This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordInstruction"
              },
              "example": {
                "pageId": "reset-password:enter-password",
                "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the custom password instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomPasswordInstruction"
                },
                "example": {
                  "pageId": "reset-password:enter-password",
                  "locale": "default",
                  "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/custom-password-instructions/{pageId}": {
      "get": {
        "operationId": "getCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Get custom password instructions by page id",
        "description": "This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string",
              "enum": [
                "change-password:enter-password",
                "change-password:finish",
                "flow-selection:select",
                "forget-username:user-email",
                "mfa:enter-code",
                "mfa:enter-kba",
                "mfa:select",
                "reset-password:enter-password",
                "reset-password:enter-username",
                "reset-password:finish",
                "unlock-account:enter-username",
                "unlock-account:finish"
              ]
            },
            "required": true,
            "description": "The page ID of custom password instructions to query.",
            "example": "mfa:select"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the custom password instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomPasswordInstruction"
                },
                "example": {
                  "pageId": "reset-password:enter-password",
                  "locale": "default",
                  "pageContent": "See company password policies for details by clicking <a href=\"url\">here</a>"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteCustomPasswordInstructions",
        "tags": [
          "Custom Password Instructions"
        ],
        "summary": "Delete custom password instructions by page id",
        "description": "This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string",
              "enum": [
                "change-password:enter-password",
                "change-password:finish",
                "flow-selection:select",
                "forget-username:user-email",
                "mfa:enter-code",
                "mfa:enter-kba",
                "mfa:select",
                "reset-password:enter-password",
                "reset-password:enter-username",
                "reset-password:finish",
                "unlock-account:enter-username",
                "unlock-account:finish"
              ]
            },
            "required": true,
            "description": "The page ID of custom password instructions to delete.",
            "example": "mfa:select"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "operationId": "listEntitlements",
        "tags": [
          "Entitlements"
        ],
        "summary": "Gets a list of entitlements.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:read",
              "idn:entitlement:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ],
        "description": "This API returns a list of entitlements.\n\nThis API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).\n\nAny authenticated token can call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "account-id",
            "schema": {
              "type": "string"
            },
            "description": "The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s). This parameter is deprecated. Please use [Account Entitlements API](https://developer.sailpoint.com/apis/beta/#operation/getAccountEntitlements) to get account entitlements.",
            "deprecated": true,
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "required": false
          },
          {
            "in": "query",
            "name": "segmented-for-identity",
            "schema": {
              "type": "string"
            },
            "description": "If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. \nCannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user's Identity.",
            "example": "e554098913544630b5985e9042f5e44b",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs.\nCannot be specified with the **account-id** or **segmented-for-identity** param(s).",
            "example": "041727d4-7d95-4779-b891-93cf41e98249,a378c9fa-bae5-494c-804e-a1e30f69f649",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented=false** results in an error.",
            "example": true,
            "required": false
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*\n\n**type**: *eq, in*\n\n**attribute**: *eq, in*\n\n**value**: *eq, in, sw*\n\n**source.id**: *eq, in*\n\n**requestable**: *eq*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*",
            "example": "attribute eq \"memberOf\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}": {
      "get": {
        "operationId": "getEntitlement",
        "tags": [
          "Entitlements"
        ],
        "summary": "Get an entitlement",
        "description": "This API returns an entitlement by its ID.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:read",
              "idn:entitlement:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The entitlement ID",
            "example": "2c91808874ff91550175097daaec161c",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          }
        ],
        "responses": {
          "200": {
            "description": "An entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                },
                "example": {
                  "sourceSchemaObjectType": "group",
                  "attribute": "memberOf",
                  "attributes": {
                    "GroupType": "Security",
                    "sAMAccountName": "LauncherTest1",
                    "GroupScope": "Global",
                    "objectguid": "{01a6e70b-9705-4155-a5c6-492a9bcc8c64}",
                    "objectSid": "S-1-5-21-3585869415-1648031554-2909195034-1633",
                    "cn": "LauncherTest1",
                    "msDS-PrincipalName": "AUTOMATIONAD\\LauncherTest1"
                  },
                  "value": "CN=LauncherTest1,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                  "description": "some description",
                  "privileged": false,
                  "cloudGoverned": false,
                  "source": {
                    "type": "SOURCE",
                    "id": "2c9180877504c40e0175097d5ce707c8",
                    "name": "EndToEnd-ADSource"
                  },
                  "owner": {
                    "id": "2c9180858315595501831958427e5424",
                    "name": "Addie Smith",
                    "type": "IDENTITY"
                  },
                  "segments": [
                    "1d126fe0-45e2-4aea-bc64-a07e9344ef26"
                  ],
                  "manuallyUpdatedFields": {
                    "DISPLAY_NAME": true,
                    "DESCRIPTION": true
                  },
                  "id": "2c91808c74ff913f0175097daa9d59cd",
                  "name": "LauncherTest1",
                  "created": "2020-10-08T18:33:52.029Z",
                  "modified": "2021-01-19T16:53:35.707Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchEntitlement",
        "tags": [
          "Entitlements"
        ],
        "summary": "Patch an entitlement",
        "description": "This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\n\nThe following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description** and **manuallyUpdatedFields**\n\nWhen you're patching owner, only owner type and owner id must be provided. Owner name is optional, and it won't be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.\n\nA token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the entitlement to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listEntitlements"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/requestable",
                    "value": true
                  }
                ]
              },
              "examples": {
                "Make an entitlement requestable and privileged in one call": {
                  "description": "This example shows how multiple fields may be updated with a single patch call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/requestable",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/privileged",
                      "value": true
                    }
                  ]
                },
                "Assign an entitlement to a segment": {
                  "description": "This example shows how to use patch to assign an entitlement to a segment by adding the segment's ID to the entitlement's segments array.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/segments/-",
                      "value": "f7b1b8a3-5fed-4fd4-ad29-82014e137e19"
                    }
                  ]
                },
                "Assign an owner to an entitlement": {
                  "description": "This example shows how to use patch to assign an owner to an entitlement by adding the owner's info to the entitlement.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/owner",
                      "value": {
                        "type": "IDENTITY",
                        "id": "2c9180858315595501831958427e5424"
                      }
                    }
                  ]
                },
                "Replace an owner for an entitlement": {
                  "description": "This example shows how to use patch to replace an entitlement's owner by replacing the owner's info to the entitlement.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/owner",
                      "value": {
                        "type": "IDENTITY",
                        "id": "2c9180858315595501831958427e5424"
                      }
                    }
                  ]
                },
                "Set entitlement manually updated fields": {
                  "description": "This example shows how to set an entitlement's manually updated fields values with patch request. Values for all manually updateable fields must be specified in the request. For now only two entitlement fields support this: DISPLAY_NAME and DESCRIPTION.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/manuallyUpdatedFields",
                      "value": {
                        "DISPLAY_NAME": true,
                        "DESCRIPTION": true
                      }
                    }
                  ]
                },
                "Add the description for an entitlement": {
                  "description": "This example shows how to use patch to add a description for the entitlement.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/description",
                      "value": "new description for the entitlement"
                    }
                  ]
                },
                "Update the name for an entitlement": {
                  "description": "This example shows how to use patch to update an entitlement's name.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "entitlement new name"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the entitlement as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/parents": {
      "get": {
        "operationId": "listEntitlementParents",
        "tags": [
          "Entitlements"
        ],
        "summary": "List of entitlements parents",
        "description": "This API returns a list of all parent entitlements of a given entitlement.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:read",
              "idn:entitlement:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entitlement Id",
            "example": "2c91808c74ff913f0175097daa9d59cd",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*\n\n**type**: *eq, in*\n\n**attribute**: *eq, in*\n\n**value**: *eq, in, sw*\n\n**source.id**: *eq, in*\n\n**requestable**: *eq*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*",
            "example": "attribute eq \"memberOf\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements parents from an entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                },
                "example": [
                  {
                    "sourceSchemaObjectType": "group",
                    "attribute": "memberOf",
                    "attributes": {
                      "GroupType": "Security",
                      "sAMAccountName": "LauncherTest1",
                      "GroupScope": "Global",
                      "objectguid": "{01a6e70b-9705-4155-a5c6-492a9bcc8c64}",
                      "objectSid": "S-1-5-21-3585869415-1648031554-2909195034-1633",
                      "cn": "LauncherTest1",
                      "msDS-PrincipalName": "AUTOMATIONAD\\LauncherTest1"
                    },
                    "value": "CN=LauncherTest1,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                    "description": "some description",
                    "privileged": false,
                    "cloudGoverned": false,
                    "source": {
                      "type": "SOURCE",
                      "id": "2c9180877504c40e0175097d5ce707c8",
                      "name": "EndToEnd-ADSource"
                    },
                    "owner": {
                      "id": "2a2fdacca5e345f18bf7970cfbb8fec2",
                      "name": "identity 1",
                      "type": "IDENTITY"
                    },
                    "segments": [
                      "1d126fe0-45e2-4aea-bc64-a07e9344ef26"
                    ],
                    "manuallyUpdatedFields": {
                      "DISPLAY_NAME": true,
                      "DESCRIPTION": true
                    },
                    "id": "2c91808c74ff913f0175097daa9d59cd",
                    "name": "LauncherTest1",
                    "created": "2020-10-08T18:33:52.029Z",
                    "modified": "2021-01-19T16:53:35.707Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/children": {
      "get": {
        "operationId": "listEntitlementChildren",
        "tags": [
          "Entitlements"
        ],
        "summary": "List of entitlements children",
        "description": "This API returns a list of all child entitlements of a given entitlement.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entitlement Id",
            "example": "2c91808874ff91550175097daaec161c",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*\n\n**type**: *eq, in*\n\n**attribute**: *eq, in*\n\n**value**: *eq, in, sw*\n\n**source.id**: *eq, in*\n\n**requestable**: *eq*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*",
            "example": "attribute eq \"memberOf\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of entitlements children from an entitlement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                },
                "example": [
                  {
                    "sourceSchemaObjectType": "group",
                    "attribute": "memberOf",
                    "attributes": {
                      "GroupType": "Security",
                      "sAMAccountName": "LauncherTest1",
                      "GroupScope": "Global",
                      "objectguid": "{01a6e70b-9705-4155-a5c6-492a9bcc8c64}",
                      "objectSid": "S-1-5-21-3585869415-1648031554-2909195034-1633",
                      "cn": "LauncherTest1",
                      "msDS-PrincipalName": "AUTOMATIONAD\\LauncherTest1"
                    },
                    "value": "CN=LauncherTest1,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local",
                    "description": "some description",
                    "privileged": false,
                    "cloudGoverned": false,
                    "source": {
                      "type": "SOURCE",
                      "id": "2c9180877504c40e0175097d5ce707c8",
                      "name": "EndToEnd-ADSource"
                    },
                    "owner": {
                      "id": "2a2fdacca5e345f18bf7970cfbb8fec2",
                      "name": "identity 1",
                      "type": "IDENTITY"
                    },
                    "segments": [
                      "1d126fe0-45e2-4aea-bc64-a07e9344ef26"
                    ],
                    "manuallyUpdatedFields": {
                      "DISPLAY_NAME": true,
                      "DESCRIPTION": true
                    },
                    "id": "2c91808c74ff913f0175097daa9d59cd",
                    "name": "LauncherTest1",
                    "created": "2020-10-08T18:33:52.029Z",
                    "modified": "2021-01-19T16:53:35.707Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/bulk-update": {
      "post": {
        "operationId": "updateEntitlementsInBulk",
        "tags": [
          "Entitlements"
        ],
        "summary": "Bulk update an entitlement list",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "This API applies an update to every entitlement of the list.\n\n\nThe number of entitlements to update is limited to 50 items maximum.\n\n\nThe JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nexamples of allowed operations :\n`**{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**`\n`**{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**`\n\nA token with ORG_ADMIN or API authority is required to call this API.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementBulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/entitlement-request-config": {
      "get": {
        "operationId": "getEntitlementRequestConfig",
        "tags": [
          "Entitlements"
        ],
        "summary": "Get entitlement request config",
        "description": "This API returns the entitlement request config for a specified entitlement.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:read",
              "idn:entitlement:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_SUBADMIN",
          "SOURCE_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entitlement Id",
            "example": "2c91808874ff91550175097daaec161c",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          }
        ],
        "responses": {
          "200": {
            "description": "An Entitlement Request Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementRequestConfig-2"
                },
                "example": {
                  "accessRequestConfig": {
                    "requestCommentRequired": true,
                    "denialCommentRequired": true,
                    "reauthorizationRequired": false,
                    "approvalSchemes": [
                      {
                        "approverType": "ENTITLEMENT_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "SOURCE_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "MANAGER",
                        "approverId": null
                      },
                      {
                        "approverType": "GOVERNANCE_GROUP",
                        "approverId": "46c79819-a69f-49a2-becb-12c971ae66c6"
                      }
                    ]
                  },
                  "revocationRequestConfig": {
                    "approvalSchemes": [
                      {
                        "approverType": "ENTITLEMENT_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "SOURCE_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "MANAGER",
                        "approverId": null
                      },
                      {
                        "approverType": "GOVERNANCE_GROUP",
                        "approverId": "46c79819-a69f-49a2-becb-12c971ae66c6"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putEntitlementRequestConfig",
        "tags": [
          "Entitlements"
        ],
        "summary": "Replace entitlement request config",
        "description": "This API replaces the entitlement request config for a specified entitlement.",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:update",
              "idn:entitlement:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_SUBADMIN",
          "SOURCE_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Entitlement ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listEntitlements"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementRequestConfig-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the entitlement request config as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementRequestConfig-2"
                },
                "example": {
                  "accessRequestConfig": {
                    "requestCommentRequired": true,
                    "denialCommentRequired": true,
                    "approvalSchemes": [
                      {
                        "approverType": "ENTITLEMENT_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "SOURCE_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "MANAGER",
                        "approverId": null
                      },
                      {
                        "approverType": "GOVERNANCE_GROUP",
                        "approverId": "46c79819-a69f-49a2-becb-12c971ae66c6"
                      }
                    ]
                  },
                  "revocationRequestConfig": {
                    "approvalSchemes": [
                      {
                        "approverType": "ENTITLEMENT_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "SOURCE_OWNER",
                        "approverId": null
                      },
                      {
                        "approverType": "MANAGER",
                        "approverId": null
                      },
                      {
                        "approverType": "GOVERNANCE_GROUP",
                        "approverId": "46c79819-a69f-49a2-becb-12c971ae66c6"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/reset/sources/{sourceId}": {
      "post": {
        "operationId": "resetSourceEntitlements",
        "tags": [
          "Entitlements"
        ],
        "summary": "Reset source entitlements",
        "description": "Remove all entitlements from a specific source.\nTo reload the accounts along with the entitlements you removed, you must run an unoptimized aggregation.  To do so, use [Import Accounts](https://developer.sailpoint.com/docs/api/beta/import-accounts/) with `disableOptimization` = `true`. ",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "ID of source for the entitlement reset",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Entitlement source reset task result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSourceResetBaseReferenceDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:entitlement:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/entitlements/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}": {
      "post": {
        "summary": "Add metadata to an entitlement.",
        "description": "Add single Access Model Metadata to an entitlement.",
        "tags": [
          "Entitlements"
        ],
        "operationId": "createAccessModelMetadataForEntitlement",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The entitlement id.",
            "example": "2c91808c74ff913f0175097daa9d59cd",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          },
          {
            "name": "attributeKey",
            "in": "path",
            "required": true,
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttribute",
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute.",
            "example": "iscPrivacy"
          },
          {
            "name": "attributeValue",
            "in": "path",
            "required": true,
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttributeValue",
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute Value.",
            "example": "public"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Remove metadata from an entitlement.",
        "description": "Remove single Access Model Metadata from an entitlement.",
        "tags": [
          "Entitlements"
        ],
        "operationId": "deleteAccessModelMetadataFromEntitlement",
        "security": [
          {
            "userAuth": [
              "idn:entitlement:delete"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The entitlement id.",
            "example": "2c91808c74ff913f0175097daa9d59cd",
            "x-sailpoint-resource-operation-id": "listEntitlements"
          },
          {
            "name": "attributeKey",
            "in": "path",
            "required": true,
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttribute",
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute.",
            "example": "iscPrivacy"
          },
          {
            "name": "attributeValue",
            "in": "path",
            "required": true,
            "x-sailpoint-resource-operation-id": "listAccessModelMetadataAttributeValue",
            "schema": {
              "type": "string"
            },
            "description": "Technical name of the Attribute Value.",
            "example": "public"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/aggregate/sources/{id}": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Aggregate entitlements",
        "deprecated": true,
        "operationId": "importEntitlementsBySource",
        "description": "Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).\n\nIf the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.\n\nIf the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "csvFile": {
                    "type": "string",
                    "format": "binary",
                    "description": "The CSV file containing the source entitlements to aggregate."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Aggregate Entitlements Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadEntitlementTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:entitlements:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/generate-password-reset-token/digit": {
      "post": {
        "operationId": "createDigitToken",
        "security": [
          {
            "userAuth": [
              "idn:password-digit-token:create"
            ]
          }
        ],
        "summary": "Generate a digit token",
        "tags": [
          "Password Management"
        ],
        "description": "This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordDigitTokenReset"
              },
              "example": {
                "userId": "Abby.Smith",
                "length": 8,
                "durationMinutes": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The digit token for password management.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordDigitToken"
                },
                "example": {
                  "digitToken": "09087713",
                  "requestId": "e1267ecd-fcd9-4c73-9c55-12555efad136"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities": {
      "get": {
        "operationId": "listHistoricalIdentities",
        "summary": "Lists all the identities",
        "description": "This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of 'idn:identity-history:read'",
        "security": [
          {
            "userAuth": [
              "idn:identity-history:read"
            ]
          }
        ],
        "tags": [
          "Identity History"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "starts-with-query",
            "schema": {
              "type": "string"
            },
            "description": "This param is used for starts-with search for first, last and display name of the identity",
            "example": "Ada"
          },
          {
            "in": "query",
            "name": "is-deleted",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if we want to only list down deleted identities or not.",
            "example": true
          },
          {
            "in": "query",
            "name": "is-active",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if we want to only list active or inactive identities.",
            "example": true
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityListItem"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}": {
      "get": {
        "operationId": "getHistoricalIdentity",
        "tags": [
          "Identity History"
        ],
        "summary": "Get latest snapshot of identity",
        "description": "This method retrieves a specified identity Requires authorization scope of 'idn:identity-history:read'",
        "security": [
          {
            "userAuth": [
              "idn:identity-history:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "The identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityHistoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/access-items": {
      "get": {
        "operationId": "listIdentityAccessItems",
        "tags": [
          "Identity History"
        ],
        "summary": "List access items by identity",
        "description": "This method retrieves a list of access item for the identity filtered by the access item type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "account",
                "entitlement",
                "app",
                "accessProfile",
                "role"
              ]
            },
            "required": false,
            "description": "The type of access item for the identity. If not provided, it defaults to account.\n\nTypes of access items: **accessProfile, account, app, entitlement, role**",
            "example": "account"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**source**: *eq*\n\n**standalone**: *eq*\n\n**privileged**: *eq*\n\n**attribute**: *eq*\n\n**cloudGoverned**: *eq*",
            "example": "source eq \"DataScienceDataset\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "required": false,
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**",
            "example": "name"
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "This param is used to search if certain fields of the access item contain the string provided.\n\nSearching is supported for the following fields depending on the type:\n\nAccess Profiles: **name, description**\n\nAccounts: **name, nativeIdentity**\n\nApps: **name**\n\nEntitlements: **name, value, description**\n\nRoles: **name, description**",
            "example": "Dr. Arden"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of access items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/AccessItemEntitlementResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAccessProfileResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAccountResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemRoleResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAppResponse"
                      }
                    ]
                  }
                },
                "examples": {
                  "Access Profile": {
                    "description": "An access profile response",
                    "value": [
                      {
                        "accessType": "accessProfile",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "AccessProfile - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD",
                        "entitlementCount": 12,
                        "appDisplayName": "AppName",
                        "removeDate": "2024-07-01T06:00:00.00Z",
                        "standalone": false,
                        "revocable": true
                      }
                    ]
                  },
                  "Account": {
                    "description": "An account response",
                    "value": [
                      {
                        "accessType": "account",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "nativeIdentity": "dr.arden.ogahn.d",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "entitlementCount": 12,
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "App": {
                    "description": "An app response",
                    "value": [
                      {
                        "accessType": "app",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "appName",
                        "appRoleId": "2c918087763e69d901763e72e97f006f"
                      }
                    ]
                  },
                  "Entitlement": {
                    "description": "An entitlement event",
                    "value": [
                      {
                        "accessType": "entitlement",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "attribute": "groups",
                        "value": "Upward mobility access",
                        "type": "group",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "Entitlement - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD",
                        "standalone": true,
                        "privileged": false,
                        "cloudGoverned": false
                      }
                    ]
                  },
                  "Role": {
                    "description": "A role response",
                    "value": [
                      {
                        "accessType": "role",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "description": "Role - Workday/Citizenship access",
                        "removeDate": "2024-07-01T06:00:00.00Z",
                        "revocable": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-history:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK",
          "REPORT_ADMIN"
        ]
      }
    },
    "/historical-identities/{id}/snapshots": {
      "get": {
        "operationId": "listIdentitySnapshots",
        "tags": [
          "Identity History"
        ],
        "summary": "Lists all the snapshots for the identity",
        "description": "This method retrieves all the snapshots for the identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string"
            },
            "description": "The specified start date",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month"
              ]
            },
            "description": "The interval indicating the range in day or month for the specified interval-name"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of identity summary for each snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySnapshotSummaryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshot-summary": {
      "get": {
        "operationId": "getIdentitySnapshotSummary",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the summary for the event count for a specific identity",
        "description": "This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "The date before which snapshot summary is required",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month"
              ]
            },
            "description": "The interval indicating day or month. Defaults to month if not specified"
          },
          {
            "in": "query",
            "name": "time-zone",
            "schema": {
              "type": "string"
            },
            "description": "The time zone. Defaults to UTC if not provided",
            "example": "UTC"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A summary list of identity changes in date histogram format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshots/{date}": {
      "get": {
        "operationId": "getIdentitySnapshot",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets an identity snapshot at a given date",
        "description": "This method retrieves a specified identity snapshot at a given date Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "description": "The specified date",
            "example": "2007-03-01T13:00:00Z",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityHistoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/snapshots/{date}/access-items": {
      "get": {
        "operationId": "listIdentitySnapshotAccessItems",
        "tags": [
          "Identity History"
        ],
        "summary": "Get identity access items snapshot",
        "description": "Use this API to get a list of identity access items at a specified date, filtered by item type.",
        "security": [
          {
            "userAuth": [
              "idn:identity-history:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "Identity ID.",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Specified date.",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "role",
                "access_profile",
                "entitlement",
                "app",
                "account"
              ]
            },
            "description": "Access item type.",
            "example": "account"
          }
        ],
        "responses": {
          "200": {
            "description": "Identity object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AccessItemAccessProfileResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAccountResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAppResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemEntitlementResponse"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemRoleResponse"
                      }
                    ]
                  }
                },
                "examples": {
                  "Access Item AccessProfile Response": {
                    "description": "An access profile response",
                    "value": [
                      {
                        "type": "accessProfile",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "AccessProfile - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD",
                        "entitlementCount": 12,
                        "appDisplayName": "AppName"
                      }
                    ]
                  },
                  "Access Item Account Response": {
                    "description": "An account response",
                    "value": [
                      {
                        "type": "account",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "nativeIdentity": "dr.arden.ogahn.d",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "entitlementCount": 12,
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "Access Item App Response": {
                    "description": "An app response",
                    "value": [
                      {
                        "type": "app",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "appName"
                      }
                    ]
                  },
                  "Access Item Entitlement Response": {
                    "description": "An entitlement event",
                    "value": [
                      {
                        "type": "entitlement",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "attribute": "groups",
                        "value": "Upward mobility access",
                        "entitlementType": "entitlement",
                        "sourceName": "DataScienceDataset",
                        "sourceId": "2793o32dwd",
                        "description": "Entitlement - Workday/Citizenship access",
                        "displayName": "Dr. Arden Rogahn MD"
                      }
                    ]
                  },
                  "Access Item Role Response": {
                    "description": "A role response",
                    "value": [
                      {
                        "type": "role",
                        "id": "2c918087763e69d901763e72e97f006f",
                        "name": "sample",
                        "description": "Role - Workday/Citizenship access"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/common-access": {
      "get": {
        "operationId": "getCommonAccess",
        "summary": "Get a paginated list of common access",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**status**: *eq, sw*\n\n**reviewedByUser** *eq*\n\n**access.id**: *eq, sw*\n\n**access.type**: *eq*\n\n**access.name**: *sw, eq*\n\n**access.description**: *sw, eq*",
            "example": "access.type eq \"ROLE\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **access.name, status**\n\nBy default the common access items are sorted by name, ascending.",
            "example": "access.name"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of common access for a customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommonAccessResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createCommonAccess",
        "summary": "Create common access items",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonAccessItemRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns details of the common access classification request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonAccessItemResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/common-access/update-status": {
      "post": {
        "operationId": "updateCommonAccessStatusInBulk",
        "summary": "Bulk update common access status",
        "tags": [
          "IAI Common Access"
        ],
        "description": "This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update",
        "requestBody": {
          "description": "Confirm or deny in bulk the common access ids that are (or aren't) common access",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommonAccessIDStatus"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/events": {
      "get": {
        "operationId": "getHistoricalIdentityEvents",
        "tags": [
          "Identity History"
        ],
        "summary": "List identity event history",
        "description": "This method retrieves all access events for the identity Requires authorization scope of 'idn:identity-history:read' ",
        "security": [
          {
            "userAuth": [
              "idn:identity-history:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "The optional instant until which access events are returned",
            "example": "2024-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "eventTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "An optional list of event types to return.  If null or empty, all events are returned",
            "example": [
              "AccessAddedEvent",
              "AccessRemovedEvent"
            ]
          },
          {
            "in": "query",
            "name": "accessItemTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "description": "An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned",
            "example": [
              "entitlement",
              "account"
            ]
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of events for the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/IdentityCertified"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemAssociated"
                      },
                      {
                        "$ref": "#/components/schemas/AccessItemRemoved"
                      },
                      {
                        "$ref": "#/components/schemas/AttributesChanged"
                      },
                      {
                        "$ref": "#/components/schemas/AccessRequested"
                      },
                      {
                        "$ref": "#/components/schemas/AccountStatusChanged"
                      }
                    ]
                  }
                },
                "examples": {
                  "AccessItemAssociated": {
                    "description": "An Access item associated event",
                    "value": [
                      {
                        "accessItem": {
                          "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "accessType": "account",
                          "nativeIdentity": 127999,
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "displayName": "Sample Name"
                        },
                        "eventType": "AccessItemAssociated",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z",
                        "governanceEvent": {
                          "name": "Access Request 58",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "type": "accessRequest",
                          "governanceId": "2c91808a77ff216301782327a50f09e1",
                          "owners": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ],
                          "reviewers": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ],
                          "decisionMaker": {
                            "id": "bc693f07e7b645539626c25954c58554",
                            "displayName": "Jon Snow"
                          }
                        }
                      }
                    ]
                  },
                  "AccessItemRemoved": {
                    "description": "An Access item removed event",
                    "value": [
                      {
                        "accessItem": {
                          "id": "8c190e6787aa4ed9a90bd9d5344523fb",
                          "accessType": "account",
                          "nativeIdentity": 127999,
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "displayName": "Sample Name"
                        },
                        "eventType": "AccessItemRemoved",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z",
                        "governanceEvent": {
                          "name": "Manager Certification for Jon Snow",
                          "dt": "2019-03-08T22:37:33.901Z",
                          "type": "certification",
                          "governanceId": "2c91808a77ff216301782327a50f09bf",
                          "owners": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ],
                          "reviewers": [
                            {
                              "id": "bc693f07e7b645539626c25954c58554",
                              "displayName": "Jon Snow"
                            }
                          ],
                          "decisionMaker": {
                            "id": "bc693f07e7b645539626c25954c58554",
                            "displayName": "Jon Snow"
                          }
                        }
                      }
                    ]
                  },
                  "AttributesChanged": {
                    "description": "An attribute changed event",
                    "value": [
                      {
                        "attributeChanges": [
                          {
                            "name": "firstname",
                            "previousValue": "adam",
                            "newValue": "zampa"
                          }
                        ],
                        "eventType": "AttributesChanged",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  },
                  "AccessRequested": {
                    "description": "An access requested event",
                    "value": {
                      "accessRequest": {
                        "requesterId": "2c91808a77ff216301782327a50f09bf",
                        "requestName": "Bing C",
                        "items": [
                          {
                            "operation": "Add",
                            "accessItemType": "role",
                            "name": "Role-1",
                            "decision": "APPROVED",
                            "description": "The role descrition",
                            "sourceId": "8a80828f643d484f01643e14202e206f",
                            "sourceName": "Source1",
                            "approvalInfos": [
                              {
                                "name": "John Snow",
                                "id": "8a80828f643d484f01643e14202e2000",
                                "status": "Approved"
                              }
                            ]
                          }
                        ]
                      },
                      "eventType": "AccessRequested",
                      "identityId": "8a80828f643d484f01643e14202e206f",
                      "dt": "2019-03-08T22:37:33.901Z"
                    }
                  },
                  "IdentityCertified": {
                    "description": "An identity certified event",
                    "value": [
                      {
                        "certification": {
                          "id": "2c91808a77ff216301782327a50f09bf",
                          "name": "Cert name",
                          "signedDate": "2019-03-08T22:37:33.901Z",
                          "certifiers": [
                            {
                              "id": "8a80828f643d484f01643e14202e206f",
                              "displayName": "John Snow"
                            }
                          ],
                          "reviewers": [
                            {
                              "id": "8a80828f643d484f01643e14202e206f",
                              "displayName": "Daenerys Targaryen"
                            }
                          ],
                          "signer": {
                            "id": "8a80828f643d484f01643e14202e206f",
                            "displayName": "Tyrion Lannister"
                          }
                        },
                        "eventType": "IdentityCertified",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  },
                  "AccountStatusChanged": {
                    "description": "An account status changed event",
                    "value": [
                      {
                        "account": {
                          "id": "2c91808a77ff216301782327a50f09bf",
                          "nativeIdentity": 127999,
                          "displayName": "Sample Name",
                          "sourceId": "8a80828f643d484f01643e14202e206f",
                          "sourceName": "JDBC Entitlements Source",
                          "entitlementCount": 0,
                          "accessType": "account"
                        },
                        "statusChange": {
                          "previousStatus": "ENABLED",
                          "newStatus": "DISABLED"
                        },
                        "eventType": "AccountStatusChanged",
                        "identityId": "8a80828f643d484f01643e14202e206f",
                        "dt": "2019-03-08T22:37:33.901Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/start-date": {
      "get": {
        "operationId": "getIdentityStartDate",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets the start date of the identity",
        "description": "This method retrieves start date of the identity Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "The start date of the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "2017-03-01T13:00:00.000Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/compare": {
      "get": {
        "operationId": "compareIdentitySnapshots",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets a difference of count for each access item types for the given identity between 2 snapshots",
        "description": "This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "snapshot1",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 1 of identity",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot2",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 2 of identity",
            "example": "2008-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "accessItemTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned "
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A IdentityCompare object with difference details for each access item type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityCompareResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/historical-identities/{id}/compare/{accessType}": {
      "get": {
        "operationId": "compareIdentitySnapshotsAccessType",
        "tags": [
          "Identity History"
        ],
        "summary": "Gets a list of differences of specific accesstype for the given identity between 2 snapshots",
        "description": "This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of 'idn:identity-history:read' ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listHistoricalIdentities",
            "description": "The identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "path",
            "name": "accessType",
            "schema": {
              "type": "string",
              "enum": [
                "accessProfile",
                "account",
                "app",
                "entitlement",
                "role"
              ]
            },
            "required": true,
            "description": "The specific type which needs to be compared",
            "example": "role"
          },
          {
            "in": "query",
            "name": "access-associated",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added & removed",
            "example": "2007-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot1",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 1 of identity",
            "example": "2008-03-01T13:00:00Z"
          },
          {
            "in": "query",
            "name": "snapshot2",
            "schema": {
              "type": "string"
            },
            "description": "The snapshot 2 of identity",
            "example": "2009-03-01T13:00:00Z"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events for the identity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessItemDiff"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{identityId}/synchronize-attributes": {
      "post": {
        "operationId": "synchronizeAttributesForIdentity",
        "tags": [
          "Identities"
        ],
        "summary": "Attribute synchronization for single identity.",
        "description": "This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "The Identity id"
          }
        ],
        "responses": {
          "202": {
            "description": "An Identity Sync job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitySyncJob"
                },
                "example": {
                  "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3dfc",
                  "status": "IN_PROGRESS",
                  "payload": {
                    "type": "SYNCHRONIZE_IDENTITY_ATTRIBUTES",
                    "dataJson": "{\"identityId\":\"2c918083746f642c01746f990884012a\"}"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{identityId}/ownership": {
      "get": {
        "operationId": "getIdentityOwnershipDetails",
        "summary": "Get ownership details",
        "tags": [
          "Identities"
        ],
        "description": "Use this API to return an identity's owned objects that will cause problems for deleting the identity. \nUse this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity. \nFor a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity's owned objects.",
        "security": [
          {
            "userAuth": [
              "idn:identity:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity ID.",
            "example": "ff8081814d2a8036014d701f3fbf53fa"
          }
        ],
        "responses": {
          "200": {
            "description": "Identity's ownership association details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityOwnershipAssociationDetails"
                },
                "example": {
                  "associationDetails": {
                    "associationType": "ROLE_OWNER",
                    "entities": [
                      {
                        "id": "b660a232f05b4e04812ca974b3011e0f",
                        "name": "Gaston.800ddf9640a",
                        "type": "ROLE"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities": {
      "get": {
        "operationId": "listIdentities",
        "tags": [
          "Identities"
        ],
        "summary": "List identities",
        "description": "This API returns a list of identities.",
        "security": [
          {
            "userAuth": [
              "idn:identity:read",
              "idn:identity:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**alias**: *eq, sw*\n\n**firstname**: *eq, sw*\n\n**lastname**: *eq, sw*\n\n**email**: *eq, sw*\n\n**cloudStatus**: *eq*\n\n**processingState**: *eq*\n\n**correlated**: *eq*\n\n**protected**: *eq*",
            "example": "id eq \"6c9079b270a266a60170a2779fcb0006\" or correlated eq false"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "required": false,
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, alias, cloudStatus**",
            "example": "name,-cloudStatus"
          },
          {
            "in": "query",
            "name": "defaultFilter",
            "schema": {
              "type": "string",
              "enum": [
                "CORRELATED_ONLY",
                "NONE"
              ],
              "default": "CORRELATED_ONLY"
            },
            "required": false,
            "description": "Adds additional filter to filters query parameter.\n\nCORRELATED_ONLY adds correlated=true and returns only identities that are correlated.\n\nNONE does not add any and returns all identities that satisfy filters query parameter.",
            "example": "NONE"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{id}": {
      "get": {
        "operationId": "getIdentity",
        "tags": [
          "Identities"
        ],
        "summary": "Identity details",
        "description": "This API returns a single identity using the Identity ID.",
        "security": [
          {
            "userAuth": [
              "idn:identity:read",
              "idn:identity:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An identity object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteIdentity",
        "tags": [
          "Identities"
        ],
        "summary": "Delete identity",
        "description": "The API returns successful response if the requested identity was deleted.",
        "security": [
          {
            "userAuth": [
              "idn:identity:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Client Error - Returned if the request is invalid. It may indicate that the specified identity is marked as protected and cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAssociationDetails"
                },
                "example": {
                  "message": "Identity is the owner of following resources",
                  "associationDetails": {
                    "associationType": "CAMPAIGN_OWNER",
                    "entities": [
                      {
                        "id": "b660a232f05b4e04812ca974b3011e0f",
                        "name": "Gaston.800ddf9640a",
                        "type": "CAMPAIGN_CAMPAIGNER"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/invite": {
      "post": {
        "operationId": "startIdentitiesInvite",
        "tags": [
          "Identities"
        ],
        "summary": "Invite identities to register",
        "description": "This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.\n\nThis task will send an invitation email only for unregistered identities.\n\nThe executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status).\n",
        "externalDocs": {
          "description": "Learn more about inviting identities here",
          "url": "https://documentation.sailpoint.com/saas/help/common/users/inviting_users.html"
        },
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteIdentitiesRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Responds with an initial TaskStatus for the executed task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{id}/verification/account/send": {
      "post": {
        "operationId": "sendIdentityVerificationAccountToken",
        "tags": [
          "Identities"
        ],
        "summary": "Send password reset email",
        "description": "This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendAccountVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email was successfully sent"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/process": {
      "post": {
        "operationId": "startIdentityProcessing",
        "tags": [
          "Identities"
        ],
        "summary": "Process a list of identityids",
        "description": "This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant's timezone to keep your identities synchronized. \n\nThis endpoint will perform the following tasks:\n1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it's expected to change).\n2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles.\n3. Enforce provisioning for any assigned accesses that haven't been fulfilled (e.g. failure due to source health).\n4. Recalculate manager relationships.\n5. Potentially clean-up identity processing errors, assuming the error has been resolved.\n\nA token with ORG_ADMIN or HELPDESK authority is required to call this API.\n",
        "externalDocs": {
          "description": "Learn more about manually processing identities here",
          "url": "https://documentation.sailpoint.com/saas/help/setup/identity_processing.html"
        },
        "security": [
          {
            "userAuth": [
              "idn:identity:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessIdentitiesRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Object containing the DTO type TASK_RESULT and the job id for the task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{identityId}/reset": {
      "post": {
        "operationId": "resetIdentity",
        "tags": [
          "Identities"
        ],
        "summary": "Reset an identity",
        "description": "Use this endpoint to reset a user's identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.",
        "security": [
          {
            "userAuth": [
              "idn:identity:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. The reset request accepted and is in progress."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{identityId}/role-assignments": {
      "get": {
        "operationId": "getRoleAssignments",
        "tags": [
          "Identities"
        ],
        "summary": "List role assignments",
        "description": "This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.",
        "security": [
          {
            "userAuth": [
              "idn:identity:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity Id to get the role assignments for",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "query",
            "name": "roleId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Role Id to filter the role assignments with",
            "example": "e7697a1e96d04db1ac7b0f4544915d2c",
            "x-sailpoint-resource-operation-id": "listRoles"
          },
          {
            "in": "query",
            "name": "roleName",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Role name to filter the role assignments with",
            "example": "Engineer"
          }
        ],
        "responses": {
          "200": {
            "description": "A role assignment object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/RoleAssignmentRef"
                      },
                      {
                        "$ref": "#/components/schemas/RoleAssignmentDto"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identities/{identityId}/role-assignments/{assignmentId}": {
      "get": {
        "operationId": "getRoleAssignment",
        "tags": [
          "Identities"
        ],
        "summary": "Role assignment details",
        "security": [
          {
            "userAuth": [
              "idn:identity:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "description": "Identity Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "assignmentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleAssignments",
            "description": "Assignment Id",
            "example": "1cbb0705b38c4226b1334eadd8874086"
          }
        ],
        "responses": {
          "200": {
            "description": "A role assignment object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignmentDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-attributes": {
      "get": {
        "operationId": "listIdentityAttributes",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "List identity attributes",
        "description": "Use this API to get a collection of identity attributes.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "includeSystem",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include 'system' attributes in the response.",
            "required": false,
            "example": false
          },
          {
            "in": "query",
            "name": "includeSilent",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include 'silent' attributes in the response.",
            "required": false,
            "example": false
          },
          {
            "in": "query",
            "name": "searchableOnly",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include only 'searchable' attributes in the response.",
            "required": false,
            "example": false
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identity attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createIdentityAttribute",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "Create identity attribute",
        "description": "Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityAttribute"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identity attribute was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-attributes/{name}": {
      "get": {
        "operationId": "getIdentityAttribute",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "Get identity attribute",
        "description": "This gets an identity attribute for a given technical name.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The attribute's technical name.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityAttributes",
            "example": "displayName"
          }
        ],
        "responses": {
          "200": {
            "description": "The identity attribute with the given name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putIdentityAttribute",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "Update identity attribute",
        "description": "This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The attribute's technical name.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityAttributes",
            "example": "displayName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The identity attribute was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteIdentityAttribute",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "Delete identity attribute",
        "description": "This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "The attribute's technical name.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityAttributes",
            "example": "displayName"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-attributes/bulk-delete": {
      "delete": {
        "operationId": "deleteIdentityAttributesInBulk",
        "tags": [
          "Identity Attributes"
        ],
        "summary": "Bulk delete identity attributes",
        "description": "Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to 'false' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:identity-profile-attribute:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityAttributeNames"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity-profiles": {
      "get": {
        "operationId": "listIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "List identity profiles",
        "description": "Get a list of identity profiles, based on the specified query parameters.\nA token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne, ge, gt, in, le, sw*\n\n**name**: *eq, ne, ge, gt, in, le, sw*\n\n**priority**: *eq, ne*",
            "example": "id eq 8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**",
            "example": "name,-priority"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identity profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProfile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "post": {
        "operationId": "createIdentityProfile",
        "summary": "Create identity profile",
        "description": "Create an identity profile.\nA token with ORG_ADMIN authority is required to call this API to create an Identity Profile.",
        "tags": [
          "Identity Profiles"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProfile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created identity profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/identity-profiles/bulk-delete": {
      "post": {
        "operationId": "deleteIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Delete identity profiles",
        "description": "This deletes multiple Identity Profiles via a list of supplied IDs.\n\nOn success, this endpoint will return a reference to the bulk delete task result.\n\nA token with ORG_ADMIN authority is required to call this API.\n\nThe following rights are required to access this endpoint: idn:identity-profile:delete",
        "requestBody": {
          "description": "Identity Profile bulk delete request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProfileBulkDelete"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted - Returns a TaskResult object referencing the bulk delete job created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultSimplified",
                  "description": "An object with a TaskResult reference of the bulk delete job"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:delete"
            ]
          }
        ]
      }
    },
    "/identity-profiles/export": {
      "get": {
        "operationId": "exportIdentityProfiles",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Export identity profiles",
        "description": "This exports existing identity profiles in the format specified by the sp-config service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ne*\n\n**name**: *eq, ne*\n\n**priority**: *eq, ne*",
            "example": "id eq 8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, priority**",
            "example": "name,-priority"
          }
        ],
        "responses": {
          "200": {
            "description": "List of export objects with identity profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProfileExportedObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:read",
              "idn:identity-profile:manage"
            ]
          }
        ]
      }
    },
    "/identity-profiles/import": {
      "post": {
        "operationId": "importIdentityProfiles",
        "summary": "Import identity profiles",
        "description": "This imports previously exported identity profiles.",
        "tags": [
          "Identity Profiles"
        ],
        "requestBody": {
          "description": "Previously exported Identity Profiles.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityProfileExportedObject"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The result of importing Identity Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:manage"
            ]
          }
        ]
      }
    },
    "/identity-profiles/identity-preview": {
      "post": {
        "operationId": "showGenerateIdentityPreview",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Generate identity profile preview",
        "description": "Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body.\nThis API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body.\nA token with ORG_ADMIN authority is required to call this API to generate an identity preview.",
        "requestBody": {
          "description": "Identity Preview request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityPreviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A preview of the identity attributes after applying identity attributes config sent in request body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityPreviewResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:manage"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}": {
      "get": {
        "operationId": "getIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Get identity profile",
        "description": "Get a single identity profile by ID.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "description": "Identity profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Identity profile object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:read",
              "idn:identity-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "delete": {
        "operationId": "deleteIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Delete identity profile",
        "description": "Delete an identity profile by ID.\nOn success, this endpoint will return a reference to the bulk delete task result.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "description": "Identity profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returns a TaskResult object referencing the bulk delete job created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultSimplified",
                  "description": "An object with a TaskResult reference of the delete job."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:delete"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "patch": {
        "operationId": "updateIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Update identity profile",
        "description": "Update the specified identity profile with this PATCH request. \nA token with ORG_ADMIN authority is required to call this API to update the Identity Profile.\nThese fields cannot be updated:\n* id\n* created\n* modified\n* identityCount\n* identityRefreshRequired\n* Authoritative Source and Identity Attribute Configuration cannot be modified at once.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "description": "Identity profile ID.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "List of identity profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "add-attribute-transform": {
                  "summary": "Add an attribute transform",
                  "value": [
                    {
                      "op": "add",
                      "path": "/identityAttributeConfig/attributeTransforms/0",
                      "value": {
                        "identityAttributeName": "location",
                        "transformDefinition": {
                          "type": "accountAttribute",
                          "attributes": {
                            "sourceName": "Employees",
                            "attributeName": "location",
                            "sourceId": "2c91808878b7d63b0178c66ffcdc4ce4"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated identity profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/default-identity-attribute-config": {
      "get": {
        "operationId": "getDefaultIdentityAttributeConfig",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Default identity attribute config",
        "description": "This returns the default identity attribute config\nA token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "description": "The Identity Profile ID",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "An Identity Attribute Config object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAttributeConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:manage"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/process-identities": {
      "post": {
        "operationId": "syncIdentityProfile",
        "tags": [
          "Identity Profiles"
        ],
        "summary": "Process identities under profile",
        "description": "Process identities under the profile\nThis operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant's timezone to keep your identities synchronized. \nThis should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh.\nThis operation will perform the following activities on all identities under the identity profile.\n1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity's correct manager through manager correlation. 3. Updates the identity's access according to their assigned lifecycle state. 4. Updates the identity's access based on role assignment criteria.\nA token with ORG_ADMIN authority is required to call this API.",
        "externalDocs": {
          "description": "Learn more about manually processing identities here",
          "url": "https://documentation.sailpoint.com/saas/help/setup/identity_processing.html"
        },
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "description": "The Identity Profile ID to be processed",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted status after refresh has launched",
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:identity-profile:read",
              "idn:identity-profile:manage"
            ]
          }
        ]
      }
    },
    "/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}": {
      "get": {
        "operationId": "getLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Get lifecycle state",
        "description": "Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID. \n\nA token with ORG_ADMIN or API authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "schema": {
              "type": "string"
            },
            "example": "2b838de9-db9b-abcf-e646-d4f274ad4238"
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listLifecycleStates",
            "schema": {
              "type": "string"
            },
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested lifecycle state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LifecycleState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateLifecycleStates",
        "tags": [
          "Lifecycle States"
        ],
        "summary": "Update lifecycle state",
        "description": "Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nA token with ORG_ADMIN or API authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "identity-profile-id",
            "description": "Identity Profile ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentityProfiles",
            "schema": {
              "type": "string"
            },
            "example": "2b838de9-db9b-abcf-e646-d4f274ad4238"
          },
          {
            "in": "path",
            "name": "lifecycle-state-id",
            "description": "Lifecycle State ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listLifecycleStates",
            "schema": {
              "type": "string"
            },
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields can be updated:\n* enabled\n* description\n* accountActions\n* accessProfileIds\n* emailNotificationOption\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Updated description!"
                },
                {
                  "op": "replace",
                  "path": "/accessProfileIds",
                  "value": [
                    "2c918087742bab150174407a80f3125e",
                    "2c918087742bab150174407a80f3124f"
                  ]
                },
                {
                  "op": "replace",
                  "path": "/accountActions",
                  "value": [
                    {
                      "action": "ENABLE",
                      "sourceIds": [
                        "2c9180846a2f82fb016a481c1b1560c5",
                        "2c9180846a2f82fb016a481c1b1560cc"
                      ]
                    },
                    {
                      "action": "DISABLE",
                      "sourceIds": [
                        "2c91808869a0c9980169a207258513fb"
                      ]
                    }
                  ]
                },
                {
                  "op": "replace",
                  "path": "/emailNotificationOption",
                  "value": {
                    "notifyManagers": true,
                    "notifyAllAdmins": false,
                    "notifySpecificUsers": false,
                    "emailAddressList": []
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated lifecycle state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LifecycleState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/multihosts": {
      "post": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Create multi-host integration",
        "description": "This API is used to create Multi-Host Integration. Multi-host Integration holds similar types of sources.\n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "createMultiHostIntegration",
        "requestBody": {
          "description": "The specifics of the Multi-Host Integration to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiHostIntegrationsCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiHostIntegrations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:create",
              "idn:sources:create"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "List all existing multi-host integrations",
        "description": "Get a list of Multi-Host Integrations.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getMultiHostIntegrationsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sorters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**",
            "example": "name"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**type**: *in*\n\n**forSubAdminId**: *in*",
            "example": "id eq 2c91808b6ef1d43e016efba0ce470904"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "for-subadmin",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity or SOURCE_SUBADMIN identity.\n\nThe value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID.\n\nA 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.",
            "example": "5168015d32f890ca15812c9180835d2e"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiHostIntegrations"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/types": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "List multi-host integration types",
        "description": "This API endpoint returns the current list of supported Multi-Host Integration types.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getMultihostIntegrationTypes",
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiHostIntegrationTemplateType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/{multihostId}": {
      "post": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Create sources within multi-host integration",
        "description": "This API is used to create sources within Multi-Host Integration. Multi-Host Integration holds similar types of sources.\n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "createSourcesWithinMultiHost",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529c60168cca6f90c1326"
            }
          }
        ],
        "requestBody": {
          "description": "The specifics of the sources to create within Multi-Host Integration.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MultiHostIntegrationsCreateSources"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:create",
              "idn:sources:create"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Get multi-host integration by id",
        "description": "Get an existing Multi-Host Integration. \n\nA token with Org Admin or Multi-Host Integration Admin authority is required to access this endpoint.",
        "operationId": "getMultiHostIntegrations",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529c60168cca6f90c1326"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiHostIntegrations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Delete multi-host integration",
        "description": "Delete an existing Multi-Host Integration by ID.  \n\nA token with Org Admin or Multi Host Admin authority is required to access this endpoint.",
        "operationId": "deleteMultiHost",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of Multi-Host Integration to delete.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529c60168cca6f90c1326"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:delete",
              "idn:sources:delete"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "updateMultiHostSources",
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Update multi-host integration",
        "description": "Update existing sources within Multi-Host Integration.\n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration to update.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "This endpoint allows you to update a Multi-Host Integration.\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "description": "A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902).",
                "items": {
                  "type": "object",
                  "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
                  "required": [
                    "op",
                    "path"
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "add",
                        "replace"
                      ],
                      "example": "replace"
                    },
                    "path": {
                      "type": "string",
                      "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
                      "example": "/description"
                    },
                    "value": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "New description",
                          "title": "string"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "title": "boolean"
                        },
                        {
                          "type": "integer",
                          "example": 300,
                          "title": "integer"
                        },
                        {
                          "type": "object",
                          "title": "object",
                          "example": {
                            "attributes": {
                              "name": "philip"
                            }
                          }
                        },
                        {
                          "type": "array",
                          "title": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object"
                              }
                            ],
                            "example": [
                              "001",
                              "002",
                              "003"
                            ]
                          }
                        }
                      ],
                      "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
                      "example": "New description"
                    }
                  }
                }
              },
              "example": [
                {
                  "op": "add",
                  "path": "/description",
                  "value": "MDK Multi-Host Integration 222 description"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:update"
            ]
          }
        ]
      }
    },
    "/multihosts/{multihostId}/sources/testConnection": {
      "post": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Test configuration for multi-host integration",
        "description": "This endpoint performs a more detailed validation of the Multi-Host Integration's configuration.\n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "testConnectionMultiHostSources",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529c60168cca6f90c1324"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/{multihostId}/sources/{sourceId}/testConnection": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Test configuration for multi-host integration's single source",
        "description": "This endpoint performs a more detailed validation of the source's configuration.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "testSourceConnectionMultihost",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529c60168cca6f90c1326"
            }
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "ID of the source within the Multi-Host Integration",
            "required": true,
            "x-sailpoint-resource-operation-id": "getSourcesWithinMultiHost",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2c91808568c529f60168cca6f90c1324"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Source's test connection status.",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Source's test connection message.",
                      "example": "Tes."
                    },
                    "timing": {
                      "type": "integer",
                      "description": "Source's test connection timing.",
                      "example": 30437
                    },
                    "resultType": {
                      "enum": [
                        "SOURCE_STATE_ERROR_CLUSTER",
                        "SOURCE_STATE_ERROR_SOURCE",
                        "SOURCE_STATE_ERROR_VA",
                        "SOURCE_STATE_FAILURE_CLUSTER",
                        "SOURCE_STATE_FAILURE_SOURCE",
                        "SOURCE_STATE_HEALTHY",
                        "SOURCE_STATE_UNCHECKED_CLUSTER",
                        "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES",
                        "SOURCE_STATE_UNCHECKED_SOURCE",
                        "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS",
                        "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT"
                      ],
                      "description": "Source's human-readable result type.",
                      "example": "SOURCE_STATE_HEALTHY"
                    },
                    "testConnectionDetails": {
                      "type": "string",
                      "description": "Source's human-readable test connection details.",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/{multihostId}/sources": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "List sources within multi-host integration",
        "description": "Get a list of sources within Multi-Host Integration ID.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getSourcesWithinMultiHost",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aMultiHostId"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sorters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**",
            "example": "name"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *in*",
            "example": "id eq 2c91808b6ef1d43e016efba0ce470904"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiHostSources"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/{multiHostId}/sources/errors": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "List multi-host source creation errors",
        "description": "Get a list of sources creation errors within Multi-Host Integration ID.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getMultiHostSourceCreationErrors",
        "parameters": [
          {
            "name": "multiHostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "004091cb79b04636b88662afa50a4440"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceCreationErrors"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:read",
              "idn:sources:read"
            ]
          }
        ]
      }
    },
    "/multihosts/{multihostId}/acctAggregationGroups": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Get account aggregation groups within multi-host integration id",
        "description": "This API will return array of account aggregation groups within provided Multi-Host Integration ID.\n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getAcctAggregationGroups",
        "parameters": [
          {
            "name": "multihostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aMultiHostId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiHostIntegrationsAggScheduleUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:update"
            ]
          }
        ]
      }
    },
    "/multihosts/{multiHostId}/entitlementAggregationGroups": {
      "get": {
        "tags": [
          "Multi-Host Integration"
        ],
        "summary": "Get entitlement aggregation groups within multi-host integration id",
        "description": "This API will return array of aggregation groups within provided Multi-Host Integration ID.  \n\nA token with Org Admin or Multi-Host Admin authority is required to access this endpoint.",
        "operationId": "getEntitlementAggregationGroups",
        "parameters": [
          {
            "name": "multiHostId",
            "in": "path",
            "description": "ID of the Multi-Host Integration to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getMultiHostIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aMultiHostId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiHostIntegrationsAggScheduleUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:multihosts:update"
            ]
          }
        ]
      }
    },
    "/non-employee-records": {
      "post": {
        "operationId": "createNonEmployeeRecord",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create non-employee record",
        "description": "This request will create a non-employee record.\nRequest will require the following security scope:\n'idn:nesr:create'",
        "deprecated": true,
        "requestBody": {
          "description": "Non-Employee record creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listNonEmployeeRecords",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List non-employee records",
        "description": "This gets a list of non-employee records.",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "required": false,
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "accountName,sourceId",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "sourceId eq \"2c91808568c529c60168cca6f90c1313\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**sourceId**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonEmployeeRecord"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-records/{id}": {
      "get": {
        "operationId": "getNonEmployeeRecord",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a non-employee record",
        "description": "This gets a non-employee record.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRecords",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee record object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putNonEmployeeRecord",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Update non-employee record",
        "description": "This request will update a non-employee record.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRecords",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An updated non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchNonEmployeeRecord",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch non-employee record",
        "description": "This request will patch a non-employee record.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-employee record id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRecords",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/endDate",
                  "value": {
                    "2019-08-23T18:40:35.772Z": null
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNonEmployeeRecord",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete non-employee record",
        "description": "This request will delete a non-employee record.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee record id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRecords",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-records/bulk-delete": {
      "post": {
        "operationId": "deleteNonEmployeeRecordInBulk",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete multiple non-employee records",
        "description": "This request will delete multiple non-employee records based on the non-employee ids provided.\nRequest will require the following scope:\n'idn:nesr:delete'",
        "deprecated": true,
        "requestBody": {
          "description": "Non-Employee bulk delete request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "List of non-employee ids.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-requests": {
      "post": {
        "operationId": "createNonEmployeeRequest",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create non-employee request",
        "description": "This request will create a non-employee request and notify the approver",
        "deprecated": true,
        "requestBody": {
          "description": "Non-Employee creation request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee request creation object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "locale": "en",
                          "localeOrigin": "REQUEST",
                          "text": "firstName is required; accountName is required;"
                        }
                      ]
                    }
                  },
                  "400.1.409 Reference conflict": {
                    "description": "Response for reference conflict",
                    "value": {
                      "detailCode": "400.1.409 Reference conflict",
                      "trackingId": "e7eab60924f64aa284175b9fa3309599",
                      "messages": [
                        {
                          "locale": "en",
                          "localeOrigin": "REQUEST",
                          "text": "Unable to create Non-Employee because the accountName \"existed\" is already being used."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listNonEmployeeRequests",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List non-employee requests",
        "description": "This gets a list of non-employee requests.",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "requested-for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "me",
            "description": "The identity for whom the request was made. *me* indicates the current user."
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "approvalStatus,firstName",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "sourceId eq \"2c91808568c529c60168cca6f90c1313\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**sourceId**: *eq*"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee request objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonEmployeeRequest"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/{id}": {
      "get": {
        "operationId": "getNonEmployeeRequest",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a non-employee request",
        "description": "This gets a non-employee request.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "Non-Employee request id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRequests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRequest"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNonEmployeeRequest",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete non-employee request",
        "description": "This request will delete a non-employee request.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee request id in the UUID format",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRequests",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-requests/summary/{requested-for}": {
      "get": {
        "operationId": "getNonEmployeeRequestSummary",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get summary of non-employee requests",
        "description": "This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager's id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "ac10d20a-841e-1e7d-8184-32d2e22c0179",
            "name": "requested-for",
            "description": "The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeRecords",
            "schema": {
              "type": "string",
              "format": "uuid (if user is Org Admin)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee request summary object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeRequestSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources": {
      "post": {
        "operationId": "createNonEmployeeSource",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create non-employee source",
        "description": "Create a non-employee source.",
        "deprecated": true,
        "requestBody": {
          "description": "Non-Employee source creation request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeSourceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created non-employee source.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSourceWithCloudExternalId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listNonEmployeeSources",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List non-employee sources",
        "description": "Get a list of non-employee sources. There are two contextual uses for the `requested-for` path parameter: \n  1. If the user has the role context of `idn:nesr:read`, he or she may request a list sources assigned to a particular account manager by passing in that manager's `id`.\n  2. If the current user is an account manager, the user should provide 'me' as the `requested-for` value. Doing so provide the user with a list of the sources he or she owns.",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "requested-for",
            "required": false,
            "example": "me",
            "schema": {
              "type": "string"
            },
            "description": "Identity the request was made for. Use 'me' to indicate the current user."
          },
          {
            "in": "query",
            "name": "non-employee-count",
            "required": false,
            "example": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Flag that determines whether the API will return a non-employee count associated with the source."
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "name,created",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, sourceId**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-employee source objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonEmployeeSourceWithNECount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}": {
      "get": {
        "operationId": "getNonEmployeeSource",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get a non-employee source",
        "description": "This gets a non-employee source.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "2c91808b7c28b350017c2a2ec5790aa1",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchNonEmployeeSource",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch a non-employee source",
        "description": "patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": {
                    "new name": null
                  }
                },
                {
                  "op": "replace",
                  "path": "/approvers",
                  "value": [
                    "2c91809f703bb37a017040a2fe8748c7",
                    "48b1f463c9e8427db5a5071bd81914b8"
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "A patched non-employee source object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNonEmployeeSource",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete non-employee source",
        "description": "This request will delete a non-employee source.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "description": "Source Id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employees/download": {
      "get": {
        "operationId": "getNonEmployeeExportRecords",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read",
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports non-employee records to csv",
        "description": "This requests a CSV download for all non-employees from a provided source.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported CSV",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\nJon.Smith, Jon, Smith, 555-555-5555, jon@jon.doe.nope.com, Jim Smith, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\nWilliam.Chaffin, William, Chaffin, 555-555-5555, william@chaffins.nope.com, Bertram Chaffin, 2020-04-05T08:00:00-10:00,2020-08-07T19:00:00-10:00\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload": {
      "post": {
        "operationId": "importNonEmployeeRecordsInBulk",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Imports, or updates, non-employee records",
        "description": "This post will import, or update, Non-Employee records found in the CSV.\nRequest will need the following security scope:\n'idn:nesr:create'",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "schema": {
              "type": "string"
            },
            "example": "e136567de87e4d029e60b3c3c55db56d"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The CSV was accepted to be bulk inserted now or at a later time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeBulkUploadJob"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\nThe response body will contain the list of specific errors with one on each line.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/non-employee-bulk-upload/status": {
      "get": {
        "operationId": "getNonEmployeeBulkUploadStatus",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Bulk upload status on source",
        "description": "The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.\n",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Obtain the status of bulk upload on the source](https://developer.sailpoint.com/docs/api/v2025/get-non-employee-bulk-upload-status) for latest API.\n",
        "parameters": [
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "id",
            "description": "Source ID (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the newest bulk-upload job, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeBulkUploadStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{id}/schema-attributes-template/download": {
      "get": {
        "operationId": "getNonEmployeeExportSourceSchemaTemplate",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Exports source schema template",
        "description": "This requests a download for the Source Schema Template for a provided source.\nRequest will require the following security scope:\nidn:nesr:read'",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "id",
            "description": "Source Id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported Source Schema Template",
            "content": {
              "text/csv": {
                "example": "accountName,firstName,lastName,phone,email,manager,startDate,endDate\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals": {
      "get": {
        "operationId": "listNonEmployeeApproval",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List of non-employee approval requests",
        "description": "This gets a list of non-employee approval requests.",
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "example": "ac10d20a-841e-1e7d-8184-32d2e22c0179",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity for whom the request was made. *me* indicates the current user.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "example": "approvalStatus eq \"PENDING\"",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**approvalStatus**: *eq*"
          },
          {
            "in": "query",
            "example": "created",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created, modified**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approval items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonEmployeeApprovalItem"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}": {
      "get": {
        "operationId": "getNonEmployeeApproval",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "A non-employee approval item detail",
        "description": "Approves a non-employee approval request and notifies the next approver.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "example": "ac10d20a-841e-1e7d-8184-32d2e22c0179",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeApprovals",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "example": "include-detail=false",
            "name": "include-detail",
            "description": "The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeApprovalItemDetail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/approve": {
      "post": {
        "operationId": "approveNonEmployeeRequest",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Approve a non-employee request",
        "description": "Approves a non-employee approval request and notifies the next approver.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "x-sailpoint-resource-operation-id": "listNonEmployeeApprovals",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeApprovalDecision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeApprovalItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/{id}/reject": {
      "post": {
        "operationId": "rejectNonEmployeeRequest",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Reject a non-employee request",
        "description": "This endpoint will reject an approval item request and notify user.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Non-Employee approval item id (UUID)",
            "required": true,
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "x-sailpoint-resource-operation-id": "listNonEmployeeApprovals",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeRejectApprovalDecision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Non-Employee approval item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeApprovalItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-approvals/summary/{requested-for}": {
      "get": {
        "operationId": "getNonEmployeeApprovalSummary",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Summary of non-employee approval requests",
        "description": "This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver's id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "ac10d20a-841e-1e7d-8184-32d2e22c0179",
            "name": "requested-for",
            "schema": {
              "type": "string"
            },
            "description": "The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \"me\" instead to indicate the current user.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities"
          }
        ],
        "responses": {
          "200": {
            "description": "summary of non-employee approval requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeApprovalSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes": {
      "get": {
        "operationId": "getNonEmployeeSourceSchemaAttributes",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "List schema attributes non-employee source",
        "description": "This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Schema Attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    {
                      "type": "TEXT",
                      "label": "string",
                      "technicalName": "string",
                      "helpText": "string",
                      "placeholder": "string",
                      "required": true
                    }
                  ],
                  "items": {
                    "$ref": "#/components/schemas/NonEmployeeSchemaAttribute"
                  },
                  "maxItems": 18
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createNonEmployeeSourceSchemaAttributes",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Create non-employee source schema attribute",
        "description": "This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Source id",
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonEmployeeSchemaAttributeBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema Attribute created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSchemaAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNonEmployeeSourceSchemaAttributes",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete all custom schema attributes",
        "description": "This end-point deletes all custom schema attributes for a non-employee source.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "All custon Schema Attributes were successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}": {
      "get": {
        "operationId": "getNonEmployeeSchemaAttribute",
        "security": [
          {
            "userAuth": [
              "idn:nelm:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Get schema attribute non-employee source",
        "description": "This API gets a schema attribute by Id for the specified Non-Employee SourceId.",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getNonEmployeeSourceSchemaAttributes",
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "description": "The Source id"
          }
        ],
        "responses": {
          "200": {
            "description": "The Schema Attribute",
            "content": {
              "application/json": {
                "example": "id,system,modified,created,type,label,technicalName,helpText,placeholder,required\n",
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSchemaAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchNonEmployeeSchemaAttribute",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Patch non-employee source's schema attribute",
        "description": "This end-point patches a specific schema attribute for a non-employee SourceId.\n",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getNonEmployeeSourceSchemaAttributes",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Source id"
          }
        ],
        "requestBody": {
          "description": "A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update ':' 'label', 'helpText', 'placeholder', 'required'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/label",
                  "value": {
                    "new attribute label": null
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Schema Attribute was successfully patched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonEmployeeSchemaAttribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNonEmployeeSchemaAttribute",
        "security": [
          {
            "userAuth": [
              "idn:nelm:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Non-Employee Lifecycle Management"
        ],
        "summary": "Delete non-employee source's schema attribute",
        "description": "This end-point deletes a specific schema attribute for a non-employee source.\n",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "attributeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getNonEmployeeSourceSchemaAttributes",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Schema Attribute Id (UUID)"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listNonEmployeeSources",
            "example": "2c91808b6ef1d43e016efba0ce470904",
            "description": "The Source id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "The Schema Attribute was successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/managed-clients/{id}/status": {
      "get": {
        "tags": [
          "Managed Clients"
        ],
        "summary": "Specified managed client status.",
        "description": "Retrieve Managed Client Status by ID.",
        "deprecated": true,
        "operationId": "getManagedClientStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Managed Client Status to get",
            "required": true,
            "x-sailpoint-resource-operation-id": "getManagedClients",
            "schema": {
              "type": "string",
              "example": "aClientId"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the Managed Client Status to get",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ManagedClientType",
              "example": "VA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with Managed Client Status having the given ID and Type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedClientStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:managed-client-status:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Managed Clients"
        ],
        "summary": "Handle status request from client",
        "description": "Update a status detail passed in from the client",
        "deprecated": true,
        "operationId": "updateManagedClientStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Managed Client Status to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getManagedClients",
            "schema": {
              "type": "string",
              "example": "aClientId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagedClientStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the updated Managed Client Status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedClientStatusAggResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:managed-client-status:manage"
            ]
          }
        ]
      }
    },
    "/managed-clusters/{id}": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Get a specified managedcluster.",
        "description": "Retrieve a ManagedCluster by ID.",
        "deprecated": true,
        "operationId": "getManagedCluster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ManagedCluster to get",
            "required": true,
            "x-sailpoint-resource-operation-id": "getManagedClusters",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with ManagedCluster having the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedCluster"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:remote-client:read",
              "idn:remote-client:manage"
            ]
          }
        ]
      }
    },
    "/managed-clusters/{id}/log-config": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Get managed cluster's log configuration",
        "description": "Get managed cluster's log configuration.",
        "deprecated": true,
        "operationId": "getClientLogConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of ManagedCluster to get log configuration for",
            "required": true,
            "x-sailpoint-resource-operation-id": "getManagedClusters",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log configuration of ManagedCluster matching given cluster ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientLogConfiguration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:remote-client:read",
              "idn:remote-client:manage"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Update managed cluster's log configuration",
        "description": "Update managed cluster's log configuration",
        "deprecated": true,
        "operationId": "putClientLogConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of ManagedCluster to update log configuration for",
            "required": true,
            "x-sailpoint-resource-operation-id": "getManagedClusters",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aClusterId"
            }
          }
        ],
        "requestBody": {
          "description": "ClientLogConfiguration for given ManagedCluster",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientLogConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with updated ClientLogConfiguration for given ManagedCluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientLogConfiguration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:remote-client:manage"
            ]
          }
        ]
      }
    },
    "/managed-clusters": {
      "get": {
        "tags": [
          "Managed Clusters"
        ],
        "summary": "Retrieve all managed clusters.",
        "description": "Retrieve all Managed Clusters for the current Org, based on request context.",
        "deprecated": true,
        "operationId": "getManagedClusters",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**operational**: *eq*",
            "example": "operational eq operation"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a list of ManagedCluster.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedCluster"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:remote-client:read",
              "idn:remote-client:manage"
            ]
          }
        ]
      }
    },
    "/mail-from-attributes": {
      "put": {
        "security": [
          {
            "userAuth": [
              "sp:notification-mail-from-attributes:write"
            ]
          }
        ],
        "operationId": "putMailFromAttributes",
        "tags": [
          "Notifications"
        ],
        "summary": "Change mail from domain",
        "description": "Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller's DNS",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailFromAttributesDto"
              },
              "example": {
                "identity": "BobSmith@sailpoint.com",
                "mailFromDomain": "example.sailpoint.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MAIL FROM Attributes required to verify the change",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailFromAttributes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mail-from-attributes/{identityId}": {
      "get": {
        "security": [
          {
            "userAuth": [
              "sp:notification-mail-from-attributes:read"
            ]
          }
        ],
        "operationId": "getMailFromAttributes",
        "tags": [
          "Notifications"
        ],
        "summary": "Get mail from attributes",
        "description": "Retrieve MAIL FROM attributes for a given AWS SES identity.",
        "parameters": [
          {
            "name": "identityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status",
            "example": "bobsmith@sailpoint.com"
          }
        ],
        "responses": {
          "200": {
            "description": "MAIL FROM Attributes object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailFromAttributes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/okta-verify/config": {
      "get": {
        "operationId": "getMFAOktaConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Configuration of okta mfa method",
        "description": "This API returns the configuration of an Okta MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:read",
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "responses": {
          "200": {
            "description": "The configuration of an Okta MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaOktaConfig"
                },
                "example": {
                  "mfaMethod": "okta-verify",
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "d******Y",
                  "identityAttribute": "email"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setMFAOktaConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Set okta mfa configuration",
        "description": "This API sets the configuration of an Okta MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaOktaConfig"
              },
              "example": {
                "mfaMethod": "okta-verify",
                "enabled": true,
                "host": "www.example.com",
                "accessKey": "dk778Y3QlA5UqocYpdU3rEkzrK2D497y",
                "identityAttribute": "email"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA configuration of an Okta MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaOktaConfig"
                },
                "example": {
                  "mfaMethod": "okta-verify",
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "d******Y",
                  "identityAttribute": "email"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/duo-web/config": {
      "get": {
        "operationId": "getMFADuoConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Configuration of duo mfa method",
        "description": "This API returns the configuration of an Duo MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:read",
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "responses": {
          "200": {
            "description": "The configuration of an Duo MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaDuoConfig"
                },
                "example": {
                  "mfaMethod": "duo-web",
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "d******Y",
                  "identityAttribute": "email",
                  "configProperties": {
                    "skey": "6******B",
                    "ikey": "Q123WE45R6TY7890ZXCV"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setMFADuoConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Set duo mfa configuration",
        "description": "This API sets the configuration of an Duo MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaDuoConfig"
              },
              "example": {
                "mfaMethod": "duo-web",
                "enabled": true,
                "host": "www.example.com",
                "accessKey": "qw123Y3QlA5UqocYpdU3rEkzrK2D497y",
                "identityAttribute": "email",
                "configProperties": {
                  "skey": "12q3WERlcUHWJmiMqyCXI3uOF7EaDJTbdeOp6E2B",
                  "ikey": "Q123WE45R6TY7890ZXCV"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA configuration of an Duo MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaDuoConfig"
                },
                "example": {
                  "mfaMethod": "duo-web",
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "q******y",
                  "identityAttribute": "email",
                  "configProperties": {
                    "skey": "1******B",
                    "ikey": "Q123WE45R6TY7890ZXCV"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/kba/config": {
      "get": {
        "operationId": "getMFAKbaConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Configuration of kba mfa method",
        "description": "This API returns the KBA configuration for MFA.",
        "parameters": [
          {
            "in": "query",
            "name": "allLanguages",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Indicator whether the question text should be returned in all configured languages\n   * If true, the question text is returned in all languages that it is configured in.\n   * If false, the question text is returned in the user locale if available, else for the default locale. \n   * If not passed, it behaves the same way as passing this parameter as false",
            "example": "allLanguages=true"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:mfa-kba:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "USER"
        ],
        "responses": {
          "200": {
            "description": "The configuration for KBA MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KbaQuestion"
                  }
                },
                "example": [
                  {
                    "id": "143cfd3b-c23f-426b-ae5f-d3db06fa5919",
                    "text": "MFA new question -1 ?",
                    "hasAnswer": false,
                    "numAnswers": 0
                  },
                  {
                    "id": "173421",
                    "text": "What is your alphanumeric PIN?",
                    "hasAnswer": false,
                    "numAnswers": 3
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/kba/config/answers": {
      "post": {
        "operationId": "setMFAKBAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Set mfa kba configuration",
        "description": "This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration.    ",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KbaAnswerRequestItem"
                }
              },
              "example": [
                {
                  "id": "173423",
                  "answer": "822cd15d6c15aa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a0859a2fea34"
                },
                {
                  "id": "c54fee53-2d63-4fc5-9259-3e93b9994135",
                  "answer": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
                }
              ]
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:mfa-kba:authenticate"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "USER"
        ],
        "responses": {
          "200": {
            "description": "The new KBA configuration for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KbaAnswerResponseItem"
                  }
                },
                "example": [
                  {
                    "id": "143cfd3b-c23f-426b-ae5f-d3db06fa5919",
                    "question": "[{\"text\":\"Nouvelle question MFA -1 ?\",\"locale\":\"fr\"},{\"text\":\"MFA new question -1 ?\",\"locale\":\"\"}]",
                    "hasAnswer": false
                  },
                  {
                    "id": "173421",
                    "question": "[{\"text\":\"What is your alphanumeric PIN?\",\"locale\":\"\"}]",
                    "hasAnswer": true
                  },
                  {
                    "id": "c54fee53-2d63-4fc5-9259-3e93b9994135",
                    "question": "[{\"text\":\"Nouvelle question MFA - 2 ?\",\"locale\":\"fr\"},{\"text\":\"MFA new question - 2 ?\",\"locale\":\"\"}]",
                    "hasAnswer": true
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/{method}/test": {
      "get": {
        "operationId": "testMFAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Mfa method's test configuration",
        "description": "This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:read",
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify",
              "nullable": false,
              "enum": [
                "okta-verify",
                "duo-web"
              ]
            },
            "required": true,
            "description": "The name of the MFA method. The currently supported method names are 'okta-verify' and 'duo-web'."
          }
        ],
        "responses": {
          "200": {
            "description": "The result of configuration test for the MFA provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaConfigTestResponse"
                },
                "example": {
                  "state": "SUCCESS",
                  "error": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/{method}/delete": {
      "delete": {
        "operationId": "deleteMFAConfig",
        "tags": [
          "MFA Configuration"
        ],
        "summary": "Delete mfa method configuration",
        "description": "This API removes the configuration for the specified MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify",
              "nullable": false,
              "enum": [
                "okta-verify",
                "duo-web"
              ]
            },
            "required": true,
            "description": "The name of the MFA method. The currently supported method names are 'okta-verify' and 'duo-web'."
          }
        ],
        "responses": {
          "200": {
            "description": "MFA configuration of an MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaOktaConfig"
                },
                "example": {
                  "mfaMethod": "okta-verify",
                  "enabled": true,
                  "host": "www.example.com",
                  "accessKey": "d******Y",
                  "identityAttribute": "email"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/okta-verify/verify": {
      "post": {
        "operationId": "sendOktaVerifyRequest",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Verifying authentication via okta method",
        "description": "This API Authenticates the user via Okta-Verify MFA method. Request requires a header called 'slpt-forwarding', and it must contain a remote IP Address of caller.",
        "security": [
          {
            "userAuth": [
              "idn:mfa:verify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OktaVerificationRequest"
              },
              "example": {
                "userId": "example@mail.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The status of verification request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                },
                "example": {
                  "requestId": "089899f13a8f4da7824996191587bab9",
                  "status": "SUCCESS",
                  "error": ""
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/duo-web/verify": {
      "post": {
        "operationId": "sendDuoVerifyRequest",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Verifying authentication via duo method",
        "description": "This API Authenticates the user via Duo-Web MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa:verify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DuoVerificationRequest"
              },
              "example": {
                "userId": "2c9180947f0ef465017f215cbcfd004b",
                "signedResponse": "AUTH|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjUzMDg5|f1f5f8ced5b340f3d303b05d0efa0e43b6a8f970:APP|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjU2NjE5|cb44cf44353f5127edcae31b1da0355f87357db2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The status of verification request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                },
                "example": {
                  "requestId": "089899f13a8f4da7824996191587bab9",
                  "status": "SUCCESS",
                  "error": ""
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/{method}/poll": {
      "post": {
        "operationId": "pingVerificationStatus",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Polling mfa method by verificationpollrequest",
        "description": "This API poll the VerificationPollRequest for the specified MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa:poll"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "method",
            "schema": {
              "type": "string",
              "example": "okta-verify",
              "nullable": false,
              "enum": [
                "okta-verify",
                "duo-web",
                "kba",
                "token",
                "rsa"
              ]
            },
            "required": true,
            "description": "The name of the MFA method. The currently supported method names are 'okta-verify', 'duo-web', 'kba','token', 'rsa'"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationPollRequest"
              },
              "example": {
                "requestId": "089899f13a8f4da7824996191587bab9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA VerificationPollRequest status an MFA method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                },
                "example": {
                  "requestId": "089899f13a8f4da7824996191587bab9",
                  "status": "PENDING",
                  "error": ""
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/kba/authenticate": {
      "post": {
        "operationId": "sendKbaAnswers",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Authenticate kba provided mfa method",
        "description": "This API Authenticate user in KBA MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa-kba:authenticate"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KbaAnswerRequestItem"
                }
              },
              "example": [
                {
                  "id": "173423",
                  "answer": "822cd15d6c15aa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a0859a2fea34"
                },
                {
                  "id": "c54fee53-2d63-4fc5-9259-3e93b9994135",
                  "answer": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "KBA authenticated status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KbaAuthResponse"
                },
                "example": {
                  "kbaAuthResponseItem": [
                    {
                      "questionId": "089899f13a8f4da7824996191587bab9",
                      "IsVerified": false
                    },
                    {
                      "questionId": "089899f13a8f4da7824996191587bda8",
                      "IsVerified": true
                    }
                  ],
                  "status": "PENDING"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/token/authenticate": {
      "post": {
        "operationId": "sendTokenAuthRequest",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Authenticate token provided mfa method",
        "description": "This API Authenticate user in Token MFA method.",
        "security": [
          {
            "userAuth": [
              "idn:mfa:verify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAuthRequest"
              },
              "example": {
                "token": "12345",
                "userAlias": "will.albin",
                "deliveryType": "EMAIL_WORK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token authenticated status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAuthResponse"
                },
                "example": {
                  "status": "PENDING"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mfa/token/send": {
      "post": {
        "operationId": "createSendToken",
        "tags": [
          "MFA Controller"
        ],
        "summary": "Create and send user token",
        "description": "This API send token request.",
        "security": [
          {
            "userAuth": [
              "idn:mfa:send"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTokenRequest"
              },
              "example": {
                "userAlias": "will.albin",
                "deliveryType": "EMAIL_WORK"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token send status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendTokenResponse"
                },
                "example": {
                  "requestId": "089899f13a8f4da7824996191587bab9",
                  "status": "SUCCESS",
                  "errorMessage": ""
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-template-defaults": {
      "get": {
        "operationId": "listNotificationTemplateDefaults",
        "tags": [
          "Notifications"
        ],
        "summary": "List notification template defaults",
        "description": "This lists the default templates used for notifications, such as emails from IdentityNow.",
        "security": [
          {
            "userAuth": [
              "idn:notification-template-defaults:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string",
              "example": "key eq \"cloud_manual_work_item_summary\""
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**key**: *eq, in, sw*\n\n**medium**: *eq, sw*\n\n**locale**: *eq, sw*"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the default template objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDtoDefault"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-templates": {
      "get": {
        "operationId": "listNotificationTemplates",
        "tags": [
          "Notifications"
        ],
        "summary": "List notification templates",
        "description": "This lists the templates that you have modified for your site.",
        "security": [
          {
            "userAuth": [
              "idn:notification-templates:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**key**: *eq, in*\n\n**medium**: *eq*\n\n**locale**: *eq*\n\n**name**: *eq, sw*\n\n**description**: *eq, sw*\n\n**id**: *eq, sw*",
            "example": "medium eq \"EMAIL\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **key, name, medium**",
            "example": "key, -name",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A list of template objects for your site",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createNotificationTemplate",
        "tags": [
          "Notifications"
        ],
        "summary": "Create notification template",
        "description": "This will update notification templates that are available in your tenant. \nNote that you cannot create new templates in your tenant, but you can use this to create custom notifications from existing templates.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.  \nModify the fields you want to change and submit the POST request when ready.\n",
        "security": [
          {
            "userAuth": [
              "idn:notification-templates:create"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A template object for your site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-templates/{id}": {
      "get": {
        "operationId": "getNotificationTemplate",
        "tags": [
          "Notifications"
        ],
        "summary": "Get notification template by id",
        "description": "This gets a template that you have modified for your site by Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Notification Template",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNotificationTemplates",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A template object for your site",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-templates/bulk-delete": {
      "post": {
        "operationId": "deleteNotificationTemplatesInBulk",
        "tags": [
          "Notifications"
        ],
        "summary": "Bulk delete notification templates",
        "description": "This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.",
        "security": [
          {
            "userAuth": [
              "idn:notification-templates:delete"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TemplateBulkDeleteDto"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-clients": {
      "get": {
        "operationId": "listOauthClients",
        "security": [
          {
            "userAuth": [
              "sp:oauth-client:manage"
            ]
          }
        ],
        "tags": [
          "OAuth Clients"
        ],
        "summary": "List oauth clients",
        "description": "This gets a list of OAuth clients.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**lastUsed**: *le, isnull*",
            "example": "lastUsed le 2023-02-05T10:59:27.214Z"
          }
        ],
        "responses": {
          "200": {
            "description": "List of OAuth clients.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOAuthClientResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createOauthClient",
        "security": [
          {
            "userAuth": [
              "sp:oauth-client:manage"
            ]
          }
        ],
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Create oauth client",
        "description": "This creates an OAuth client.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOAuthClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOAuthClientResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-clients/{id}": {
      "get": {
        "operationId": "getOauthClient",
        "security": [
          {
            "userAuth": [
              "sp:oauth-client:manage",
              "sp:oauth-client:read"
            ]
          }
        ],
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Get oauth client",
        "description": "This gets details of an OAuth client.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listOauthClients",
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteOauthClient",
        "security": [
          {
            "userAuth": [
              "sp:oauth-client:manage"
            ]
          }
        ],
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Delete oauth client",
        "description": "This deletes an OAuth client.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listOauthClients",
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchOauthClient",
        "security": [
          {
            "userAuth": [
              "sp:oauth-client:manage"
            ]
          }
        ],
        "tags": [
          "OAuth Clients"
        ],
        "summary": "Patch oauth client",
        "description": "This performs a targeted update to the field(s) of an OAuth client.\nRequest will require a security scope of \n- sp:oauth-client:manage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listOauthClients",
            "description": "The OAuth client id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* tenant\n* businessName\n* homepageUrl\n* name\n* description\n* accessTokenValiditySeconds\n* refreshTokenValiditySeconds\n* redirectUris\n* grantTypes\n* accessType\n* enabled\n* strongAuthSupported\n* claimsSupported\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/strongAuthSupported",
                  "value": true
                },
                {
                  "op": "replace",
                  "path": "/businessName",
                  "value": "acme-solar"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the OAuth client's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthClientResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-config": {
      "get": {
        "operationId": "getOrgConfig",
        "tags": [
          "Org Config"
        ],
        "summary": "Get org configuration settings",
        "security": [
          {
            "userAuth": [
              "idn:org-configs:read",
              "idn:org-configs:manage"
            ]
          }
        ],
        "description": "Get org configuration with only external (org admin) accessible properties for the current org.",
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchOrgConfig",
        "tags": [
          "Org Config"
        ],
        "summary": "Patch an org configuration property",
        "security": [
          {
            "userAuth": [
              "idn:org-configs:manage"
            ]
          }
        ],
        "description": "Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.",
        "requestBody": {
          "description": "A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/timeZone",
                  "value": "America/Toronto"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Org was successfully patched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-config/valid-time-zones": {
      "get": {
        "operationId": "getValidTimeZones",
        "tags": [
          "Org Config"
        ],
        "summary": "Get list of time zones",
        "security": [
          {
            "userAuth": [
              "idn:org-configs:read",
              "idn:org-configs-user:read"
            ]
          }
        ],
        "description": "Get a list of valid time zones that can be set in org configurations.",
        "responses": {
          "200": {
            "description": "Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Etc/GMT-6",
                  "Etc/GMT+8",
                  "EST",
                  "America/Chicago",
                  "America/Toronto",
                  "Asia/Gaza",
                  "Europe/Brussels",
                  "Europe/Kiev"
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/outlier-summaries": {
      "get": {
        "operationId": "getIdentityOutlierSnapshots",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai identity outliers summary",
        "description": "This API returns a summary containing the number of identities that customer has, the number of outliers, and the type of outlier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "example": "LOW_SIMILARITY",
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**snapshotDate**: *ge, le*",
            "example": "snapshotDate ge \"2022-02-07T20:13:29.356648026Z\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **snapshotDate**",
            "example": "snapshotDate",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object is a summary to give high level statistics/counts of outliers.",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutlierSummary"
                  }
                }
              }
            }
          },
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outlier-summaries/latest": {
      "get": {
        "operationId": "getLatestIdentityOutlierSnapshots",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai identity outliers latest summary",
        "description": "This API returns a most recent snapshot of each outlier type, each containing the number of identities that customer has, the number of outliers, and the type of outlier.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "example": "LOW_SIMILARITY",
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object is a summary to give high level statistics/counts of outliers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LatestOutlierSummary"
                  }
                }
              }
            }
          },
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers": {
      "get": {
        "operationId": "getIdentityOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai get identity outliers",
        "description": "This API returns a list of outliers, containing data such as identity ID, outlier type, detection dates, identity attributes, if identity is ignored, and certification information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ],
              "example": "LOW_SIMILARITY"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**attributes**: *eq, sw, co, in*\n\n**firstDetectionDate**: *ge, le*\n\n**certStatus**: *eq*\n\n**ignored**: *eq*\n\n**score**: *ge, le*",
            "example": "attributes.displayName sw \"John\" and certStatus eq \"false\""
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **firstDetectionDate, attributes, score**",
            "example": "attributes.displayName,firstDetectionDate,-score"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object contains information about outliers.",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Outlier"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers/{outlierId}/contributing-features": {
      "get": {
        "operationId": "getPeerGroupOutliersContributingFeatures",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Get identity outlier's contibuting features",
        "description": "This API returns a list of contributing feature objects for a single outlier.\n\nThe object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "include-translation-messages",
            "in": "query",
            "description": "Whether or not to include translation messages object in returned response",
            "required": false,
            "schema": {
              "type": "string",
              "example": "include-translation-messages="
            }
          },
          {
            "in": "path",
            "example": "2c918085842e69ae018432d22ccb212f",
            "name": "outlierId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getIdentityOutliers",
            "description": "The outlier id"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "importance",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **importance**"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns list of objects. Each object contains a feature and metadata about that feature.",
            "headers": {
              "X-Total-Count": {
                "description": "The total result count.",
                "schema": {
                  "type": "integer"
                }
              },
              "accept-language": {
                "description": "The locale to use for translations for displayName and description text",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutlierContributingFeature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers/{outlierId}/feature-details/{contributingFeatureName}/access-items": {
      "get": {
        "operationId": "listOutliersContributingFeatureAccessItems",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Gets a list of access items associated with each identity outlier contributing feature",
        "description": "This API returns a list of the enriched access items associated with each feature filtered by the access item type.\n\nThe object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "path",
            "name": "outlierId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getIdentityOutliers",
            "description": "The outlier id",
            "example": "2c918085842e69ae018432d22ccb212f"
          },
          {
            "in": "path",
            "name": "contributingFeatureName",
            "schema": {
              "type": "string",
              "enum": [
                "radical_entitlement_count",
                "entitlement_count",
                "max_jaccard_similarity",
                "mean_max_bundle_concurrency",
                "single_entitlement_bundle_count",
                "peerless_score"
              ]
            },
            "required": true,
            "description": "The name of contributing feature",
            "example": "entitlement_count"
          },
          {
            "in": "query",
            "name": "accessType",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The type of access item for the identity outlier contributing feature. If not provided, it returns all.",
            "example": "ENTITLEMENT"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "displayName",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **displayName**"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of access items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutliersContributingFeatureAccessItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers/ignore": {
      "post": {
        "operationId": "ignoreIdentityOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai identity outliers ignore",
        "description": "This API receives a list of identity IDs in the request, changes the outliers to be ignored.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of identity IDs to ignore from outlier listing",
                "example": [
                  "897ef96559df40e1baa6bae6b53e7340",
                  "2c918085837fbfb4018384420dac60c3"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers/unignore": {
      "post": {
        "operationId": "unIgnoreIdentityOutliers",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai identity outliers unignore",
        "description": "This API receives a list of identity IDs in the request, changes the outliers to be un-ignored.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of identity IDs to un-ignore from outlier listing",
                "example": [
                  "897ef96559df40e1baa6bae6b53e7340",
                  "2c918085837fbfb4018384420dac60c3"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outliers/export": {
      "get": {
        "operationId": "exportOutliersZip",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Iai identity outliers export",
        "description": "This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported.\n\nColumns will include: identityId, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes).\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the identity outliers snapshot to filter on",
            "required": false,
            "example": "LOW_SIMILARITY",
            "schema": {
              "type": "string",
              "enum": [
                "LOW_SIMILARITY",
                "STRUCTURAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns zip of two CSVs to download. One CSV for ignored outliers and the other for non-ignored outliers.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/outlier-feature-summaries/{outlierFeatureId}": {
      "get": {
        "operationId": "getOutlierContributingFeatureSummary",
        "tags": [
          "IAI Outliers"
        ],
        "summary": "Get identity outlier contibuting feature summary",
        "description": "This API returns a summary of a contributing feature for an identity outlier.\n\nThe object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object.\n",
        "parameters": [
          {
            "in": "path",
            "name": "outlierFeatureId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPeerGroupOutliersContributingFeatures",
            "description": "Contributing feature id",
            "example": "04654b66-7561-4090-94f9-abee0722a1af"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns selected contributing feature summary for an outlier.",
            "headers": {
              "accept-language": {
                "description": "The locale to use for translations",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutlierFeatureSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          },
          {
            "applicationAuth": [
              "iai:outliers:read",
              "iai:outliers:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "REPORT_ADMIN"
        ]
      }
    },
    "/password-dictionary": {
      "get": {
        "operationId": "getPasswordDictionary",
        "tags": [
          "Password Dictionary"
        ],
        "summary": "Get password dictionary",
        "description": "This gets password dictionary for the organization.\nThe password dictionary file can contain lines that are:\n1. comment lines - the first character is '#', can be 128 Unicode codepoints in length, and are ignored during processing\n2. empty lines\n3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines\n4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;\n        maximum length of the line is 128 Unicode codepoints\n\n\nPassword dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).\n  Password dict file must contain UTF-8 characters only.\n\n# Sample password text file\n\n```\n\n# Password dictionary small test file\n\nlocale=en_US\n\n# Password dictionary prohibited words\n\nqwerty\nabcd\naaaaa\npassword\nqazxsws\n\n```",
        "security": [
          {
            "userAuth": [
              "idn:password-dictionary-management:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "responses": {
          "200": {
            "description": "A password dictionary response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putPasswordDictionary",
        "tags": [
          "Password Dictionary"
        ],
        "summary": "Update password dictionary",
        "description": "This updates password dictionary for the organization.\nThe password dictionary file can contain lines that are:\n1. comment lines - the first character is '#', can be 128 Unicode codepoints in length, and are ignored during processing\n2. empty lines\n3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines\n4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;\n        maximum length of the line is 128 Unicode codepoints\n\n\nPassword dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).\n  Password dict file must contain UTF-8 characters only.\n\n# Sample password text file\n\n```\n\n# Password dictionary small test file\n\nlocale=en_US\n\n# Password dictionary prohibited words\n\nqwerty\nabcd\naaaaa\npassword\nqazxsws\n\n```",
        "security": [
          {
            "userAuth": [
              "idn:password-dictionary:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "description": "The password dictionary file to be uploaded.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated."
          },
          "201": {
            "description": "Created."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/query-password-info": {
      "post": {
        "operationId": "queryPasswordInfo",
        "tags": [
          "Password Management"
        ],
        "summary": "Query password info",
        "description": "This API is used to query password related information. \n\nA token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) \nis required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\" \ngrant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) \nor a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow) \ngrant type will **NOT** work on this endpoint, and a `403 Forbidden` response \nwill be returned.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordInfoQueryDTO"
              },
              "example": {
                "userName": "Abby.Smith",
                "sourceName": "My-AD"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordInfo"
                },
                "example": {
                  "identityId": "2c918085744fec4301746f9a5bce4611",
                  "sourceId": "2c918083746f642c01746f9908840111",
                  "publicKeyId": "N2M1OTJiMGEtMDJlZS00ZWU3LTkyYTEtNjA5YmI5NWE3ZWVA",
                  "publicKey": "AIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGFkWi2J75TztpbaPKd36bJnIB3J8gZ6UcoS9oSDYsqBzPpTsfZXYaEf4Y4BKGgJIXmE/lwhwuj7mU1itdZ2qTSNFtnXA8Fn75c3UUkk+h+wdZbkuSmqlsJo3R1OnJkwkJggcAy9Jvk9jlcrNLWorpQ1w9raUvxtvfgkSdq153KxotenQ1HciSyZ0nA/Kw0UaucLnho8xdRowZs11afXGXA9IT9H6D8T6zUdtSxm0nAyH+mluma5LdTfaM50W3l/L8q56Vrqmx2pZIiwdx/0+g3Y++jV70zom0ZBkC1MmSoLMrQYG5OICNjr72f78B2PaGXfarQHqARLjKpMVt9YIQIDAQAB",
                  "accounts": [
                    {
                      "accountId": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com",
                      "accountName": "Abby.Smith"
                    }
                  ],
                  "policies": [
                    "passwordRepeatedChar is 3",
                    "passwordMinAlpha is 1",
                    "passwordMinLength is 5",
                    "passwordMinNumeric is 1"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/set-password": {
      "post": {
        "operationId": "setIdentityPassword",
        "tags": [
          "Password Management"
        ],
        "summary": "Set identity's password",
        "security": [
          {
            "userAuth": [
              "idn:password-change:manage"
            ]
          }
        ],
        "description": "This API is used to set a password for an identity. \n\nAn identity can change their own password (as well as any of their accounts' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).\n\nA token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity's password or the password of any of the identity's accounts. \n\"API authority\" refers to a token that only has the \"client_credentials\" grant type.\n\n>**Note: If you want to set an identity's source account password, you must enable `PASSWORD` as one of the source's features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**\n\nYou can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey). \nTo do so, follow these steps:\n\n1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`. \n\n2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password. \n\n3. Use [Set Identity's Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:\n\n```java\nimport javax.crypto.Cipher;\nimport java.security.KeyFactory;\nimport java.security.PublicKey;\nimport java.security.spec.X509EncodedKeySpec;\nimport java util.Base64;\n\nString encrypt(String publicKey, String toEncrypt) throws Exception {\n  byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);\n  byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));\n  return Base64.getEncoder().encodeToString(encryptedBytes);\n}\n\nprivate byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {\n  PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));\n  String transformation = \"RSA/ECB/PKCS1Padding\";\n  Cipher cipher = Cipher.getInstance(transformation);\n  cipher.init(1, key);\n  return cipher.doFinal(toEncryptBytes);\n}\n```    \n\nIn this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent. \n\nYou can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password. \n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              },
              "example": {
                "identityId": "8a807d4c73c545510173c545f0a002ff",
                "encryptedPassword": "GIAP7TaAg7Y2EJtFojokBDvHQ/iXF3qk0z0+eLusqXMSkEhAfr34GydFLy+BM2uZB94cwbTYKi9rRrCRRdh8610VeqpRDjhuc28nOPYqTJOx09IGJdr8dl4mbhC1f21JCqMBBrFSA4VQQvd6OMVsceoXTjDI0aKahRYNjlMlsOuaIUZeNQxWBydLuR6vYG3qAKEPCzYZbvyYuBUylUWArfqwV4dgwKGDgDkTLBkQU9LVu3rssc+BXaex6l6JcBDiPg7wvKD1G3lZ+BaGrMknbx3j0T2Uivg+HxwTf7PmtAua6O9M7F984c79KM+sYFTU37MAdlWZu/cy+w2DdHVdCg==",
                "publicKeyId": "YWQ2NjQ4MTItZjY0NC00MWExLWFjMjktOGNmMzU3Y2VlNjk2",
                "accountId": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com",
                "sourceId": "8a807d4c73c545510173c545d4b60246"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Reference to the password change.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordChangeResponse"
                },
                "examples": {
                  "Password change is in progress": {
                    "value": {
                      "state": "IN_PROGRESS",
                      "requestId": "089899f13a8f4da7824996191587bab9"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-change-status/{id}": {
      "get": {
        "operationId": "getIdentityPasswordChangeStatus",
        "tags": [
          "Password Management"
        ],
        "summary": "Get password change request status",
        "description": "This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "setPassword"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the password change request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordStatus"
                },
                "example": {
                  "status": "IN_PROCESS",
                  "reqeustId": "089899f13a8f4da7824996191587bab9",
                  "error": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-sync-groups": {
      "get": {
        "operationId": "getPasswordSyncGroups",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Get password sync group list",
        "description": "This API returns a list of password sync groups.",
        "security": [
          {
            "userAuth": [
              "idn:password-sync-group-management:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of password sync groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordSyncGroup"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Create password sync group",
        "description": "This API creates a password sync group based on the specifications provided.",
        "security": [
          {
            "userAuth": [
              "idn:password-sync-group-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordSyncGroup"
              },
              "example": {
                "name": "Password Sync Group 2",
                "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                "sourceIds": [
                  "2c918084660f45d6016617daa9210584",
                  "2c918084660f45d6016617daa9210500"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordSyncGroup"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 2",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-sync-groups/{id}": {
      "get": {
        "operationId": "getPasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Get password sync group by id",
        "description": "This API returns the sync group for the specified ID.",
        "security": [
          {
            "userAuth": [
              "idn:password-sync-group-management:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPasswordSyncGroups",
            "description": "The ID of password sync group to retrieve.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordSyncGroup"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 1",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Update password sync group by id",
        "description": "This API updates the specified password sync group.",
        "security": [
          {
            "userAuth": [
              "idn:password-sync-group-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPasswordSyncGroups",
            "description": "The ID of password sync group to update.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordSyncGroup"
              },
              "example": {
                "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                "name": "Password Sync Group 2",
                "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                "sourceIds": [
                  "2c918084660f45d6016617daa9210584",
                  "2c918084660f45d6016617daa9210500"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password sync group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordSyncGroup"
                },
                "example": {
                  "id": "6881f631-3bd5-4213-9c75-8e05cc3e35dd",
                  "name": "Password Sync Group 2",
                  "passwordPolicyId": "2c91808d744ba0ce01746f93b6204501",
                  "sourceIds": [
                    "2c918084660f45d6016617daa9210584",
                    "2c918084660f45d6016617daa9210500"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deletePasswordSyncGroup",
        "tags": [
          "Password Sync Groups"
        ],
        "summary": "Delete password sync group by id",
        "description": "This API deletes the specified password sync group.",
        "security": [
          {
            "userAuth": [
              "idn:password-sync-group-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPasswordSyncGroups",
            "description": "The ID of password sync group to delete.",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-policies/{id}": {
      "get": {
        "operationId": "getPasswordPolicyById",
        "tags": [
          "Password Policies"
        ],
        "summary": "Get password policy by id",
        "description": "This API returns the password policy for the specified ID.",
        "security": [
          {
            "userAuth": [
              "idn:password-policy:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPasswordPolicies",
            "description": "The ID of password policy to retrieve.",
            "example": "ff808081838d9e9d01838da6a03e0005"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the password policy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicyV3Dto"
                },
                "example": {
                  "description": "Default Password Policy",
                  "id": "2c91808e7d976f3b017d9f5ceae440c8",
                  "name": "Example PP",
                  "dateCreated": 1639056206564,
                  "lastUpdated": 1662385430753,
                  "firstExpirationReminder": 90,
                  "accountIdMinWordLength": 3,
                  "accountNameMinWordLength": 3,
                  "maxLength": 0,
                  "maxRepeatedChars": 4,
                  "minAlpha": 1,
                  "minCharacterTypes": -1,
                  "minLength": 8,
                  "minLower": 0,
                  "minNumeric": 1,
                  "minSpecial": 0,
                  "minUpper": 0,
                  "passwordExpiration": 90,
                  "defaultPolicy": true,
                  "enablePasswdExpiration": false,
                  "requireStrongAuthn": false,
                  "requireStrongAuthOffNetwork": false,
                  "requireStrongAuthUntrustedGeographies": false,
                  "useAccountAttributes": false,
                  "useDictionary": false,
                  "useIdentityAttributes": false,
                  "validateAgainstAccountId": true,
                  "validateAgainstAccountName": true,
                  "sourceIds": [
                    "2c91808382ffee0b01830de154f14034",
                    "2c91808582ffee0c01830de36511405f"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setPasswordPolicy",
        "tags": [
          "Password Policies"
        ],
        "summary": "Update password policy by id",
        "description": "This API updates the specified password policy.",
        "security": [
          {
            "userAuth": [
              "idn:password-policy:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPasswordPolicies",
            "description": "The ID of password policy to update.",
            "example": "ff808081838d9e9d01838da6a03e0007"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordPolicyV3Dto"
              },
              "example": {
                "description": "Password Policy after update.",
                "id": "2c91808e7d976f3b017d9f5ceae440c8",
                "name": "Improved Password Policy",
                "dateCreated": 1639056206564,
                "lastUpdated": 1662385430753,
                "firstExpirationReminder": 90,
                "accountIdMinWordLength": 3,
                "accountNameMinWordLength": 3,
                "maxLength": 0,
                "maxRepeatedChars": 4,
                "minAlpha": 1,
                "minCharacterTypes": -1,
                "minLength": 8,
                "minLower": 0,
                "minNumeric": 1,
                "minSpecial": 0,
                "minUpper": 0,
                "passwordExpiration": 90,
                "defaultPolicy": false,
                "enablePasswdExpiration": false,
                "requireStrongAuthn": false,
                "requireStrongAuthOffNetwork": false,
                "requireStrongAuthUntrustedGeographies": false,
                "useAccountAttributes": false,
                "useDictionary": false,
                "useIdentityAttributes": false,
                "validateAgainstAccountId": true,
                "validateAgainstAccountName": true,
                "sourceIds": [
                  "2c91808382ffee0b01830de154f14034",
                  "2c91808582ffee0c01830de36511405f"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password policy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicyV3Dto"
                },
                "example": {
                  "description": "Password Policy after update.",
                  "id": "2c91808e7d976f3b017d9f5ceae440c8",
                  "name": "Improved Password Policy",
                  "dateCreated": 1639056206564,
                  "lastUpdated": 1662385430753,
                  "firstExpirationReminder": 90,
                  "accountIdMinWordLength": 3,
                  "accountNameMinWordLength": 3,
                  "maxLength": 0,
                  "maxRepeatedChars": 4,
                  "minAlpha": 1,
                  "minCharacterTypes": -1,
                  "minLength": 8,
                  "minLower": 0,
                  "minNumeric": 1,
                  "minSpecial": 0,
                  "minUpper": 0,
                  "passwordExpiration": 90,
                  "defaultPolicy": false,
                  "enablePasswdExpiration": false,
                  "requireStrongAuthn": false,
                  "requireStrongAuthOffNetwork": false,
                  "requireStrongAuthUntrustedGeographies": false,
                  "useAccountAttributes": false,
                  "useDictionary": false,
                  "useIdentityAttributes": false,
                  "validateAgainstAccountId": true,
                  "validateAgainstAccountName": true,
                  "sourceIds": [
                    "2c91808382ffee0b01830de154f14034",
                    "2c91808582ffee0c01830de36511405f"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deletePasswordPolicy",
        "tags": [
          "Password Policies"
        ],
        "summary": "Delete password policy by id",
        "description": "This API deletes the specified password policy.",
        "security": [
          {
            "userAuth": [
              "idn:password-policy:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPasswordPolicies",
            "description": "The ID of password policy to delete.",
            "example": "ff808081838d9e9d01838da6a03e0002"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-policies": {
      "post": {
        "operationId": "createPasswordPolicy",
        "tags": [
          "Password Policies"
        ],
        "summary": "Create password policy",
        "description": "This API creates the specified password policy.",
        "security": [
          {
            "userAuth": [
              "idn:password-policy:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordPolicyV3Dto"
              },
              "example": {
                "description": "New Password Policy with high requirements to password complexity.",
                "id": null,
                "name": "High security Password Policy",
                "dateCreated": 1639056206564,
                "lastUpdated": 1662385430753,
                "firstExpirationReminder": 90,
                "accountIdMinWordLength": 3,
                "accountNameMinWordLength": 3,
                "maxLength": 0,
                "maxRepeatedChars": 4,
                "minAlpha": 1,
                "minCharacterTypes": -1,
                "minLength": 8,
                "minLower": 0,
                "minNumeric": 1,
                "minSpecial": 0,
                "minUpper": 0,
                "passwordExpiration": 90,
                "defaultPolicy": false,
                "enablePasswdExpiration": false,
                "requireStrongAuthn": false,
                "requireStrongAuthOffNetwork": false,
                "requireStrongAuthUntrustedGeographies": false,
                "useAccountAttributes": false,
                "useDictionary": false,
                "useIdentityAttributes": false,
                "validateAgainstAccountId": true,
                "validateAgainstAccountName": true,
                "sourceIds": [
                  "2c91808382ffee0b01830de154f14034",
                  "2c91808582ffee0c01830de36511405f"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password policy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicyV3Dto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listPasswordPolicies",
        "tags": [
          "Password Policies"
        ],
        "summary": "List password policies",
        "description": "This gets list of all Password Policies.\nRequires role of ORG_ADMIN",
        "security": [
          {
            "userAuth": [
              "idn:password-policy:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Password Policies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordPolicyV3Dto"
                  }
                },
                "example": [
                  {
                    "description": "Example Password Policy",
                    "id": "2c91808e7d976f3b017d9f5ceae440c8",
                    "name": "Example PP",
                    "dateCreated": 1639056206564,
                    "lastUpdated": 1662385430753,
                    "firstExpirationReminder": 90,
                    "accountIdMinWordLength": 3,
                    "accountNameMinWordLength": 3,
                    "maxLength": 0,
                    "maxRepeatedChars": 4,
                    "minAlpha": 1,
                    "minCharacterTypes": -1,
                    "minLength": 8,
                    "minLower": 0,
                    "minNumeric": 1,
                    "minSpecial": 0,
                    "minUpper": 0,
                    "passwordExpiration": 90,
                    "defaultPolicy": false,
                    "enablePasswdExpiration": false,
                    "requireStrongAuthn": false,
                    "requireStrongAuthOffNetwork": false,
                    "requireStrongAuthUntrustedGeographies": false,
                    "useAccountAttributes": false,
                    "useDictionary": false,
                    "useIdentityAttributes": false,
                    "validateAgainstAccountId": true,
                    "validateAgainstAccountName": true,
                    "sourceIds": [
                      "2c91808382ffee0b01830de154f14034",
                      "2c91808582ffee0c01830de36511405f"
                    ]
                  },
                  {
                    "description": null,
                    "id": "2c91808780b8b8430180ff7a093f3bf2",
                    "name": "Password Policy 1 test",
                    "dateCreated": 1653553629503,
                    "lastUpdated": null,
                    "firstExpirationReminder": null,
                    "accountIdMinWordLength": -1,
                    "accountNameMinWordLength": -1,
                    "maxLength": 0,
                    "maxRepeatedChars": -1,
                    "minAlpha": 1,
                    "minCharacterTypes": -1,
                    "minLength": 8,
                    "minLower": 0,
                    "minNumeric": 1,
                    "minSpecial": 0,
                    "minUpper": 0,
                    "passwordExpiration": 90,
                    "defaultPolicy": false,
                    "enablePasswdExpiration": false,
                    "requireStrongAuthn": false,
                    "requireStrongAuthOffNetwork": false,
                    "requireStrongAuthUntrustedGeographies": false,
                    "useAccountAttributes": false,
                    "useDictionary": false,
                    "useIdentityAttributes": true,
                    "validateAgainstAccountId": false,
                    "validateAgainstAccountName": false,
                    "sourceIds": []
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/password-org-config": {
      "get": {
        "operationId": "getPasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Get password org config",
        "description": "This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:read'",
        "security": [
          {
            "userAuth": [
              "idn:password-org-config:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOrgConfig"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 9,
                  "digitTokenEnabled": false,
                  "digitTokenLength": 6
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putPasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Update password org config",
        "description": "This API updates the password org config for specified fields. Other fields will keep original value.\nYou must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions. \nRequires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:write'",
        "security": [
          {
            "userAuth": [
              "idn:password-org-config:write"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordOrgConfig"
              },
              "example": {
                "digitTokenEnabled": true,
                "digitTokenDurationMinutes": 12
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOrgConfig"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 12,
                  "digitTokenEnabled": true,
                  "digitTokenLength": 6
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPasswordOrgConfig",
        "tags": [
          "Password Configuration"
        ],
        "summary": "Create password org config",
        "description": "This API creates the password org config. Unspecified fields will use default value.\nTo be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\".\nRequires ORG_ADMIN, API role or authorization scope of 'idn:password-org-config:write'",
        "security": [
          {
            "userAuth": [
              "idn:password-org-config:write"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordOrgConfig"
              },
              "example": {
                "customInstructionsEnabled": true,
                "digitTokenEnabled": true,
                "digitTokenDurationMinutes": 12,
                "digitTokenLength": 9
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the password org config.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOrgConfig"
                },
                "example": {
                  "customInstructionsEnabled": true,
                  "digitTokenDurationMinutes": 9,
                  "digitTokenEnabled": true,
                  "digitTokenLength": 12
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/peer-group-strategies/{strategy}/identity-outliers": {
      "get": {
        "operationId": "getPeerGroupOutliers",
        "tags": [
          "IAI Peer Group Strategies"
        ],
        "summary": "Identity outliers list",
        "deprecated": true,
        "description": "-- Deprecated : See 'IAI Outliers' This API will be used by Identity Governance systems to identify identities that are not included in an organization's peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.",
        "parameters": [
          {
            "in": "path",
            "name": "strategy",
            "schema": {
              "type": "string",
              "enum": [
                "entitlement"
              ]
            },
            "required": true,
            "description": "The strategy used to create peer groups. Currently, 'entitlement' is supported.",
            "example": "entitlement"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities that are not included in peer groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeerGroupMember"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": []
          }
        ]
      }
    },
    "/personal-access-tokens": {
      "get": {
        "operationId": "listPersonalAccessTokens",
        "security": [
          {
            "userAuth": [
              "sp:my-personal-access-tokens:read",
              "sp:my-personal-access-tokens:manage",
              "sp:all-personal-access-tokens:read",
              "sp:all-personal-access-tokens:manage"
            ]
          }
        ],
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "List personal access tokens",
        "description": "This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the 'idn:all-personal-access-tokens:read' right.",
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "description": "The identity ID of the owner whose personal access tokens should be listed.  If \"me\", the caller should have the following right: 'idn:my-personal-access-tokens:read'\nIf an actual owner ID or if the `owner-id` parameter is omitted in the request,  the caller should have the following right: 'idn:all-personal-access-tokens:read'. \nIf the caller has the following right, then managed personal access tokens associated with `owner-id` will be retrieved: 'idn:managed-personal-access-tokens:read'",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "example": "2c9180867b50d088017b554662fb281e"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**lastUsed**: *le, isnull*",
            "example": "lastUsed le 2023-02-05T10:59:27.214Z"
          }
        ],
        "responses": {
          "200": {
            "description": "List of personal access tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPersonalAccessTokenResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createPersonalAccessToken",
        "security": [
          {
            "userAuth": [
              "sp:my-personal-access-tokens:manage",
              "sp:all-personal-access-tokens:manage"
            ]
          }
        ],
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Create personal access token",
        "description": "This creates a personal access token.",
        "requestBody": {
          "description": "Name and scope of personal access token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonalAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created. Note - this is the only time Personal Access Tokens' secret attribute will be displayed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonalAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}": {
      "patch": {
        "operationId": "patchPersonalAccessToken",
        "security": [
          {
            "userAuth": [
              "sp:my-personal-access-tokens:manage"
            ]
          }
        ],
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Patch personal access token",
        "description": "This performs a targeted update to the field(s) of a Personal Access Token.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPersonalAccessTokens",
            "description": "The Personal Access Token id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* scope\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "New name"
                },
                {
                  "op": "replace",
                  "path": "/scope",
                  "value": [
                    "sp:scopes:all"
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the PAT's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonalAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deletePersonalAccessToken",
        "security": [
          {
            "userAuth": [
              "sp:my-personal-access-tokens:manage",
              "sp:all-personal-access-tokens:manage"
            ]
          }
        ],
        "tags": [
          "Personal Access Tokens"
        ],
        "summary": "Delete personal access token",
        "description": "This deletes a personal access token.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listPersonalAccessTokens",
            "description": "The personal access token id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/public-identities-config": {
      "get": {
        "operationId": "getPublicIdentityConfig",
        "tags": [
          "Public Identities Config"
        ],
        "summary": "Get public identity config",
        "description": "This gets details of public identity config.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Get Public Identity Config](https://developer.sailpoint.com/docs/api/v2025/get-public-identity-config/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:public-identity-config:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIdentityConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "updatePublicIdentityConfig",
        "tags": [
          "Public Identities Config"
        ],
        "summary": "Update public identity config",
        "description": "This updates the details of public identity config.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Update Public Identity Config](https://developer.sailpoint.com/docs/api/v2025/update-public-identity-config/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:public-identity-config:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicIdentityConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIdentityConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-template-context": {
      "get": {
        "operationId": "getNotificationsTemplateContext",
        "tags": [
          "Notifications"
        ],
        "summary": "Get notification template context",
        "description": "The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes\n that will be available per tenant (organization).",
        "security": [
          {
            "userAuth": [
              "idn:notification-templates:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Notification template context attributes for a specific tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateContext"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/notification-preferences/{key}": {
      "get": {
        "operationId": "listNotificationPreferences",
        "tags": [
          "Notifications"
        ],
        "summary": "List notification preferences for tenant.",
        "description": "Returns a list of notification preferences for tenant.",
        "security": [
          {
            "userAuth": [
              "idn:notification-preferences:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "x-sailpoint-resource-operation-id": "listNotificationPreferences",
            "example": "cloud_manual_work_item_summary",
            "schema": {
              "type": "string"
            },
            "description": "The notification key."
          }
        ],
        "responses": {
          "200": {
            "description": "Return preference for the given notification key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PreferencesDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations/types": {
      "get": {
        "operationId": "getReassignmentConfigTypes",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "List reassignment config types",
        "description": "Gets a collection of types which are available in the Reassignment Configuration UI.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of Reassignment Configuration Types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations": {
      "get": {
        "operationId": "listReassignmentConfigurations",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "List reassignment configurations",
        "description": "Gets all Reassignment configuration for the current org.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 20,
              "default": 20
            },
            "example": 20
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reassignment Configurations for an org",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createReassignmentConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Create a reassignment configuration",
        "description": "Creates a new Reassignment Configuration for the specified identity.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:create"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created Reassignment Configuration object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItemResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations/{identityId}": {
      "get": {
        "operationId": "getReassignmentConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Get reassignment configuration",
        "description": "Gets the Reassignment Configuration for an identity.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:read"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "description": "unique identity id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "example": "2c91808781a71ddb0181b9090b5c504f"
          }
        ],
        "responses": {
          "200": {
            "description": "Reassignment Configuration for an identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putReassignmentConfig",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Update reassignment configuration",
        "description": "Replaces existing Reassignment configuration for an identity with the newly provided configuration.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "description": "unique identity id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "example": "2c91808781a71ddb0181b9090b5c504e"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reassignment Configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItemResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations/{identityId}/{configType}": {
      "delete": {
        "operationId": "deleteReassignmentConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Delete reassignment configuration",
        "description": "Deletes a single reassignment configuration for the specified identity",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:delete"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "schema": {
              "type": "string"
            },
            "description": "unique identity id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "example": "2c91808781a71ddb0181b9090b5c504e"
          },
          {
            "in": "path",
            "name": "configType",
            "schema": {
              "$ref": "#/components/schemas/ConfigTypeEnum"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Reassignment Configuration deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations/{identityId}/evaluate/{configType}": {
      "get": {
        "operationId": "getEvaluateReassignmentConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Evaluate reassignment configuration",
        "description": "Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-configuration:evaluate"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "identityId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listIdentities",
            "schema": {
              "type": "string"
            },
            "description": "unique identity id",
            "example": "2c91808781a71ddb0181b9090b5c504e"
          },
          {
            "in": "path",
            "name": "configType",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ConfigTypeEnum"
            },
            "description": "Reassignment work type",
            "example": "accessRequests"
          },
          {
            "in": "query",
            "name": "exclusionFilters",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - `SELF_REVIEW_DELEGATION`: This will exclude delegations of self-review reassignments",
            "example": "SELF_REVIEW_DELEGATION"
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluated Reassignment Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluateResponse"
                  }
                },
                "examples": {
                  "empty": {
                    "$ref": "#/components/examples/evaluateEmpty"
                  },
                  "longTrail": {
                    "$ref": "#/components/examples/evaluateLong"
                  },
                  "selfReview": {
                    "$ref": "#/components/examples/evaluateSelfReview"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reassignment-configurations/tenant-config": {
      "get": {
        "operationId": "getTenantConfigConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Get tenant-wide reassignment configuration settings",
        "description": "Gets the global Reassignment Configuration settings for the requestor's tenant.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-tenant-configuration:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant-wide Reassignment Configuration settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putTenantConfiguration",
        "tags": [
          "Work Reassignment"
        ],
        "summary": "Update tenant-wide reassignment configuration settings",
        "description": "Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.",
        "security": [
          {
            "userAuth": [
              "idn:reassignment-tenant-configuration:update"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantConfigurationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant-wide Reassignment Configuration settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigurationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recommendations/request": {
      "post": {
        "operationId": "getRecommendations",
        "summary": "Returns recommendation based on object",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The recommendations for a customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponseDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:decisions:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ]
      }
    },
    "/recommendations/config": {
      "get": {
        "operationId": "getRecommendationsConfig",
        "summary": "Get certification recommendation config values",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "Retrieves configuration attributes used by certification recommendations.",
        "responses": {
          "200": {
            "description": "Cert recommendation configuration attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationConfigDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:configuration:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "put": {
        "operationId": "updateRecommendationsConfig",
        "summary": "Update certification recommendation config values",
        "tags": [
          "IAI Recommendations"
        ],
        "description": "Updates configuration attributes used by certification recommendations.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cert recommendation configuration attributes after update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationConfigDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:configuration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/requestable-objects": {
      "get": {
        "operationId": "listRequestableObjects",
        "tags": [
          "Requestable Objects"
        ],
        "summary": "Requestable objects list",
        "security": [
          {
            "userAuth": [
              "idn:requestable-objects:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "Get a list of acccess items that can be requested through the [Access Request endpoints](https://developer.sailpoint.com/docs/api/v3/access-requests). Access items are marked with `AVAILABLE`, `PENDING` or `ASSIGNED` with respect to the identity provided using `identity-id` query parameter.\nThis endpoint only lists roles and access profiles. For gathering requestable entitlements, the [Entitlements List API](https://developer.sailpoint.com/docs/api/v2025/list-entitlements) can be used with the segmented-for-identity parameter.\nAny authenticated token can call this endpoint to see their requestable access items.",
        "parameters": [
          {
            "in": "query",
            "name": "identity-id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "e7eab60924f64aa284175b9fa3309599",
            "description": "If present, the value returns only requestable objects for the specified identity.\n * Admin users can call this with any identity ID value.\n * Non-admin users can only specify *me* or pass their own identity ID value.\n * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result."
          },
          {
            "in": "query",
            "name": "types",
            "description": "Filters the results to the specified type/types, where each type is one of `ROLE` or `ACCESS_PROFILE`. If absent, all types are returned. SailPoint may add support for additional types in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCESS_PROFILE",
                  "ROLE"
                ],
                "description": "Currently supported requestable object types."
              }
            },
            "example": "ACCESS_PROFILE,ROLE",
            "explode": false
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Finance Role",
            "description": "Allows searching requestable access items with a partial match on the name or description. If `term` is provided, then the API will ignore the `filter` query parameter."
          },
          {
            "in": "query",
            "name": "statuses",
            "description": "Filters the result to the specified status/statuses, where each status is one of `AVAILABLE`, `ASSIGNED`, or `PENDING`. Specifying this parameter without also specifying an `identity-id` parameter results in an error.  SailPoint may add additional statuses in the future without notice.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestableObjectRequestStatus"
              }
            },
            "explode": false,
            "example": [
              "ASSIGNED",
              "PENDING"
            ]
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "name sw \"bob\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*\n",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "required": false,
            "example": "name",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**\n"
          }
        ],
        "responses": {
          "200": {
            "description": "List of requestable objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestableObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/requests": {
      "post": {
        "operationId": "createRoleInsightRequests",
        "summary": "Generate insights for roles",
        "deprecated": true,
        "tags": [
          "Role Insights"
        ],
        "description": "Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.",
        "responses": {
          "201": {
            "description": "Submitted a role insights generation request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInsightsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/requests/{id}": {
      "get": {
        "operationId": "getRoleInsightsRequests",
        "summary": "Returns metadata from prior request.",
        "deprecated": true,
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns details of a prior role insights request. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insights request id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns details of an earlier role insights request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInsightsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/summary": {
      "get": {
        "operationId": "getRoleInsightsSummary",
        "summary": "Get role insights summary information",
        "tags": [
          "Role Insights"
        ],
        "description": "This method returns high level summary information for role insights for a customer.",
        "responses": {
          "200": {
            "description": "Succeeded. Returns high level counts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInsightsSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights": {
      "get": {
        "operationId": "getRoleInsights",
        "summary": "Get role insights",
        "tags": [
          "Role Insights"
        ],
        "description": "This method returns detailed role insights for each role.",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "sorters",
            "in": "query",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**",
            "example": "numberOfUpdates",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**ownerName**: *sw*\n\n**description**: *sw*",
            "required": false,
            "style": "form",
            "explode": true,
            "example": "name sw \"John\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of roles with information about insights for each role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleInsight"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}": {
      "get": {
        "operationId": "getRoleInsight",
        "summary": "Get a single role insight",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint gets role insights information for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns information about insights for a single role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInsight"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes": {
      "get": {
        "operationId": "getRoleInsightsEntitlementsChanges",
        "summary": "Get entitlement insights for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns entitlement insights for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **identitiesWithAccess, name**",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**description**: *sw*",
            "required": false,
            "style": "form",
            "example": "name sw \"Admin\"",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of entitlements to be added for a role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleInsightsEntitlementChanges"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes/download": {
      "get": {
        "operationId": "downloadRoleInsightsEntitlementsChanges",
        "summary": "Download entitlement insights for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint returns the entitlement insights for a role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **identitiesWithAccess**\n\nThe default sort is **identitiesWithAccess** in descending order.",
            "required": false,
            "example": "identitiesWithAccess",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**description**: *sw*",
            "example": "name sw \"r\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a csv file containing a list of entitlements to be added for a role.",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/current-entitlements": {
      "get": {
        "operationId": "getRoleInsightsCurrentEntitlements",
        "summary": "Get current entitlement for a role",
        "tags": [
          "Role Insights"
        ],
        "description": "This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*\n\n**description**: *sw*",
            "example": "name sw \"r\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of current or pre-existing entitlements for a role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleInsightsEntitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-insights/{insightId}/entitlement-changes/{entitlementId}/identities": {
      "get": {
        "operationId": "getEntitlementChangesIdentities",
        "summary": "Get identities for a suggested entitlement (for a role)",
        "tags": [
          "Role Insights"
        ],
        "description": "Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.",
        "parameters": [
          {
            "in": "path",
            "name": "insightId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleInsights",
            "description": "The role insight id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listEntitlements",
            "description": "The entitlement id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "hasEntitlement",
            "description": "Identity has this entitlement or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**",
            "example": "name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*",
            "example": "name sw \"Jan\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of identities with or without the entitlement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleInsightsIdentities"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions": {
      "post": {
        "operationId": "createRoleMiningSessions",
        "summary": "Create a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This submits a create role mining session request to the role mining application.",
        "requestBody": {
          "description": "Role mining session parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMiningSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submitted a role mining session request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningSessionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getRoleMiningSessions",
        "summary": "Retrieves all role mining sessions",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "Returns all role mining sessions that match the query parameters",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**saved**: *eq*\n\n**name**: *eq, sw*",
            "example": "saved eq \"true\" and name sw \"RM Session\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **createdBy, createdDate**",
            "example": "createdBy,createdDate"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns all role mining sessions that match the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningSessionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}": {
      "patch": {
        "operationId": "patchRoleMiningSession",
        "summary": "Patch a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id to be patched",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/pruneThreshold",
                  "value": "83"
                },
                {
                  "op": "replace",
                  "path": "/minNumIdentitiesInPotentialRole",
                  "value": "10"
                },
                {
                  "op": "replace",
                  "path": "/saved",
                  "value": "false"
                },
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "RM Session - 07/10/22"
                },
                {
                  "op": "add",
                  "path": "/name",
                  "value": "RM Session - 07/10/22"
                }
              ]
            }
          }
        },
        "responses": {
          "202": {
            "description": "Success",
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "getRoleMiningSession",
        "summary": "Get a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "The method retrieves a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id to be retrieved.",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a role mining session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningSessionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/status": {
      "get": {
        "operationId": "getRoleMiningSessionStatus",
        "summary": "Get role mining session status state",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns a role mining session status for a customer.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns session status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningSessionStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries": {
      "get": {
        "operationId": "getPotentialRoleSummaries",
        "summary": "Retrieve session's potential role summaries",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns the potential role summaries for a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **createdDate**",
            "example": "createdDate"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**createdById**: *eq, sw, co*\n\n**createdByName**: *eq, sw, co*\n\n**description**: *sw, co*\n\n**endDate**: *le, lt*\n\n**freshness**: *eq, ge, gt, le, lt*\n\n**name**: *eq, sw, co*\n\n**quality**: *eq, ge, gt, le, lt*\n\n**startDate**: *ge, gt*\n\n**saved**: *eq*\n\n**type**: *eq*",
            "example": "(createdByName co \"int\")and (createdById sw \"2c9180907\")and (type eq \"COMMON\")and ((name co \"entt\")or (saved eq true))",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential role summaries for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRoleSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}": {
      "get": {
        "operationId": "getPotentialRole",
        "summary": "Retrieve potential role in session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns a specific potential role for a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchPotentialRole",
        "summary": "Update a potential role in session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method updates an existing potential role using the role mining session id and the potential role summary id.\n\nThe following fields can be modified:\n\n* `description`\n\n* `name`\n\n* `saved`\n\n\n>**NOTE: All other fields cannot be modified.**\n",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "The potential role summary id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JsonPatchOperation"
                    }
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "remove",
                        "replace"
                      ],
                      "example": "replace"
                    }
                  }
                }
              },
              "example": [
                {
                  "op": "remove",
                  "path": "/description"
                },
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Acct I - Potential Role"
                },
                {
                  "op": "remove",
                  "path": "/saved"
                },
                {
                  "op": "replace",
                  "path": "/saved",
                  "value": "false"
                },
                {
                  "op": "remove",
                  "path": "/name"
                },
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "Potential Role Accounting"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded. Returns the potential role summary based on the potentialRoleId provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRole"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/applications": {
      "get": {
        "operationId": "getPotentialRoleApplications",
        "summary": "Retrieves the applications of a potential role for a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns the applications of a potential role for a role mining session.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**applicationName**: *sw*",
            "example": "applicationName sw \"test\""
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "62f28d91-7d9f-4d17-be15-666d5b41d77f"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRoleApplication"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:access-modeling:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/entitlements": {
      "get": {
        "operationId": "getPotentialRoleEntitlements",
        "summary": "Retrieves the entitlements of a potential role for a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns the entitlements of a potential role for a role mining session.",
        "parameters": [
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**entitlementRef.name**: *sw*",
            "example": "entitlementRef.name sw \"test\""
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "62f28d91-7d9f-4d17-be15-666d5b41d77f"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns the entitlements of a potential role for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRoleEntitlements"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:access-modeling:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularities": {
      "get": {
        "operationId": "getEntitlementsPotentialRole",
        "summary": "Retrieves entitlements for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns entitlements for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "includeCommonAccess",
            "description": "Boolean determining whether common access entitlements will be included or not",
            "example": true,
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **popularity, entitlementName, applicationName**\n\nThe default sort is **popularity** in descending order. ",
            "example": "popularity",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**applicationName**: *sw*\n\n**entitlementRef.name**: *sw*",
            "example": "applicationName sw \"AD\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of entitlements for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningEntitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": []
          }
        ]
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularity-distribution": {
      "get": {
        "operationId": "getEntitlementDistributionPotentialRole",
        "summary": "Retrieves entitlement popularity distribution for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns entitlement popularity distribution for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "includeCommonAccess",
            "description": "Boolean determining whether common access entitlements will be included or not",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a map containing entitlement popularity distribution for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/edit-entitlements": {
      "post": {
        "operationId": "updateEntitlementsPotentialRole",
        "summary": "Edit entitlements for a potential role to exclude some entitlements",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint adds or removes entitlements from an exclusion list for a potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "description": "Role mining session parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMiningPotentialRoleEditEntitlements"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Adds or removes entitlements from a potential role's entitlement exclusion list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/identities": {
      "get": {
        "operationId": "getIdentitiesPotentialRole",
        "summary": "Retrieves identities for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns identities for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**",
            "required": false,
            "style": "form",
            "explode": true,
            "example": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *sw*",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of identities for a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningIdentity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export": {
      "get": {
        "operationId": "exportRoleMiningPotentialRole",
        "summary": "Export (download) details for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a zip file containing csv files for identities and entitlements for the potential role.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async": {
      "post": {
        "operationId": "exportRoleMiningPotentialRoleAsync",
        "summary": "Asynchronously export details for a potential role in a role mining session and upload to s3",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMiningPotentialRoleExportRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Job Submitted. Returns a reportId that can be used to download the zip once complete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRoleExportResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}": {
      "get": {
        "operationId": "exportRoleMiningPotentialRoleStatus",
        "summary": "Retrieve status of a potential role export job",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint retrieves information about the current status of a potential role export.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          },
          {
            "in": "path",
            "name": "exportId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "exportRoleMiningPotentialRole",
            "description": "The id of a previously run export job for this potential role",
            "example": "4940ffd4-836f-48a3-b2b0-6d498c3fdf40"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the current status of this export",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRoleExportResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}/download": {
      "get": {
        "operationId": "downloadRoleMiningPotentialRoleZip",
        "summary": "Export (download) details for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This endpoint downloads a completed export of information for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "278359a6-04b7-4669-9468-924cf580964a"
          },
          {
            "in": "path",
            "name": "exportId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "exportRoleMiningPotentialRole",
            "description": "The id of a previously run export job for this potential role",
            "example": "4940ffd4-836f-48a3-b2b0-6d498c3fdf40"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a zip file containing csv files for identities and entitlements for the potential role.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/provision": {
      "post": {
        "operationId": "createPotentialRoleProvisionRequest",
        "summary": "Create request to provision a potential role into an actual role.",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method starts a job to provision a potential role",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "min-entitlement-popularity",
            "description": "Minimum popularity required for an entitlement to be included in the provisioned role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "include-common-access",
            "description": "Boolean determining whether common access entitlements will be included in the provisioned role.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "Required information to create a new role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMiningPotentialRoleProvisionRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. Returns a potential role summary including the status of the provison request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRoleSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/excluded-entitlements": {
      "get": {
        "operationId": "getExcludedEntitlementsPotentialRole",
        "summary": "Retrieves excluded entitlements for a potential role in a role mining session",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns excluded entitlements for a potential role in a role mining session.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getRoleMiningSessions",
            "description": "The role mining session id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id in a role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          {
            "in": "query",
            "name": "sorters",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **popularity**",
            "example": "populariity",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**applicationName**: *sw*\n\n**entitlementRef.name**: *sw*",
            "example": "applicationName sw \"AD\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of excluded entitlements for a potential roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningEntitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-potential-roles": {
      "get": {
        "operationId": "getAllPotentialRoleSummaries",
        "summary": "Retrieves all potential role summaries",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "Returns all potential role summaries that match the query parameters",
        "security": [
          {
            "userAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**",
            "example": "createdDate"
          },
          {
            "in": "query",
            "name": "filters",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**createdById**: *eq, sw, co*\n\n**createdByName**: *eq, sw, co*\n\n**description**: *sw, co*\n\n**endDate**: *le, lt*\n\n**freshness**: *eq, ge, gt, le, lt*\n\n**name**: *eq, sw, co, ge, gt, le, lt*\n\n**quality**: *eq, ge, gt, le, lt*\n\n**startDate**: *ge, gt*\n\n**saved**: *eq*\n\n**type**: *eq, ge, gt, le, lt*\n\n**scopingMethod**: *eq*\n\n**sessionState**: *eq*\n\n**identityAttribute**: *co*",
            "example": "(createdByName co \"int\") and (createdById sw \"2c9180907\") and (type eq \"COMMON\") and ((name co \"entt\") or (saved eq true))",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns all potential role summaries that match the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRoleSummary"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-potential-roles/{potentialRoleId}": {
      "get": {
        "operationId": "getRoleMiningPotentialRole",
        "summary": "Retrieves a specific potential role",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns a specific potential role.",
        "security": [
          {
            "userAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of potential roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMiningPotentialRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchRoleMiningPotentialRole",
        "summary": "Update a potential role",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method updates an existing potential role.\n\nThe following fields can be modified:\n\n* `description`\n\n* `name`\n\n* `saved`\n\n\n>**NOTE: All other fields cannot be modified.**\n",
        "security": [
          {
            "userAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "The potential role summary id",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/JsonPatchOperation"
                    }
                  ],
                  "properties": {
                    "op": {
                      "type": "string",
                      "description": "The operation to be performed",
                      "enum": [
                        "remove",
                        "replace"
                      ],
                      "example": "replace"
                    }
                  }
                }
              },
              "example": [
                {
                  "op": "remove",
                  "path": "/description"
                },
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "Acct I - Potential Role"
                },
                {
                  "op": "remove",
                  "path": "/saved"
                },
                {
                  "op": "replace",
                  "path": "/saved",
                  "value": "false"
                },
                {
                  "op": "remove",
                  "path": "/name"
                },
                {
                  "op": "replace",
                  "path": "/name",
                  "value": "Potential Role Accounting"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succeeded. Returns the potential role summary based on the potentialRoleId provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRole"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-potential-roles/saved": {
      "get": {
        "operationId": "getSavedPotentialRoles",
        "summary": "Retrieves all saved potential roles",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns all saved potential roles (draft roles).",
        "security": [
          {
            "userAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**",
            "example": "modified"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of draft roles for a role mining session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningSessionDraftRoleDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/role-mining-potential-roles/{potentialRoleId}/sources/{sourceId}/identityUsage": {
      "get": {
        "operationId": "getPotentialRoleSourceIdentityUsage",
        "summary": "Retrieves potential role source usage",
        "tags": [
          "IAI Role Mining"
        ],
        "description": "This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.",
        "security": [
          {
            "userAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "potentialRoleId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getPotentialRoleSummaries",
            "description": "A potential role id",
            "example": "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
          },
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "A source id",
            "example": "2c9180877620c1460176267f336a106f"
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**",
            "example": "-usageCount"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Succeeded. Returns a list of source usage for the identities in a potential role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleMiningPotentialRoleSourceUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "operationId": "listRoles",
        "tags": [
          "Roles"
        ],
        "summary": "List roles",
        "description": "This API returns a list of Roles.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "description": "If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity's ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.",
            "example": "5168015d32f890ca15812c9180835d2e",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit50"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**created**: *gt, ge, le*\n\n**modified**: *lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**requestable**: *eq*\n\n**dimensional**: *eq*",
            "example": "requestable eq false",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          },
          {
            "in": "query",
            "name": "for-segment-ids",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.\n\nIf segmentation is currently unavailable, specifying this parameter results in an error.",
            "example": "0b5c9f25-83c6-4762-9073-e38f7bb2ae26,2e8d8180-24bc-4d21-91c6-7affdb473b0d",
            "required": false
          },
          {
            "in": "query",
            "name": "include-unsegmented",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.",
            "example": false,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:read",
              "idn:role-unchecked:manage",
              "idn:role-checked:manage",
              "idn:role-checked:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      },
      "post": {
        "operationId": "createRole",
        "tags": [
          "Roles"
        ],
        "summary": "Create a role",
        "description": "This API creates a role.\n\nYou must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API. \n\nIn addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves. \n\nThe maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:manage",
              "idn:role-checked:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "getRole",
        "tags": [
          "Roles"
        ],
        "summary": "Get a role",
        "description": "This API returns a Role by its ID.\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listRoles",
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role",
            "example": "2c91808a7813090a017814121e121518"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:read",
              "idn:role-unchecked:manage",
              "idn:role-checked:manage",
              "idn:role-checked:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      },
      "patch": {
        "operationId": "patchRole",
        "tags": [
          "Roles"
        ],
        "summary": "Patch a specified role",
        "description": "This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\n\nThe following fields are patchable:\n\n* name\n* description\n* enabled\n* owner\n* accessProfiles\n* entitlements\n* membership\n* requestable\n* accessRequestConfig\n* revokeRequestConfig\n* segments\n* accessModelMetadata   \nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.\n\nThe maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.\n\nWhen you use this API to modify a role's membership identities, you can only modify up to a limit of 500 membership identities at a time. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Role to patch",
            "required": true,
            "x-sailpoint-resource-operation-id": "listRoles",
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "Make a Role Requestable and Enable it in One Call": {
                  "description": "This example shows how multiple fields may be updated with a single patch call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/requestable",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/enabled",
                      "value": true
                    }
                  ]
                },
                "Assign a Role to a Segment": {
                  "description": "This example illustrates the use of patch to assign a Role to a Segment by adding the Segment's ID to the Role's segments array.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/segments/-",
                      "value": "f7b1b8a3-5fed-4fd4-ad29-82014e137e19"
                    }
                  ]
                },
                "Set the Membership Selection Criteria to a List of Identities": {
                  "description": "This example shows how to define a Role's membershp by providing a list of Identities, referenced by their IDs.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/membership",
                      "value": {
                        "type": "IDENTITY_LIST",
                        "identities": [
                          {
                            "id": "2c91808973fe906c0174262092014ed9"
                          },
                          {
                            "id": "2c918086262092014ed94fb8a47612f3"
                          }
                        ]
                      }
                    }
                  ]
                },
                "Set the Membership Selection Criteria to a Standard Expression": {
                  "description": "This example shows how to define a Role's membership using STANDARD criteria. In this case, the Role will be granted to all Identities which have the *Engineering* attribute from the indicated Source.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/membership",
                      "value": {
                        "type": "STANDARD",
                        "criteria": {
                          "operation": "OR",
                          "children": [
                            {
                              "operation": "EQUALS",
                              "key": {
                                "type": "ENTITLEMENT",
                                "property": "attribute.memberOf",
                                "sourceId": "2c9180887701fb2014213e122092014e"
                              },
                              "stringValue": "Engineering"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "Add a New Clause as the Child of an Existing Standard Expression": {
                  "description": "This example shows how to add a child clause to an existing STANDARD criteria expression.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/membership/criteria/children/-",
                      "value": {
                        "operation": "ENDS_WITH",
                        "key": {
                          "type": "IDENTITY",
                          "property": "attribute.email"
                        },
                        "stringValue": "@identitynow.com"
                      }
                    }
                  ]
                },
                "Assign a Access Model Metadata to a Role": {
                  "description": "This example shows how to assign a existing metadata to a role.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/accessModelMetadata/attributes/0",
                      "value": {
                        "key": "iscFederalClassifications",
                        "values": [
                          {
                            "value": "secret"
                          }
                        ]
                      }
                    }
                  ]
                },
                "Make a Role Dimensional": {
                  "description": "This example demonstrates how to transform a role into a dynamic role.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/dimensional",
                      "value": true
                    }
                  ]
                },
                "Add an Access Profile to a Role": {
                  "description": "This example shows how to add an access profile to a role.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/accessProfiles/-",
                      "value": {
                        "id": "1de104e1f9024b1289b3a31e22d28cd1",
                        "type": "ACCESS_PROFILE"
                      }
                    }
                  ]
                },
                "Add an Entitlement to a Role": {
                  "description": "This example shows how to add an entitlement to a role.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/entitlements/-",
                      "value": {
                        "id": "0fb2f8051e48421b8f1f8a64aee3b205",
                        "type": "ENTITLEMENT"
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Responds with the Role as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:manage",
              "idn:role-checked:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      },
      "delete": {
        "operationId": "deleteRole",
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role",
        "description": "This API deletes a Role by its ID.\n\nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "x-sailpoint-resource-operation-id": "listRoles",
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role",
            "example": "2c91808a7813090a017814121e121518"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:manage",
              "idn:role-checked:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      }
    },
    "/roles/bulk-delete": {
      "post": {
        "operationId": "deleteBulkRoles",
        "summary": "Delete role(s)",
        "tags": [
          "Roles"
        ],
        "description": "This endpoint initiates a bulk deletion of one or more roles.\nWhen the request is successful, the endpoint returns the bulk delete's task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result's status and information. \nThis endpoint can only bulk delete up to a limit of 50 roles per request. \nA token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBulkDeleteRequest"
              },
              "example": {
                "roleIds": [
                  "2c91808876438bb2017668b91919ecca",
                  "2c91808876438ba801766e129f151816"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns an object with the id of the task performing the delete operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultDto"
                },
                "example": {
                  "type": "TASK_RESULT",
                  "id": "464ae7bf791e49fdb74606a2e4a89635",
                  "name": null
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "1ea1adcb84da4dcb890145e05745774e",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The request was syntactically correct but its content is semantically invalid."
                        }
                      ]
                    }
                  },
                  "400.1 Role ids limit violation": {
                    "description": "Role ids limit violation response",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "77aa89ac6f0e422dbc588866abc22be9",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "roleIds count exceeded max limit of 50 for bulk-delete."
                        }
                      ]
                    }
                  },
                  "400.1.404 Referenced object not found": {
                    "description": "Referenced object not found response",
                    "value": {
                      "detailCode": "400.1.404 Referenced object not found",
                      "trackingId": "77aa89ac6f0e422dbc588866abc22be9",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "Referenced roleIds [\"2c91808876438bb2017668b91919ecca\"] was not found."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:manage",
              "idn:role-checked:manage"
            ]
          }
        ]
      }
    },
    "/roles/{id}/assigned-identities": {
      "get": {
        "operationId": "getRoleAssignedIdentities",
        "tags": [
          "Roles"
        ],
        "summary": "Identities assigned a role",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "ID of the Role for which the assigned Identities are to be listed",
            "example": "2c91808a7813090a017814121e121518",
            "required": true,
            "x-sailpoint-resource-operation-id": "listRoles"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**aliasName**: *eq, sw*\n\n**email**: *eq, sw*\n\n**name**: *eq, sw, co*",
            "example": "name sw Joe"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, aliasName, email**",
            "example": "aliasName,name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Identities assigned the Role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleIdentity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:read",
              "idn:role-unchecked:manage",
              "idn:role-checked:manage",
              "idn:role-checked:read"
            ]
          }
        ]
      }
    },
    "/roles/{id}/entitlements": {
      "get": {
        "operationId": "getRoleEntitlements",
        "tags": [
          "Roles"
        ],
        "summary": "List role's entitlements",
        "description": "Get a list of entitlements associated with a specified role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Containing role's ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listRoles",
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          },
          {
            "$ref": "#/components/parameters/limit50"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, sw*\n\n**attribute**: *eq, sw*\n\n**value**: *eq, sw*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**source.id**: *eq, in*",
            "example": "attribute eq \"memberOf\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, attribute, value, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:role-unchecked:read",
              "idn:role-unchecked:manage",
              "idn:role-checked:manage",
              "idn:role-checked:read"
            ]
          },
          {
            "applicationAuth": [
              "idn:role-unchecked:read",
              "idn:role-unchecked:manage",
              "idn:role-checked:manage",
              "idn:role-checked:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN"
        ]
      }
    },
    "/segments": {
      "post": {
        "operationId": "createSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Create segment",
        "description": "This API creates a segment. \n>**Note:** Segment definitions may take time to propagate to all identities.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Segment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Segment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listSegments",
        "tags": [
          "Segments"
        ],
        "summary": "List segments",
        "description": "This API returns a list of all segments.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all segments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Segment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/segments/{id}": {
      "get": {
        "operationId": "getSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Get segment by id",
        "description": "This API returns the segment specified by the given ID.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSegments",
            "description": "The segment ID to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Segment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Delete segment by id",
        "description": "This API deletes the segment specified by the given ID.\n>**Note:** Segment deletion may take some time to go into effect. \nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSegments",
            "description": "The segment ID to delete.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSegment",
        "tags": [
          "Segments"
        ],
        "summary": "Update segment",
        "description": "Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n>**Note:** Changes to a segment may take some time to propagate to all identities.\nA token with ORG_ADMIN or API authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSegments",
            "description": "The segment ID to modify.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* description\n* owner\n* visibilityCriteria\n* active\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "examples": {
                "Set Visibility Criteria": {
                  "description": "Set the visibility criteria",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/visibilityCriteria",
                      "value": {
                        "expression": {
                          "operator": "AND",
                          "children": [
                            {
                              "operator": "EQUALS",
                              "attribute": "location",
                              "value": {
                                "type": "STRING",
                                "value": "Philadelphia"
                              }
                            },
                            {
                              "operator": "EQUALS",
                              "attribute": "department",
                              "value": {
                                "type": "STRING",
                                "value": "HR"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the segment's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/send-test-notification": {
      "post": {
        "operationId": "sendTestNotification",
        "tags": [
          "Notifications"
        ],
        "summary": "Send test notification",
        "description": "Send a Test Notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTestNotificationRequestDto"
              },
              "example": {
                "key": "cloud_manual_work_item_summary",
                "medium": "EMAIL",
                "context": {
                  "numberOfPendingTasks": "4",
                  "ownerId": "201327fda1c44704ac01181e963d463c"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/service-desk-integrations": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "List existing service desk integrations",
        "description": "Get a list of Service Desk integration objects.",
        "operationId": "getServiceDeskIntegrationList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "sorters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name**",
            "example": "name"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq*\n\n**type**: *eq, in*\n\n**cluster**: *eq, in*",
            "example": "id eq 2c91808b6ef1d43e016efba0ce470904"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ServiceDeskIntegrationDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:read",
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "post": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Create new service desk integration",
        "description": "Create a new Service Desk integration.",
        "operationId": "createServiceDeskIntegration",
        "requestBody": {
          "description": "The specifics of a new integration to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the created integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/service-desk-integrations/{id}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get a service desk integration",
        "description": "Get an existing Service Desk integration by ID.",
        "operationId": "getServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to get",
            "required": true,
            "x-sailpoint-resource-operation-id": "getServiceDeskIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:read",
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update a service desk integration",
        "description": "Update an existing Service Desk integration by ID.",
        "operationId": "putServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getServiceDeskIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "description": "The specifics of the integration to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "delete": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Delete a service desk integration",
        "description": "Delete an existing Service Desk integration by ID.",
        "operationId": "deleteServiceDeskIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Service Desk integration to delete",
            "required": true,
            "x-sailpoint-resource-operation-id": "getServiceDeskIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service Desk integration with the given ID successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "patch": {
        "operationId": "patchServiceDeskIntegration",
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Patch a service desk integration",
        "description": "Update an existing Service Desk integration by ID with a PATCH request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service Desk integration to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "getServiceDeskIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "anId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nOnly `replace` operations are accepted by this endpoint.\n\nA 403 Forbidden Error indicates that a PATCH operation was attempted that is not allowed.\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/ownerRef",
                    "value": {
                      "id": "2c9180867d05b227017d09921a205b4d",
                      "type": "IDENTITY",
                      "name": "Angelo Medici"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ServiceDeskIntegrationDto as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/service-desk-integrations/types": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "List service desk integration types",
        "description": "This API endpoint returns the current list of supported Service Desk integration types.",
        "operationId": "getServiceDeskIntegrationTypes",
        "responses": {
          "200": {
            "description": "Responds with an array of the currently supported Service Desk integration types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDeskIntegrationTemplateType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:read",
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/service-desk-integrations/templates/{scriptName}": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Service desk integration template by scriptname",
        "description": "This API endpoint returns an existing Service Desk integration template by scriptName.",
        "operationId": "getServiceDeskIntegrationTemplate",
        "parameters": [
          {
            "name": "scriptName",
            "in": "path",
            "description": "The scriptName value of the Service Desk integration template to get",
            "required": true,
            "x-sailpoint-resource-operation-id": "getServiceDeskIntegrations",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "aScriptName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the ServiceDeskIntegrationTemplateDto with the specified scriptName.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationTemplateDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:read",
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/service-desk-integrations/status-check-configuration": {
      "get": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Get the time check configuration",
        "description": "Get the time check configuration of queued SDIM tickets.",
        "operationId": "getStatusCheckDetails",
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails containing the configured values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuedCheckConfigDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:read",
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "put": {
        "tags": [
          "Service Desk Integration"
        ],
        "summary": "Update the time check configuration",
        "description": "Update the time check configuration of queued SDIM tickets.",
        "operationId": "updateStatusCheckDetails",
        "requestBody": {
          "description": "The modified time check configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueuedCheckConfigDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "QueuedCheckConfigDetails as updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuedCheckConfigDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-integration:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/sim-integrations/{id}": {
      "put": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Update an existing sim integration",
        "description": "Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "putSIMIntegration",
        "requestBody": {
          "description": "The full DTO of the integration containing the updated model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimIntegrationDetails"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the integration.",
            "schema": {
              "type": "string"
            },
            "example": 12345,
            "required": true,
            "x-sailpoint-resource-operation-id": "getSIMIntegrations"
          }
        ],
        "responses": {
          "200": {
            "description": "details of the updated integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:create"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Get a sim integration details.",
        "description": "Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getSIMIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the integration.",
            "schema": {
              "type": "string"
            },
            "example": 12345,
            "required": true,
            "x-sailpoint-resource-operation-id": "getSIMIntegrations"
          }
        ],
        "responses": {
          "200": {
            "description": "The DTO containing the details of the SIM integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Delete a sim integration",
        "description": "Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "deleteSIMIntegration",
        "parameters": [
          {
            "name": "id",
            "description": "The id of the integration to delete.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "example": 12345,
            "required": true,
            "x-sailpoint-resource-operation-id": "getSIMIntegrations"
          }
        ],
        "responses": {
          "200": {
            "description": "No content response"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Patch a sim attribute.",
        "description": "Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "patchSIMAttributes",
        "requestBody": {
          "required": true,
          "description": "The JsonPatch object that describes the changes of SIM",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "SIM integration id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "example": 12345,
            "required": true,
            "x-sailpoint-resource-operation-id": "getSIMIntegrations"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated DTO containing the details of the SIM integration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:write"
            ]
          }
        ]
      }
    },
    "/sim-integrations/{id}/beforeProvisioningRule": {
      "patch": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Patch a sim beforeprovisioningrule attribute.",
        "description": "Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "patchBeforeProvisioningRule",
        "requestBody": {
          "required": true,
          "description": "The JsonPatch object that describes the changes of SIM beforeProvisioningRule.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SIM integration id",
            "schema": {
              "type": "string"
            },
            "example": 12345,
            "required": true,
            "x-sailpoint-resource-operation-id": "getSIMIntegrations"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated DTO containing the details of the SIM integration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:write"
            ]
          }
        ]
      }
    },
    "/sim-integrations": {
      "get": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "List the existing sim integrations.",
        "description": "List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "getSIMIntegrations",
        "responses": {
          "200": {
            "description": "The DTO containing the details of the SIM integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SIM Integrations"
        ],
        "summary": "Create new sim integration",
        "description": "Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.",
        "operationId": "createSIMIntegration",
        "requestBody": {
          "description": "DTO containing the details of the SIM integration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimIntegrationDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "details of the created integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeskIntegrationDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:service-desk-admin:create"
            ]
          }
        ]
      }
    },
    "/sp-config/export": {
      "post": {
        "operationId": "exportSpConfig",
        "security": [
          {
            "userAuth": [
              "sp:config:read",
              "sp:config:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "SP-Config"
        ],
        "summary": "Initiates configuration objects export job",
        "description": "This post will export objects from the tenant to a JSON configuration file.\nFor more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).",
        "requestBody": {
          "description": "Export options control what will be included in the export.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportPayload"
              },
              "examples": {
                "Export all objects available": {
                  "description": "Export all object types available in IDN.",
                  "value": {
                    "description": "Export all available objects",
                    "excludeTypes": [],
                    "includeTypes": [
                      "ACCESS_PROFILE",
                      "ACCESS_REQUEST_CONFIG",
                      "ATTR_SYNC_SOURCE_CONFIG",
                      "AUTH_ORG",
                      "CAMPAIGN_FILTER",
                      "CONNECTOR_RULE",
                      "FORM_DEFINITION",
                      "GOVERNANCE_GROUP",
                      "IDENTITY_OBJECT_CONFIG",
                      "IDENTITY_PROFILE",
                      "LIFECYCLE_STATE",
                      "NOTIFICATION_TEMPLATE",
                      "PASSWORD_POLICY",
                      "PASSWORD_SYNC_GROUP",
                      "PUBLIC_IDENTITIES_CONFIG",
                      "ROLE",
                      "RULE",
                      "SEGMENT",
                      "SERVICE_DESK_INTEGRATION",
                      "SOD_POLICY",
                      "SOURCE",
                      "TAG",
                      "TRANSFORM",
                      "TRIGGER_SUBSCRIPTION",
                      "WORKFLOW"
                    ],
                    "objectOptions": {}
                  }
                },
                "Export sources by ID": {
                  "description": "Export only sources that match the IDs specified in the export options.",
                  "value": {
                    "description": "Export sources by ID",
                    "excludeTypes": [],
                    "includeTypes": [
                      "SOURCE"
                    ],
                    "objectOptions": {
                      "SOURCE": {
                        "includedIds": [
                          "be9e116d-08e1-49fc-ab7f-fa585e96c9e4",
                          "be9p119e-90e1-49pk-ac9f-fa576e96c9e4"
                        ],
                        "includedNames": []
                      }
                    }
                  }
                },
                "Export transforms by name": {
                  "description": "Export only transforms that match the names specified in the export options.",
                  "value": {
                    "description": "Export transforms by name",
                    "excludeTypes": [],
                    "includeTypes": [
                      "TRANSFORM"
                    ],
                    "objectOptions": {
                      "TRANSFORM": {
                        "includedIds": [],
                        "includedNames": [
                          "Remove Diacritical Marks",
                          "Common - Location Lookup"
                        ]
                      }
                    }
                  }
                },
                "Export trigger subscriptions triggers and transforms with custom options": {
                  "description": "Export trigger subscriptions and transforms that match the export options.",
                  "value": {
                    "description": "Export trigger subscriptions and transforms with custom filter options",
                    "excludeTypes": [],
                    "includeTypes": [
                      "TRANSFORM",
                      "TRIGGER_SUBSCRIPTION"
                    ],
                    "objectOptions": {
                      "TRANSFORM": {
                        "includedIds": [],
                        "includedNames": [
                          "Remove Diacritical Marks",
                          "Common - Location Lookup"
                        ]
                      },
                      "TRIGGER_SUBSCRIPTION": {
                        "includedIds": [
                          "be9e116d-08e1-49fc-ab7f-fa585e96c9e4",
                          "be9p119e-90e1-49pk-ac9f-fa576e96c9e4"
                        ],
                        "includedNames": [
                          "NGROK Test: fire and forget",
                          "Manager Certification"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Export job accepted and queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigExportJob"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/export/{id}": {
      "get": {
        "operationId": "getSpConfigExportStatus",
        "security": [
          {
            "userAuth": [
              "sp:config:read",
              "sp:config:manage"
            ]
          }
        ],
        "tags": [
          "SP-Config"
        ],
        "summary": "Get export job status",
        "description": "This gets the status of the export job identified by the `id` parameter.\nThe request will need one of the following security scopes:\n- sp:config:read - sp:config:manage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "exportSpConfig",
            "description": "The ID of the export job whose status will be returned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Export job status successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigExportJobStatus"
                },
                "example": {
                  "jobId": "1e824aa0-4c6e-4f14-95e9-e7dc5234aa51",
                  "status": "COMPLETE",
                  "type": "EXPORT",
                  "message": null,
                  "description": "Export Job 1 Test",
                  "expiration": "2021-05-20T15:04:24Z",
                  "created": "2021-05-13T15:04:24.112Z",
                  "modified": "2021-05-13T15:04:27.363Z",
                  "completed": "2021-05-13T15:04:27.358Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/export/{id}/download": {
      "get": {
        "operationId": "getSpConfigExport",
        "tags": [
          "SP-Config"
        ],
        "summary": "Download export job result.",
        "description": "This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file.\nThe request will need one of the following security scopes:\n- sp:config:read - sp:config:manage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "exportSpConfig",
            "description": "The ID of the export job whose results will be downloaded.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported JSON objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigExportResults"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/import": {
      "post": {
        "operationId": "importSpConfig",
        "security": [
          {
            "userAuth": [
              "sp:config:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "SP-Config"
        ],
        "summary": "Initiates configuration objects import job",
        "description": "This post will import objects from a JSON configuration file into a tenant.\nBy default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted.\nThe backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed.\nThe backup can be skipped by setting \"excludeBackup\" to true in the import options.\nIf a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded \nusing the `/sp-config/export/{exportJobId}/download` endpoint.\n\nYou cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data. \n\nFor more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).\n",
        "parameters": [
          {
            "in": "query",
            "name": "preview",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "description": "This option is intended to give the user information about how an import operation would proceed, without\nhaving any effect on the target tenant.\nIf this parameter is \"true\", no objects will be imported. Instead, the import process will pre-process the import file and\nattempt to resolve references within imported objects. The import result file will contain messages\npertaining to how specific references were resolved, any errors associated with the preprocessing,\nand messages indicating which objects would be imported.\n",
            "example": "true"
          }
        ],
        "requestBody": {
          "description": "The form-data \"name\" attribute for the file content must be \"data\".\n\n__Example__\n\n    data: \"config_export_0340b957-5caa-44f6-ada2-d3c4c5bd0b19.json\",\n    options: {\n      \"excludeTypes\": [],\n      \"includeTypes\": [\"TRIGGER_SUBSCRIPTION\"],\n      \"objectOptions\": {\n        \"TRIGGER_SUBSCRIPTION\": {\n          \"includedIds\": [ \"193446a1-c431-4326-8ba7-d6eebf922948\"],\n          \"includedNames\":[]\n        }\n      },\n      \"defaultReferences\": [\n        {\n          \"type\": \"TRIGGER_SUBSCRIPTION\",\n          \"id\": \"be9e116d-08e1-49fc-ab7f-fa585e96c9e4\",\n          \"name\": \"Test Trigger\"\n        }\n      ],\n      \"excludeBackup\": false\n    }\n\n__Sample Import File__\n\n    {\n    \t\"version\": 1,\n    \t\"timestamp\": \"2021-05-10T15:19:23.425041-05:00\",\n    \t\"tenant\": \"sampleTenant\",\n    \t\"options\": {\n    \t\t\"excludeTypes\": [],\n    \t\t\"includeTypes\": [\"TRIGGER_SUBSCRIPTION\"],\n    \t\t\"objectOptions\": null\n    \t},\n    \t\"objects\": [{\n    \t\t\t\"version\": 1,\n    \t\t\t\"self\": {\n    \t\t\t\t\"type\": \"TRIGGER_SUBSCRIPTION\",\n    \t\t\t\t\"name\": \"test trigger\",\n    \t\t\t\t\"id\": \"193446a1-c431-4326-8ba7-d6eebf922948\"\n    \t\t\t},\n    \t\t\t\"object\": {\n    \t\t\t\t\"type\": \"HTTP\",\n    \t\t\t\t\"enabled\": true,\n    \t\t\t\t\"httpConfig\": {\n    \t\t\t\t\t\"url\": \"https://localhost\",\n    \t\t\t\t\t\"httpAuthenticationType\": \"NO_AUTH\",\n    \t\t\t\t\t\"basicAuthConfig\": null,\n    \t\t\t\t\t\"bearerTokenAuthConfig\": null,\n    \t\t\t\t\t\"httpDispatchMode\": \"SYNC\"\n    \t\t\t\t},\n    \t\t\t\t\"triggerName\": \"Access Request Submitted\",\n    \t\t\t\t\"responseDeadline\": \"PT1H\",\n    \t\t\t\t\"name\": \"test trigger\",\n    \t\t\t\t\"triggerId\": \"idn:access-request-pre-approval\"\n    \t\t\t}\n    \t\t}\n    \t]\n    }\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing the objects to be imported."
                  },
                  "options": {
                    "$ref": "#/components/schemas/ImportOptions"
                  }
                },
                "required": [
                  "data"
                ]
              },
              "example": {
                "data": "config_export_0340b957-5caa-44f6-ada2-d3c4c5bd0b19.json",
                "options": {
                  "excludeTypes": [],
                  "includeTypes": [
                    "TRIGGER_SUBSCRIPTION"
                  ],
                  "objectOptions": {
                    "TRIGGER_SUBSCRIPTION": {
                      "includedIds": [
                        "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                      ],
                      "includedNames": [
                        "Lori Test 2"
                      ]
                    }
                  },
                  "defaultReferences": [
                    {
                      "type": "TRIGGER_SUBSCRIPTION",
                      "id": "be9e116d-08e1-49fc-ab7f-fa585e96c9e4",
                      "name": "Test Trigger"
                    }
                  ],
                  "excludeBackup": false
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Import job accepted and queued for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigJob"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/import/{id}": {
      "get": {
        "operationId": "getSpConfigImportStatus",
        "security": [
          {
            "userAuth": [
              "sp:config:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "SP-Config"
        ],
        "summary": "Get import job status",
        "description": "This gets the status of the import job identified by the `id` parameter.\nFor more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "importSpConfig",
            "description": "The ID of the import job whose status will be returned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Import job status successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigImportJobStatus"
                },
                "example": {
                  "jobId": "4fb10503-1c49-4603-8f8d-886e1f6aa47b",
                  "status": "COMPLETE",
                  "type": "IMPORT",
                  "message": "Download import results for details.",
                  "description": null,
                  "expiration": "2021-05-20T16:42:39Z",
                  "created": "2021-05-13T16:42:39.333Z",
                  "modified": "2021-05-13T16:42:40.71Z",
                  "completed": "2021-05-13T16:42:40.705Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/import/{id}/download": {
      "get": {
        "operationId": "getSpConfigImport",
        "tags": [
          "SP-Config"
        ],
        "summary": "Download import job result",
        "description": "This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import.\nThe request will need the following security scope:\n- sp:config:manage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "importSpConfig",
            "description": "The ID of the import job whose results will be downloaded.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Import results JSON object, containing detailed results of the import operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpConfigImportResults"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sp-config/config-objects": {
      "get": {
        "operationId": "listSpConfigObjects",
        "security": [
          {
            "userAuth": [
              "sp:config:read",
              "sp:config:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "tags": [
          "SP-Config"
        ],
        "summary": "List config objects",
        "description": "Get a list of object configurations that the tenant export/import service knows.",
        "responses": {
          "200": {
            "description": "Object configurations returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpConfigObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources": {
      "get": {
        "operationId": "listSources",
        "security": [
          {
            "userAuth": [
              "idn:sources:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN",
          "ROLE_SUBADMIN"
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Lists all sources in identitynow.",
        "description": "This end-point lists all the sources in IdentityNow.\n\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "name eq \"Employees\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**name**: *co, eq, in, sw, ge, gt, ne, isnull*\n\n**type**: *eq, in, ge, gt, ne, isnull, sw*\n\n**owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**features**: *ca, co*\n\n**created**: *eq*\n\n**modified**: *eq*\n\n**managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*\n\n**description**: *eq, sw*\n\n**authoritative**: *eq, ne, isnull*\n\n**healthy**: *isnull*\n\n**status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*\n\n**connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*\n\n**connectorName**: *eq, ge, gt, in, ne, isnull, sw*\n\n**category**: *co, eq, ge, gt, in, le, lt, ne, sw*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "name",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**"
          },
          {
            "in": "query",
            "name": "for-subadmin",
            "schema": {
              "type": "string"
            },
            "example": "name",
            "description": "Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user.\nSubadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned."
          },
          {
            "in": "query",
            "name": "includeIDNSource",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true,
            "description": "Include the IdentityNow source in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "List of Source objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source-2"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSource",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Creates a source in identitynow.",
        "description": "This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "query",
            "name": "provisionAsCsv",
            "description": "If this parameter is `true`, it configures the source as a Delimited File (CSV) source. Setting this to `true` will automatically set the `type` of the source to `DelimitedFile`.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don't set this query parameter and you attempt to set the `type` attribute directly, the request won't correctly generate the source.  ",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "example": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source-2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Source object. Any passwords will only show the the encrypted cipher-text, as they are not decrypt-able in IdentityNow cloud-based services, per IdentityNow security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{id}": {
      "get": {
        "operationId": "getSource",
        "security": [
          {
            "userAuth": [
              "idn:sources:read"
            ]
          }
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Get source by id",
        "description": "Use this API to get a source by a specified ID in Identity Security Cloud (ISC).\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "Source object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putSource",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Update source (full)",
        "description": "Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.\n\nThese fields are immutable, so they cannot be changed:\n\n* id\n* type\n* authoritative\n* connector\n* connectorClass\n* passwordPolicies\n\nAttempts to modify these fields will result in a 400 error.\n\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text so that they aren't decryptable in Identity Security Cloud (ISC) cloud-based services, per ISC security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSource",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Update source (partial)",
        "description": "Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the\n[JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThese fields are immutable, so they cannot be changed:\n* id\n* type\n* authoritative\n* created\n* modified\n* connector\n* connectorClass\n* passwordPolicies\n\nAttempts to modify these fields will result in a 400 error.\n\nA token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "Edit the source description": {
                  "description": "This example shows how to edit a source description.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "new description"
                    }
                  ]
                },
                "Edit the source cluster": {
                  "description": "This example shows how to edit a source cluster by ID.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/cluster/id",
                      "value": "2c918087813a902001813f3f85736b45"
                    }
                  ]
                },
                "Edit source features": {
                  "description": "This example illustrates how you can update source supported features.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/features",
                      "value": [
                        "PASSWORD",
                        "PROVISIONING",
                        "ENABLE",
                        "AUTHENTICATE"
                      ]
                    }
                  ]
                },
                "Change a source description and cluster in one call": {
                  "description": "This example shows how multiple fields may be updated with a single PATCH call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "new description"
                    },
                    {
                      "op": "replace",
                      "path": "/cluster/id",
                      "value": "2c918087813a902001813f3f85736b45"
                    }
                  ]
                },
                "Add a filter string to the connector": {
                  "description": "This example shows how you can add a filter to incoming accounts during the account aggregation process. In the example, any account that does not have an \"m\" or \"d\" in the ID will be aggregated.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/connectorAttributes/filterString",
                      "value": "!( id.contains( \"m\" ) ) || !( id.contains( \"d\" ) )"
                    }
                  ]
                },
                "Update connector attribute for specific operation type": {
                  "description": "This example shows how you can update the 3rd object in the connection parameter's `operationType`. This changes it from a standard group aggregation to a group aggregation on the \"test\" entitlement type.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/connectorAttributes/connectionParameters/2/operationType",
                      "value": "Group Aggregation-test"
                    }
                  ]
                },
                "Enable notifications for new account provisioning on a source": {
                  "description": "This example shows how you can configure and enable email notifications that will send when new accounts are provisioned on a source.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/connectorAttributes/accountCreateNotification",
                      "value": {
                        "notifyList": [
                          "Distribution.list@demo.com"
                        ],
                        "notifyAccountOwner": true,
                        "enabled": true,
                        "notifyAccountOwnerAltEmail": false
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Source object. Any passwords will only show the the encrypted cipher-text so that they are not decryptable in Identity Security Cloud cloud-based services, per ISC security design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "operationId": "delete",
        "tags": [
          "Sources"
        ],
        "summary": "Delete source by id",
        "description": "Use this API to delete a specific source in Identity Security Cloud (ISC).\nThe API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}`\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Returned if the request was successfully accepted into the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "Type of object being referenced.",
                      "type": "string",
                      "enum": [
                        "TASK_RESULT"
                      ],
                      "example": "TASK_RESULT"
                    },
                    "id": {
                      "type": "string",
                      "description": "Task result ID.",
                      "example": "2c91808779ecf55b0179f720942f181a"
                    },
                    "name": {
                      "type": "string",
                      "description": "Task result's human-readable display name (this should be null/empty).",
                      "example": null
                    }
                  }
                },
                "examples": {
                  "deleteSource": {
                    "summary": "Response returned when a source is being deleted.",
                    "value": {
                      "type": "TASK_RESULT",
                      "id": "2c91808779ecf55b0179f720942f181a",
                      "name": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{id}/attribute-sync-config": {
      "get": {
        "operationId": "getSourceAttrSyncConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Attribute sync config",
        "description": "This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not.\nA token with ORG_ADMIN or HELPDESK authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:attr-sync-source-config:read",
              "idn:attr-sync-source-config:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "listSources"
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute synchronization configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttrSyncSourceConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putSourceAttrSyncConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Update attribute sync config",
        "description": "Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.\n    \nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:attr-sync-source-config:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "listSources"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttrSyncSourceConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated attribute synchronization configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttrSyncSourceConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/check-connection": {
      "post": {
        "operationId": "testSourceConnection",
        "tags": [
          "Sources"
        ],
        "summary": "Check connection for source connector.",
        "description": "This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:source-connector:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The ID of the Source.",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of checking connection to the source connector with response from it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/peek-resource-objects": {
      "post": {
        "operationId": "peekResourceObjects",
        "tags": [
          "Sources"
        ],
        "summary": "Peek source connector's resource objects",
        "description": "Retrieves a sample of data returned from account and group aggregation requests.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:source-connector:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceObjectsRequest",
                "example": {
                  "objectType": "resource",
                  "maxCount": 50
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of resource objects that was fetched from the source connector.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceObjectsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/ping-cluster": {
      "post": {
        "operationId": "pingCluster",
        "tags": [
          "Sources"
        ],
        "summary": "Ping cluster for source connector",
        "description": "This endpoint validates that the cluster being used by the source is reachable from IdentityNow.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:source-connector:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of pinging connection with the source connector.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/connector/test-configuration": {
      "post": {
        "operationId": "testSourceConfiguration",
        "tags": [
          "Sources"
        ],
        "summary": "Test configuration for source connector",
        "description": "This endpoint performs a more detailed validation of the source's configuration that can take longer than the lighter weight credential validation performed by the checkConnection API.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:source-connector:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The ID of the Source",
            "example": "cef3ee201db947c5912551015ba0c679"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of testing source connector configuration with response from it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{id}/connectors/source-config": {
      "get": {
        "operationId": "getSourceConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Gets source config with language translations",
        "description": "Looks up and returns the source config for the requested source id after populating the source config values and applying language translations.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The Source id"
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "no",
                "fi",
                "sv",
                "ru",
                "pt",
                "ko",
                "zh-TW",
                "en",
                "it",
                "fr",
                "zh-CN",
                "hu",
                "es",
                "cs",
                "ja",
                "pl",
                "da",
                "nl"
              ]
            },
            "description": "The locale to apply to the config. If no viable locale is given, it will default to \"en\""
          }
        ],
        "responses": {
          "200": {
            "description": "A Connector Detail object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/native-change-detection-config": {
      "get": {
        "operationId": "getNativeChangeDetectionConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Native change detection configuration",
        "security": [
          {
            "userAuth": [
              "idn:sources:read"
            ]
          }
        ],
        "description": "This API returns the existing native change detection configuration for a source specified by the given ID.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "Native change detection configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NativeChangeDetectionConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putNativeChangeDetectionConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Update native change detection configuration",
        "security": [
          {
            "userAuth": [
              "idn:sources:update"
            ]
          }
        ],
        "description": "Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.\n    \nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NativeChangeDetectionConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated native change detection configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NativeChangeDetectionConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteNativeChangeDetectionConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Delete native change detection configuration",
        "description": "Deletes the native change detection configuration for the source specified by the given ID.\nA token with API, or ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:sources:update"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies": {
      "get": {
        "operationId": "listProvisioningPolicies",
        "tags": [
          "Sources"
        ],
        "summary": "Lists provisioningpolicies",
        "description": "This end-point lists all the ProvisioningPolicies in IdentityNow.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:read",
              "idn:provisioning-policy:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:read",
              "idn:provisioning-policy:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ProvisioningPolicyDto objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningPolicyDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Create provisioning policy",
        "description": "This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types.\nTransforms can be used in the provisioning policy to create a new attribute that you only need during provisioning.\nRefer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningPolicyDto"
              },
              "examples": {
                "Create Account Provisioning Policy": {
                  "value": {
                    "name": "Account",
                    "description": "Account Provisioning Policy",
                    "usageType": "CREATE",
                    "fields": [
                      {
                        "name": "displayName",
                        "transform": {
                          "type": "identityAttribute",
                          "attributes": {
                            "name": "displayName"
                          }
                        },
                        "attributes": {},
                        "isRequired": false,
                        "type": "string",
                        "isMultiValued": false
                      },
                      {
                        "name": "distinguishedName",
                        "transform": {
                          "type": "usernameGenerator",
                          "attributes": {
                            "sourceCheck": true,
                            "patterns": [
                              "CN=$fi $ln,OU=zzUsers,OU=Demo,DC=seri,DC=sailpointdemo,DC=com",
                              "CN=$fti $ln,OU=zzUsers,OU=Demo,DC=seri,DC=sailpointdemo,DC=com",
                              "CN=$fn $ln,OU=zzUsers,OU=Demo,DC=seri,DC=sailpointdemo,DC=com",
                              "CN=$fn$ln${uniqueCounter},OU=zzUsers,OU=Demo,DC=seri,DC=sailpointdemo,DC=com"
                            ],
                            "fn": {
                              "type": "identityAttribute",
                              "attributes": {
                                "name": "firstname"
                              }
                            },
                            "ln": {
                              "type": "identityAttribute",
                              "attributes": {
                                "name": "lastname"
                              }
                            },
                            "fi": {
                              "type": "substring",
                              "attributes": {
                                "input": {
                                  "type": "identityAttribute",
                                  "attributes": {
                                    "name": "firstname"
                                  }
                                },
                                "begin": 0,
                                "end": 1
                              }
                            },
                            "fti": {
                              "type": "substring",
                              "attributes": {
                                "input": {
                                  "type": "identityAttribute",
                                  "attributes": {
                                    "name": "firstname"
                                  }
                                },
                                "begin": 0,
                                "end": 2
                              }
                            }
                          }
                        },
                        "attributes": {
                          "cloudMaxUniqueChecks": "5",
                          "cloudMaxSize": "100",
                          "cloudRequired": "true"
                        },
                        "isRequired": false,
                        "type": "",
                        "isMultiValued": false
                      },
                      {
                        "name": "description",
                        "transform": {
                          "type": "static",
                          "attributes": {
                            "value": ""
                          }
                        },
                        "attributes": {},
                        "isRequired": false,
                        "type": "string",
                        "isMultiValued": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created ProvisioningPolicyDto object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicyDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/{usageType}": {
      "get": {
        "operationId": "getProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Get provisioning policy by usagetype",
        "description": "This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:read",
              "idn:provisioning-policy-source:read",
              "idn:provisioning-policy:manage",
              "idn:provisioning-policy-source-admin-operations:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:read",
              "idn:provisioning-policy-source:read",
              "idn:provisioning-policy:manage",
              "idn:provisioning-policy-source-admin-operations:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "description": "The type of provisioning policy usage. \nIn IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined. \nThese are the common usage types: \nCREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.  \nUPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source.\nENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created. \nDISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source. \nYou can use these four usage types for all your provisioning policy needs. ",
            "example": "CREATE",
            "schema": {
              "$ref": "#/components/schemas/UsageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ProvisioningPolicyDto was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicyDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Update provisioning policy by usagetype",
        "description": "This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow.\nTransforms can be used in the provisioning policy to create a new attribute that you only need during provisioning.\nRefer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:manage",
              "idn:provisioning-policy-source-admin-operations:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:manage",
              "idn:provisioning-policy-source-admin-operations:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "description": "The type of provisioning policy usage. \nIn IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined. \nThese are the common usage types: \nCREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.  \nUPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source.\nENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created. \nDISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source. \nYou can use these four usage types for all your provisioning policy needs. ",
            "example": "CREATE",
            "schema": {
              "$ref": "#/components/schemas/UsageType"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningPolicyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicyDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Partial update of provisioning policy",
        "description": "This API selectively updates an existing Provisioning Policy using a JSONPatch payload.\nTransforms can be used in the provisioning policy to create a new attribute that you only need during provisioning.\nRefer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:update"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "description": "The type of provisioning policy usage. \nIn IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined. \nThese are the common usage types: \nCREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.  \nUPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source.\nENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created. \nDISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source. \nYou can use these four usage types for all your provisioning policy needs. ",
            "example": "CREATE",
            "schema": {
              "$ref": "#/components/schemas/UsageType"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "add-field": {
                  "summary": "Add a field to the beginning of the list",
                  "value": [
                    {
                      "op": "add",
                      "path": "/fields/0",
                      "value": {
                        "name": "email",
                        "transform": {
                          "type": "identityAttribute",
                          "attributes": {
                            "name": "email"
                          }
                        },
                        "attributes": {},
                        "isRequired": false,
                        "type": "string",
                        "isMultiValued": false
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ProvisioningPolicyDto was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningPolicyDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteProvisioningPolicy",
        "tags": [
          "Sources"
        ],
        "summary": "Delete provisioning policy by usagetype",
        "description": "Deletes the provisioning policy with the specified usage on an application.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "usageType",
            "required": true,
            "description": "The type of provisioning policy usage. \nIn IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined. \nThese are the common usage types: \nCREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.  \nUPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source.\nENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created. \nDISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source. \nYou can use these four usage types for all your provisioning policy needs. ",
            "example": "CREATE",
            "schema": {
              "$ref": "#/components/schemas/UsageType"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "The ProvisioningPolicyDto was successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/provisioning-policies/bulk-update": {
      "post": {
        "operationId": "updateProvisioningPoliciesInBulk",
        "tags": [
          "Sources"
        ],
        "summary": "Bulk update provisioning policies",
        "description": "This end-point updates a list of provisioning policies on the specified source in IdentityNow.",
        "security": [
          {
            "userAuth": [
              "idn:provisioning-policy:manage"
            ]
          },
          {
            "applicationAuth": [
              "idn:provisioning-policy:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProvisioningPolicyDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of the ProvisioningPolicyDto was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisioningPolicyDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/remove-accounts": {
      "post": {
        "operationId": "deleteAccountsAsync",
        "summary": "Remove all accounts in a source",
        "tags": [
          "Sources"
        ],
        "description": "Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.\n\nThis endpoint is good for:\n* Removing accounts that no longer exist on the source.\n* Removing accounts that won't be aggregated following updates to the source configuration.\n* Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.\n",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The source id",
            "example": "ebbf35756e1140699ce52b233121384a"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. Returns task result details of removal request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResultDto"
                },
                "example": {
                  "type": "TASK_RESULT",
                  "id": "464ae7bf791e49fdb74606a2e4a89635",
                  "name": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:accounts:manage"
            ]
          }
        ]
      }
    },
    "/sources/{sourceId}/schemas": {
      "get": {
        "operationId": "getSourceSchemas",
        "security": [
          {
            "userAuth": [
              "idn:source-schema:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "tags": [
          "Sources"
        ],
        "summary": "List schemas on source",
        "description": "Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "query",
            "name": "include-types",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "group",
                "user"
              ]
            },
            "description": "If set to 'group', then the account schema is filtered and only group schemas are returned. Only a value of 'group' is recognized presently. \nNote: The API will check whether include-types is group or not, if not, it will list schemas based on include-names, if include-names is not provided, it will list all schemas.",
            "example": "group"
          },
          {
            "in": "query",
            "name": "include-names",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "A comma-separated list of schema names to filter result.",
            "example": "account"
          }
        ],
        "responses": {
          "200": {
            "description": "The schemas were successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSourceSchema",
        "security": [
          {
            "userAuth": [
              "idn:source-schema:create"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Create schema on source",
        "description": "Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The schema was successfully created on the specified source.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas/{schemaId}": {
      "get": {
        "operationId": "getSourceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Get source schema by id",
        "description": "Get the Source Schema by ID in IdentityNow.\n",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getSourceSchemas",
            "description": "The Schema ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Schema was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putSourceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Update source schema (full)",
        "description": "This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.\n* id\n* name\n* created\n* modified\nAny attempt to modify these fields will result in an error response with a status code of 400.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getSourceSchemas",
            "description": "The Schema ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "updateSourceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Update source schema (partial)",
        "description": "Use this API to selectively update an existing Schema using a JSONPatch payload. \n\nThe following schema fields are immutable and cannot be updated:\n\n- id\n- name\n- created\n- modified\n\n\nTo switch an account attribute to a group entitlement, you need to have the following in place:\n\n- `isEntitlement: true`\n- Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group:\n```json\n{\n    \"name\": \"groups\",\n    \"type\": \"STRING\",\n    \"schema\": {\n        \"type\": \"CONNECTOR_SCHEMA\",\n        \"id\": \"2c9180887671ff8c01767b4671fc7d60\",\n        \"name\": \"group\"\n    },\n    \"description\": \"The groups, roles etc. that reference account group objects\",\n    \"isMulti\": true,\n    \"isEntitlement\": true,\n    \"isGroup\": true\n}\n```\n",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getSourceSchemas",
            "description": "The Schema id.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the schema.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/displayAttribute",
                  "value": {
                    "new-display-attribute": null
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Schema was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSourceSchema",
        "tags": [
          "Sources"
        ],
        "summary": "Delete source schema by id",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "schemaId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getSourceSchemas",
            "description": "The Schema ID.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "The Schema was successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/schemas/accounts": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Downloads source accounts schema template",
        "operationId": "getSourceAccountsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the file",
            "content": {
              "text/csv": {
                "example": "id,name,givenName,familyName,e-mail,location,manager,groups,startDate,endDate"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:source-schema:read",
              "idn:source-schema:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Uploads source accounts schema template",
        "description": "This API uploads a source schema template file to configure a source's account attributes.",
        "operationId": "importSourceAccountsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:source-schema:manage"
            ]
          }
        ]
      }
    },
    "/sources/{sourceId}/schemas/entitlements": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Downloads source entitlements schema template",
        "operationId": "getSourceEntitlementsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "schemaName",
            "schema": {
              "type": "string"
            },
            "description": "Name of entitlement schema",
            "example": "?schemaName=group"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the file",
            "content": {
              "text/csv": {
                "example": "id,name,displayName,created,description,modified,entitlements,groups,permissions"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:source-schema:read",
              "idn:source-schema:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Uploads source entitlements schema template",
        "description": "This API uploads a source schema template file to configure a source's entitlement attributes.",
        "operationId": "importSourceEntitlementsSchema",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          {
            "in": "query",
            "name": "schemaName",
            "schema": {
              "type": "string"
            },
            "description": "Name of entitlement schema",
            "example": "?schemaName=group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:source-schema:manage"
            ]
          }
        ]
      }
    },
    "/sources/{sourceId}/upload-connector-file": {
      "post": {
        "operationId": "importSourceConnectorFile",
        "security": [
          {
            "userAuth": [
              "idn:sources-admin:manage"
            ]
          }
        ],
        "tags": [
          "Sources"
        ],
        "summary": "Upload connector file to source",
        "description": "This uploads a supplemental source connector file (like jdbc driver jars) to a source's S3 bucket. This also sends ETS and Audit events.\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Uploaded the file successfully and sent all post-upload events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/synchronize-attributes": {
      "post": {
        "operationId": "syncAttributesForSource",
        "tags": [
          "Sources"
        ],
        "summary": "Synchronize single source attributes.",
        "description": "This end-point performs attribute synchronization for a selected source.\nA token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "The Source id"
          }
        ],
        "responses": {
          "202": {
            "description": "A Source Sync job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceSyncJob"
                },
                "example": {
                  "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                  "status": "IN_PROGRESS",
                  "payload": {
                    "type": "SYNCHRONIZE_SOURCE_ATTRIBUTES",
                    "dataJson": "{\"sourceId\":\"2c918083746f642c01746f990884012a\"}"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/entitlement-request-config": {
      "get": {
        "security": [
          {
            "userAuth": [
              "idn:sources:read",
              "idn:sources:manage"
            ]
          }
        ],
        "operationId": "getSourceEntitlementRequestConfig",
        "summary": "Get source entitlement request configuration",
        "tags": [
          "Sources"
        ],
        "description": "This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.\n\nAccess request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined.\n- During access request, this source-level entitlement request configuration overrides the global organization-level configuration.\n- However, the entitlement-level configuration (if defined) overrides this source-level configuration.\n\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "responses": {
          "200": {
            "description": "Source Entitlement Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceEntitlementRequestConfig"
                },
                "examples": {
                  "Get default config": {
                    "description": "The default config for a source should look like the following where the empty approvalSchemes indicates that no approvals are required.",
                    "value": {
                      "accessRequestConfig": {
                        "approvalSchemes": [],
                        "requestCommentRequired": false,
                        "denialCommentRequired": false
                      }
                    }
                  },
                  "Get config with one approval": {
                    "description": "In case of a single approval, the config could look like the following.",
                    "value": {
                      "accessRequestConfig": {
                        "approvalSchemes": [
                          {
                            "approverId": null,
                            "approverType": "SOURCE_OWNER"
                          }
                        ],
                        "requestCommentRequired": true,
                        "denialCommentRequired": false
                      }
                    }
                  },
                  "Get config with multiple approvals": {
                    "description": "In case of multiple levels of approvals the config could look like the following. In this scenario, access request review process should go through all the approvers sequentially.",
                    "value": {
                      "accessRequestConfig": {
                        "approvalSchemes": [
                          {
                            "approverId": null,
                            "approverType": "ENTITLEMENT_OWNER"
                          },
                          {
                            "approverId": null,
                            "approverType": "SOURCE_OWNER"
                          },
                          {
                            "approverId": "95e538a3-30c1-433a-af05-4bed973bbc22",
                            "approverType": "GOVERNANCE_GROUP"
                          }
                        ],
                        "requestCommentRequired": true,
                        "denialCommentRequired": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "operationId": "updateSourceEntitlementRequestConfig",
        "summary": "Update source entitlement request configuration",
        "tags": [
          "Sources"
        ],
        "description": "This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.\n\nAccess request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined.\n- During access request, this source-level entitlement request configuration overrides the global organization-level configuration.\n- However, the entitlement-level configuration (if defined) overrides this source-level configuration.\n\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "description": "The Source id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceEntitlementRequestConfig"
              },
              "examples": {
                "Set config with no approvals": {
                  "description": "If no approvals are required, the following config can be set.",
                  "value": {
                    "accessRequestConfig": {
                      "approvalSchemes": []
                    }
                  }
                },
                "Set config with one approval": {
                  "description": "In case of single approval the following config can be set.",
                  "value": {
                    "accessRequestConfig": {
                      "approvalSchemes": [
                        {
                          "approverType": "SOURCE_OWNER"
                        }
                      ],
                      "requestCommentRequired": true,
                      "denialCommentRequired": false
                    }
                  }
                },
                "Set config with multiple approvals": {
                  "description": "In case of multiple levels of approvals the following config can be set. In this scenario, access request review process should go through all the approvers sequentially.",
                  "value": {
                    "accessRequestConfig": {
                      "approvalSchemes": [
                        {
                          "approverType": "ENTITLEMENT_OWNER"
                        },
                        {
                          "approverType": "SOURCE_OWNER"
                        },
                        {
                          "approverType": "GOVERNANCE_GROUP",
                          "approverId": "95e538a3-30c1-433a-af05-4bed973bbc22"
                        }
                      ],
                      "requestCommentRequired": true,
                      "denialCommentRequired": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source Entitlement Request Configuration Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceEntitlementRequestConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/load-accounts": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Account aggregation",
        "operationId": "importAccounts",
        "description": "Starts an account aggregation on the specified source. \nIf the target source is a delimited file source, then the CSV file needs to be included in the request body.\nYou will also need to set the Content-Type header to `multipart/form-data`.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The CSV file containing the source accounts to aggregate."
                  },
                  "disableOptimization": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false"
                    ],
                    "example": "true",
                    "description": "Use this flag to reprocess every account whether or not the data has changed."
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "This content type is provided for compatibility with services that don't support multipart/form-data, such as SailPoint Workflows. This content type does not support files, so it can only be used for direct connect sources.",
                "properties": {
                  "disableOptimization": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false"
                    ],
                    "example": "true",
                    "description": "Use this flag to reprocess every account whether or not the data has changed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Aggregate Accounts Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadAccountsTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/load-entitlements": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Entitlement aggregation",
        "operationId": "importEntitlements",
        "description": "Starts an entitlement aggregation on the specified source. \nIf the target source is a delimited file source, then the CSV file needs to be included in the request body. \nYou will also need to set the Content-Type header to `multipart/form-data`.\nA token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source Id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The CSV file containing the source entitlements to aggregate."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Aggregate Entitlements Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadEntitlementTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:entitlements:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/sources/{sourceId}/load-uncorrelated-accounts": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Process uncorrelated accounts",
        "operationId": "importUncorrelatedAccounts",
        "description": "File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "description": "Source Id",
            "example": "75dbec1ebe154d5785da27b95e1dd5d7"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Uncorrelated Accounts Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadUncorrelatedAccountsTask"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sources/{sourceId}/correlation-config": {
      "get": {
        "operationId": "getCorrelationConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Get source correlation configuration",
        "security": [
          {
            "userAuth": [
              "idn:sources:read",
              "idn:sources:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "description": "This API returns the existing correlation configuration for a source specified by the given ID.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "listSources"
          }
        ],
        "responses": {
          "200": {
            "description": "Correlation configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putCorrelationConfig",
        "tags": [
          "Sources"
        ],
        "summary": "Update source correlation configuration",
        "security": [
          {
            "userAuth": [
              "idn:sources:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ],
        "description": "Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.",
        "parameters": [
          {
            "in": "path",
            "name": "sourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The source id",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "listSources"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorrelationConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated correlation configuration for a source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationConfig"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/{id}": {
      "get": {
        "operationId": "getSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "Get source app by id",
        "description": "This API returns a source app by its ID.",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the source app",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllSourceApp"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the source app.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "Patch source app by id",
        "description": "This API updates an existing source app using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\nThe following fields are patchable: **name**, **description**, **enabled**, **owner**, **provisionRequestEnabled**, **appCenterEnabled**, **accountSource**,  **matchAllAccounts** and **accessProfiles**.\nName, description and owner can't be empty or null.",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the source app to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllSourceApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/enabled",
                    "value": true
                  }
                ]
              },
              "examples": {
                "Make an app enabled and matchAllAccounts in one call": {
                  "description": "This example shows how multiple fields may be updated with a single patch call.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/enabled",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/matchAllAccounts",
                      "value": true
                    }
                  ]
                },
                "Replace an owner for an source app": {
                  "description": "This example shows how to use patch to replace the source app's owner by replacing the owner's info.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/owner",
                      "value": {
                        "id": "2c9180858315595501831958427e5424"
                      }
                    }
                  ]
                },
                "Update the description for the source app": {
                  "description": "This example shows how to use patch to update a description for the source app.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "new description for the source app"
                    }
                  ]
                },
                "Update the name for the source app": {
                  "description": "This example shows how to use patch to update the source app's name.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "source app new name"
                    }
                  ]
                },
                "Add access profile": {
                  "description": "Add one access profile to the existing list",
                  "value": [
                    {
                      "op": "add",
                      "path": "/accessProfiles/-",
                      "value": "2c9180857725c14301772a93bb77242d"
                    }
                  ]
                },
                "Replace access profiles": {
                  "description": "Replace all access profiles with a new list of access profiles",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/accessProfiles",
                      "value": [
                        "2c9180857725c14301772a93bb77242d",
                        "c9575abb5e3a4e3db82b2f989a738aa2"
                      ]
                    }
                  ]
                },
                "Remove access profile": {
                  "description": "Remove the first access profile in the list",
                  "value": [
                    {
                      "op": "remove",
                      "path": "/accessProfiles/0"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the source app as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceAppPatchDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSourceApp",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage",
              "idn:app-roles:delete"
            ]
          }
        ],
        "tags": [
          "Apps"
        ],
        "summary": "Delete source app by id",
        "description": "Use this API to delete a specific source app",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "source app ID.",
            "example": "2c9180835d191a86015d28455b4a2329",
            "x-sailpoint-resource-operation-id": "listAllSourceApp"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the source app as deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/bulk-update": {
      "post": {
        "operationId": "updateSourceAppsInBulk",
        "tags": [
          "Apps"
        ],
        "summary": "Bulk update source apps",
        "description": "This API updates source apps using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  It can update up to 50 source apps in a batch.\nThe following fields can be updated: **name**, **description**, **enabled**, **owner**, **provisionRequestEnabled**, **appCenterEnabled**, **accountSource**,  **matchAllAccounts**, and **accessProfiles**.\nName, description and owner can't be empty or null.",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAppBulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/assigned": {
      "get": {
        "operationId": "listAssignedSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "List assigned source apps",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "description": "This API returns the list of source apps assigned for logged in user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, accountSource.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, co, sw*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**accountSource.id**: *eq, in*",
            "example": "name eq \"source app name\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of source apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceApp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps": {
      "get": {
        "operationId": "listAvailableSourceApps",
        "tags": [
          "Apps"
        ],
        "summary": "List available source apps",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "description": "This API returns the list of source apps available for access request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, co, sw*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**accountSource.id**: *eq, in*",
            "example": "name eq \"source app name\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of source apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceApp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "Create source app",
        "description": "This endpoint creates a source app using the given source app payload",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAppCreateDto"
              },
              "example": {
                "name": "new app name",
                "description": "app description",
                "matchAllAccounts": true,
                "accountSource": {
                  "id": "edcb0951812949d085b60cd8bf35bc78"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the source app as created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/all": {
      "get": {
        "operationId": "listAllSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "List all source apps",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "description": "This API returns the list of all source apps for the org.\n\nA token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, owner.id, accountSource.id**",
            "example": "name,-modified",
            "required": false,
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, co, sw*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*\n\n**owner.id**: *eq, in*\n\n**accountSource.id**: *eq, in*\n\n**enabled**: *eq*",
            "example": "enabled eq true",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of source apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceApp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/{id}/access-profiles": {
      "get": {
        "operationId": "listAccessProfilesForSourceApp",
        "tags": [
          "Apps"
        ],
        "summary": "List access profiles for the specified source app",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "description": "This API returns the list of access profiles for the specified source app",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the source app",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllSourceApp"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in*\n\n**created**: *gt, lt, ge, le*\n\n**modified**: *gt, lt, ge, le*",
            "example": "name eq \"developer access profile\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of access profiles for the specified source app",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessProfileDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-apps/{id}/access-profiles/bulk-remove": {
      "post": {
        "operationId": "deleteAccessProfilesFromSourceAppByBulk",
        "tags": [
          "Apps"
        ],
        "summary": "Bulk remove access profiles from the specified source app",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "description": "This API returns the final list of access profiles for the specified source app after removing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the source app",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllSourceApp"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of access profile IDs for removal",
                "example": [
                  "c9575abb5e3a4e3db82b2f989a738aa2",
                  "c9dc28e148a24d65b3ccb5fb8ca5ddd9"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The final list of access profiles for the specified source app",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessProfileDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/task-status/{id}": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "Get task status by id",
        "description": "Get task status by task ID. Types of tasks include account and entitlement aggregation and other general background processing tasks.  Data for tasks older than 90 days will not be returned.",
        "operationId": "getTaskStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "getTaskStatusList",
            "example": "00eebcf881994e419d72e757fd30dc0e",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a TaskStatus for the task with the given task ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "description": "Forbidden, generally due to a lack of security rights"
          },
          "404": {
            "description": "TaskStatus with the given id was not found."
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          },
          {
            "applicationAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK",
          "CERT_ADMIN",
          "REPORT_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      },
      "patch": {
        "operationId": "updateTaskStatus",
        "tags": [
          "Task Management"
        ],
        "summary": "Update task status by id",
        "description": "Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID.",
            "example": "00eebcf881994e419d72e757fd30dc0e",
            "required": true,
            "x-sailpoint-resource-operation-id": "getTaskStatusList",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The JSONPatch payload used to update the object.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/completionStatus",
                    "value": "Error"
                  },
                  {
                    "op": "replace",
                    "path": "/completed",
                    "value": "2024-05-17T19:33:16.470Z"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response indicates the PATCH operation succeeded, and the API returns the updated task object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:task-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "CERT_ADMIN",
          "REPORT_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/task-status": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "Retrieve task status list",
        "description": "Use this endpoint to get a list of statuses for **completed** tasks. Types of tasks include account and entitlement aggregation and other general background processing tasks.  Data for tasks older than 90 days will not be returned. To get a list of statuses for **in-progress** tasks, please use the [retrieve pending task status list](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.\n",
        "operationId": "getTaskStatusList",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "completionStatus eq \"Success\"",
            "required": false,
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**sourceId**: *eq, in*\n\n**completionStatus**: *eq, in*\n\n**type**: *eq, in*"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "-created",
            "required": false,
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **created**"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a TaskStatus for the task with the given task ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          },
          {
            "applicationAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK",
          "CERT_ADMIN",
          "REPORT_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/task-status/pending-tasks": {
      "get": {
        "tags": [
          "Task Management"
        ],
        "summary": "Retrieve pending task status list",
        "description": "Retrieve a list of statuses for pending tasks. Types of tasks include account and entitlement aggregation and other general background processing tasks.  Data for tasks older than 90 days will not be returned.",
        "operationId": "getPendingTasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a list of TaskStatus for pending tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          },
          {
            "applicationAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK",
          "CERT_ADMIN",
          "REPORT_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      },
      "head": {
        "tags": [
          "Task Management"
        ],
        "summary": "Retrieve pending task list headers",
        "description": "Responds with headers only for list of task statuses for pending tasks.",
        "operationId": "getPendingTaskHeaders",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve headers for a list of TaskStatus for pending tasks."
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          },
          {
            "applicationAuth": [
              "idn:task-management:read",
              "idn:task-management:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "HELPDESK",
          "CERT_ADMIN",
          "REPORT_ADMIN",
          "ROLE_ADMIN",
          "ROLE_SUBADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/tagged-objects": {
      "get": {
        "operationId": "listTaggedObjects",
        "security": [
          {
            "userAuth": [
              "idn:tag:read",
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "List tagged objects",
        "description": "This API returns a list of all tagged objects.\n\nAny authenticated token may be used to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**objectRef.id**: *eq, in*\n\n**objectRef.type**: *eq, in*\n\n**tagName**: *eq, in*",
            "example": "tagName eq \"BU_FINANCE\"",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tagged objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaggedObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "setTagToObject",
        "security": [
          {
            "userAuth": [
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Add tag to object",
        "description": "This adds a tag to an object.\n\nAny authenticated token may be used to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaggedObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tagged-objects/{type}": {
      "get": {
        "operationId": "listTaggedObjectsByType",
        "security": [
          {
            "userAuth": [
              "idn:tag:read",
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "List tagged objects by type",
        "description": "This API returns a list of all tagged objects by type.\n\nAny authenticated token may be used to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "APPLICATION",
                "CAMPAIGN",
                "ENTITLEMENT",
                "IDENTITY",
                "ROLE",
                "SOD_POLICY",
                "SOURCE"
              ]
            },
            "required": true,
            "description": "The type of tagged object to retrieve.",
            "example": "ROLE"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**objectRef.id**: *eq*\n\n**objectRef.type**: *eq*",
            "example": "objectRef.id eq \"2c91808568c529c60168cca6f90c1313\"",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tagged objects for specified type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaggedObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tagged-objects/{type}/{id}": {
      "get": {
        "operationId": "getTaggedObject",
        "security": [
          {
            "userAuth": [
              "idn:tag:read",
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Get tagged object",
        "description": "This gets a tagged object for the specified type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "APPLICATION",
                "CAMPAIGN",
                "ENTITLEMENT",
                "IDENTITY",
                "ROLE",
                "SOD_POLICY",
                "SOURCE"
              ]
            },
            "required": true,
            "description": "The type of tagged object to retrieve.",
            "example": "ROLE"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTaggedObjects",
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Tagged object by type and ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggedObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putTaggedObject",
        "security": [
          {
            "userAuth": [
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Update tagged object",
        "description": "This updates a tagged object for the specified type.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "APPLICATION",
                "CAMPAIGN",
                "ENTITLEMENT",
                "IDENTITY",
                "ROLE",
                "SOD_POLICY",
                "SOURCE"
              ]
            },
            "required": true,
            "description": "The type of tagged object to update.",
            "example": "ROLE"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTaggedObjects",
            "description": "The ID of the object reference to update.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaggedObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tagged object by type and ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggedObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteTaggedObject",
        "security": [
          {
            "userAuth": [
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Delete object tags",
        "description": "Delete all tags from a tagged object.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "APPLICATION",
                "CAMPAIGN",
                "ENTITLEMENT",
                "IDENTITY",
                "ROLE",
                "SOD_POLICY",
                "SOURCE"
              ]
            },
            "required": true,
            "description": "The type of object to delete tags from.",
            "example": "ROLE"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTaggedObjects",
            "description": "The ID of the object to delete tags from.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tagged-objects/bulk-add": {
      "post": {
        "operationId": "setTagsToManyObjects",
        "security": [
          {
            "userAuth": [
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Tag multiple objects",
        "description": "This API adds tags to multiple objects.\n\nA token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "description": "Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTaggedObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTaggedObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tagged-objects/bulk-remove": {
      "post": {
        "operationId": "deleteTagsToManyObject",
        "security": [
          {
            "userAuth": [
              "idn:tag:manage"
            ]
          }
        ],
        "tags": [
          "Tagged Objects"
        ],
        "summary": "Remove tags from multiple objects",
        "description": "This API removes tags from multiple objects.\n\nA token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "requestBody": {
          "description": "Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTaggedObject"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "operationId": "listTags",
        "tags": [
          "Tags"
        ],
        "summary": "List tags",
        "description": "This API returns a list of tags.\n\nA token with API, ORG_ADMIN, CERT_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in, sw*",
            "example": "id eq \"27462f54-61c7-4140-b5da-d5dbe27fc6db\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createTag",
        "tags": [
          "Tags"
        ],
        "summary": "Create tag",
        "description": "This API creates new tag.\n\nA token with API, ORG_ADMIN, CERT_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "1ea1adcb84da4dcb890145e05745774e",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The request was syntactically correct but its content is semantically invalid."
                        }
                      ]
                    }
                  },
                  "400.1.2 Value length out of range": {
                    "description": "Response for invalid tag name",
                    "value": {
                      "detailCode": "400.2.1 Referential integrity violation",
                      "trackingId": "2241d18b9e7d4350a9acfe69f8ce47f1",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "Field \"Tag Name\" length is outside of range [3,128]."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "operationId": "getTagById",
        "tags": [
          "Tags"
        ],
        "summary": "Get tag by id",
        "description": "Returns a tag by its id.\n\nA token with API, ORG_ADMIN, CERT_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTags",
            "description": "The ID of the object reference to retrieve.",
            "example": "329d96cf-3bdb-40a9-988a-b5037ab89022"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteTagById",
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag",
        "description": "This API deletes a tag by specified id.\n\nA token with API, ORG_ADMIN, CERT_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTags",
            "description": "The ID of the object reference to delete.",
            "example": "329d96cf-3bdb-40a9-988a-b5037ab89022"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Client Error - Returned if the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDto"
                },
                "examples": {
                  "400.1 Bad Request Content": {
                    "description": "Response for bad request content",
                    "value": {
                      "detailCode": "400.1 Bad Request Content",
                      "trackingId": "1ea1adcb84da4dcb890145e05745774e",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The request was syntactically correct but its content is semantically invalid."
                        }
                      ]
                    }
                  },
                  "400.2.1 Referential integrity violation": {
                    "description": "Response for reference violations",
                    "value": {
                      "detailCode": "400.2.1 Referential integrity violation",
                      "trackingId": "33956b59f6d44081a11f91959dd8731d",
                      "messages": [
                        {
                          "locale": "en-US",
                          "localeOrigin": "DEFAULT",
                          "text": "The request cannot be fulfilled because doing so would violate referential integrity constraints."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tenant": {
      "get": {
        "operationId": "getTenant",
        "tags": [
          "Tenant"
        ],
        "summary": "Get tenant information.",
        "description": "This rest endpoint can be used to retrieve tenant details.",
        "security": [
          {
            "userAuth": [
              "sp:tenant:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transforms": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "List transforms",
        "description": "Gets a list of all saved transform objects.\nA token with transforms-list read authority is required to call this API.",
        "operationId": "listTransforms",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the transform to retrieve from the list.",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "example": "ExampleTransformName123"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**internal**: *eq*\n\n**name**: *eq, sw*",
            "required": false,
            "style": "form",
            "explode": true,
            "example": "name eq \"Uppercase\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transforms matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransformRead"
                  }
                },
                "example": [
                  {
                    "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                    "name": "Timestamp To Date",
                    "type": "dateFormat",
                    "attributes": {
                      "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                      "outputFormat": "yyyy/dd/MM"
                    },
                    "internal": false
                  },
                  {
                    "id": "2lkas8dhj4bkuakja77giih7l4ashh",
                    "name": "PrefixSubstring",
                    "type": "substring",
                    "attributes": {
                      "begin": 0,
                      "end": 3
                    },
                    "internal": true
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:transform:read",
              "idn:transform:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Transforms"
        ],
        "summary": "Create transform",
        "description": "Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.",
        "operationId": "createTransform",
        "requestBody": {
          "required": true,
          "description": "The transform to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transform"
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM dd yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates the transform was successfully created and returns its representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:transform:manage"
            ]
          }
        ]
      }
    },
    "/transforms/{id}": {
      "get": {
        "tags": [
          "Transforms"
        ],
        "summary": "Transform by id",
        "description": "This API returns the transform specified by the given ID.\nA token with transform read authority is required to call this API.",
        "operationId": "getTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to retrieve",
            "required": true,
            "x-sailpoint-resource-operation-id": "listTransforms",
            "style": "simple",
            "explode": false,
            "example": "2cd78adghjkja34jh2b1hkjhasuecd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transform with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:transform:read",
              "idn:transform:manage"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Transforms"
        ],
        "summary": "Update a transform",
        "description": "Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error.\nA token with transform write authority is required to call this API.",
        "operationId": "updateTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to update",
            "required": true,
            "x-sailpoint-resource-operation-id": "listTransforms",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "2cd78adghjkja34jh2b1hkjhasuecd"
          }
        ],
        "requestBody": {
          "description": "The updated transform object. Must include \"name\", \"type\", and \"attributes\" fields, but \"name\" and \"type\" must not be modified.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transform"
              },
              "example": {
                "name": "Timestamp To Date",
                "type": "dateFormat",
                "attributes": {
                  "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                  "outputFormat": "yyyy/dd/MM"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the transform was successfully updated and returns its new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformRead"
                },
                "example": {
                  "id": "2cd78adghjkja34jh2b1hkjhasuecd",
                  "name": "Timestamp To Date",
                  "type": "dateFormat",
                  "attributes": {
                    "inputFormat": "MMM-dd-yyyy, HH:mm:ss.SSS",
                    "outputFormat": "yyyy/dd/MM"
                  },
                  "internal": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:transform:manage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Transforms"
        ],
        "summary": "Delete a transform",
        "description": "Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform.\nA token with transform delete authority is required to call this API.",
        "operationId": "deleteTransform",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the transform to delete",
            "required": true,
            "x-sailpoint-resource-operation-id": "listTransforms",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "2cd78adghjkja34jh2b1hkjhasuecd"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:transform:manage"
            ]
          }
        ]
      }
    },
    "/translation-catalogs/{catalog-id}": {
      "get": {
        "operationId": "getMessageCatalogs",
        "summary": "Get message catalogs",
        "tags": [
          "IAI Message Catalogs"
        ],
        "description": "The getMessageCatalogs API returns message catalog based on the language headers in the requested object.",
        "parameters": [
          {
            "in": "path",
            "name": "catalog-id",
            "schema": {
              "type": "string",
              "enum": [
                "recommender",
                "access-request-recommender"
              ]
            },
            "required": true,
            "description": "The ID of the message catalog.",
            "example": "recommender"
          }
        ],
        "responses": {
          "200": {
            "description": "The message catalogs based on the request headers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageCatalogDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "iai:decisions:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "Any"
        ]
      }
    },
    "/triggers": {
      "get": {
        "operationId": "listTriggers",
        "tags": [
          "Triggers"
        ],
        "summary": "List triggers",
        "description": "Gets a list of triggers that are available in the tenant.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, ge, le*",
            "example": "id eq \"idn:access-request-post-approval\""
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name**",
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Trigger"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:read"
            ]
          }
        ]
      }
    },
    "/trigger-subscriptions": {
      "post": {
        "operationId": "createSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Create a subscription",
        "description": "This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required:\n* HTTP subscriptions require httpConfig\n* EventBridge subscriptions require eventBridgeConfig",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPostRequest"
              },
              "examples": {
                "HTTP Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "triggerId": "idn:access-requested",
                    "type": "HTTP",
                    "httpConfig": {
                      "url": "https://www.example.com",
                      "httpDispatchMode": "SYNC",
                      "httpAuthenticationType": "BASIC_AUTH",
                      "basicAuthConfig": {
                        "userName": "user@example.com",
                        "password": "eRtg4%6yuI!"
                      }
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "HTTP Async Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "triggerId": "idn:access-requested",
                    "type": "HTTP",
                    "responseDeadline": "PT1H",
                    "httpConfig": {
                      "url": "https://www.example.com",
                      "httpDispatchMode": "ASYNC",
                      "httpAuthenticationType": "BASIC_AUTH",
                      "basicAuthConfig": {
                        "userName": "user@example.com",
                        "password": "eRtg4%6yuI!"
                      }
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "EventBridge Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "triggerId": "idn:access-requested",
                    "type": "EVENTBRIDGE",
                    "eventBridgeConfig": {
                      "awsAccount": "123456789012",
                      "awsRegion": "us-west-1"
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New subscription to a trigger. The trigger can now be invoked by the method defined in the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ]
      },
      "get": {
        "operationId": "listSubscriptions",
        "tags": [
          "Triggers"
        ],
        "summary": "List subscriptions",
        "description": "Gets a list of all trigger subscriptions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "required": false,
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*\n\n**triggerId**: *eq*\n\n**type**: *eq, le*",
            "example": "id eq \"12cff757-c0c0-413b-8ad7-2a47956d1e89\""
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **triggerId, triggerName**",
            "example": "triggerName"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                },
                "examples": {
                  "HTTP Subscription": {
                    "value": [
                      {
                        "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                        "name": "Access request subscription",
                        "description": "Access requested to site xyz",
                        "triggerId": "idn:access-requested",
                        "triggerName": "Access Requested",
                        "type": "HTTP",
                        "httpConfig": {
                          "url": "https://www.example.com",
                          "httpDispatchMode": "SYNC",
                          "httpAuthenticationType": "BASIC_AUTH",
                          "basicAuthConfig": {
                            "userName": "user@example.com",
                            "password": null
                          }
                        },
                        "enabled": true,
                        "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                      }
                    ]
                  },
                  "HTTP Async Subscription": {
                    "value": {
                      "name": "Access request subscription",
                      "description": "Access requested to site xyz",
                      "triggerId": "idn:access-requested",
                      "triggerName": "Access Requested",
                      "type": "HTTP",
                      "responseDeadline": "PT1H",
                      "httpConfig": {
                        "url": "https://www.example.com",
                        "httpDispatchMode": "ASYNC",
                        "httpAuthenticationType": "BASIC_AUTH",
                        "basicAuthConfig": {
                          "userName": "user@example.com",
                          "password": null
                        }
                      },
                      "enabled": true,
                      "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                    }
                  },
                  "EventBridge Subscription": {
                    "value": [
                      {
                        "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                        "name": "Access request subscription",
                        "description": "Access requested to site xyz",
                        "triggerId": "idn:access-requested",
                        "triggerName": "Access Requested",
                        "type": "EVENTBRIDGE",
                        "eventBridgeConfig": {
                          "awsAccount": "123456789012",
                          "awsRegion": "us-west-1"
                        },
                        "enabled": true,
                        "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:read"
            ]
          }
        ]
      }
    },
    "/trigger-subscriptions/{id}": {
      "put": {
        "operationId": "updateSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Update a subscription",
        "description": "This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing\n  Subscription is completely replaced. The following fields are immutable:\n\n\n  * id\n\n  * triggerId\n\n\n  Attempts to modify these fields result in 400.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSubscriptions",
            "description": "Subscription ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPutRequest"
              },
              "examples": {
                "HTTP Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "type": "HTTP",
                    "httpConfig": {
                      "url": "https://www.example.com",
                      "httpDispatchMode": "SYNC",
                      "httpAuthenticationType": "BASIC_AUTH",
                      "basicAuthConfig": {
                        "userName": "user@example.com",
                        "password": "eRtg4%6yuI!"
                      }
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "HTTP Async Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "type": "HTTP",
                    "responseDeadline": "PT1H",
                    "httpConfig": {
                      "url": "https://www.example.com",
                      "httpDispatchMode": "ASYNC",
                      "httpAuthenticationType": "BASIC_AUTH",
                      "basicAuthConfig": {
                        "userName": "user@example.com",
                        "password": "eRtg4%6yuI!"
                      }
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                },
                "EventBridge Subscription": {
                  "value": {
                    "name": "Access request subscription",
                    "description": "Access requested to site xyz",
                    "type": "EVENTBRIDGE",
                    "eventBridgeConfig": {
                      "awsAccount": "123456789012",
                      "awsRegion": "us-west-1"
                    },
                    "enabled": true,
                    "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Patch a subscription",
        "description": "This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:\n\n**name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSubscriptions",
            "description": "ID of the Subscription to patch",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteSubscription",
        "tags": [
          "Triggers"
        ],
        "summary": "Delete a subscription",
        "description": "Deletes an existing subscription to a trigger.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSubscriptions",
            "description": "Subscription ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204",
            "description": "Subscription is deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ]
      }
    },
    "/trigger-subscriptions/validate-filter": {
      "post": {
        "operationId": "testSubscriptionFilter",
        "tags": [
          "Triggers"
        ],
        "summary": "Validate a subscription filter",
        "description": "Validates a JSONPath filter expression against a provided mock input.\nRequest requires a security scope of: ",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateFilterInputDto",
                "required": [
                  "input",
                  "filter"
                ]
              },
              "example": {
                "input": {
                  "identityId": "201327fda1c44704ac01181e963d463c"
                },
                "filter": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean whether specified filter expression is valid against the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateFilterOutputDto"
                },
                "example": {
                  "isValid": true,
                  "isValidJSONPath": true,
                  "isPathExist": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ]
      }
    },
    "/trigger-invocations/status": {
      "get": {
        "operationId": "listTriggerInvocationStatus",
        "tags": [
          "Triggers"
        ],
        "summary": "List latest invocation statuses",
        "description": "Gets a list of latest invocation statuses.\nStatuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours.\nThis endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**triggerId**: *eq*\n\n**subscriptionId**: *eq*",
            "example": "triggerId eq \"idn:access-request-dynamic-approver\""
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **triggerId, subscriptionName, created, completed**",
            "example": "created"
          }
        ],
        "responses": {
          "200": {
            "description": "List of latest invocation statuses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvocationStatus"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-invocation-status:read",
              "sp:trigger-service-invocation-status:manage"
            ]
          }
        ]
      }
    },
    "/trigger-invocations/{id}/complete": {
      "post": {
        "operationId": "completeTriggerInvocation",
        "tags": [
          "Triggers"
        ],
        "summary": "Complete trigger invocation",
        "description": "Completes an invocation to a REQUEST_RESPONSE type trigger.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listTriggerInvocationStatus",
            "description": "The ID of the invocation to complete.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteInvocation"
              },
              "example": {
                "secret": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                "output": {
                  "approved": false
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/trigger-invocations/test": {
      "post": {
        "operationId": "startTestTriggerInvocation",
        "tags": [
          "Triggers"
        ],
        "summary": "Start a test invocation",
        "description": "Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInvocation"
              },
              "examples": {
                "Test Trigger with Mock Input": {
                  "value": {
                    "triggerId": "idn:access-requested",
                    "input": {
                      "identityId": "201327fda1c44704ac01181e963d463c"
                    },
                    "contentJson": {
                      "workflowId": 1234
                    }
                  }
                },
                "Send Test to only One Subscriber": {
                  "value": {
                    "triggerId": "idn:access-requested",
                    "contentJson": {
                      "workflowId": 1234
                    },
                    "subscriptionIds": [
                      "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test trigger invocations that have been started for specified subscription(s).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invocation"
                  }
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/204",
            "description": "Trigger invocation is skipped, because tenant has not subscribed to the specified trigger."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-invocation-status:manage"
            ]
          }
        ]
      }
    },
    "/ui-metadata/tenant": {
      "get": {
        "operationId": "getTenantUiMetadata",
        "tags": [
          "UI Metadata"
        ],
        "summary": "Get a tenant ui metadata",
        "description": "This API endpoint retrieves UI metadata configured for your tenant.\nA token with ORG_ADMIN authority is required to call this API.",
        "security": [
          {
            "userAuth": [
              "idn:ui-access-metadata-page:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A tenant UI metadata object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantUiMetadataItemResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "setTenantUiMetadata",
        "tags": [
          "UI Metadata"
        ],
        "summary": "Update tenant ui metadata",
        "description": "This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI.\nA token with ORG_ADMIN authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantUiMetadataItemUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:ui-access-metadata-page:manage"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A tenant UI metadata object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantUiMetadataItemResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-apps/{id}": {
      "patch": {
        "operationId": "patchUserApp",
        "tags": [
          "Apps"
        ],
        "summary": "Patch user app by id",
        "description": "This API updates an existing user app using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\nThe following fields are patchable: **account**",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user app to patch",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllUserApps"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/account",
                    "value": {
                      "id": "0891808a7813090a017814121e121518",
                      "type": "ACCOUNT"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the user app as updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-apps/{id}/available-accounts": {
      "get": {
        "operationId": "listAvailableAccountsForUserApp",
        "tags": [
          "Apps"
        ],
        "summary": "List available accounts for user app",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "description": "This API returns the list of available accounts for the specified user app. The user app needs to belong lo logged in user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user app",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121e121518"
            },
            "x-sailpoint-resource-operation-id": "listAllUserApps"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available accounts for the specified user app",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppAccountDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-apps": {
      "get": {
        "operationId": "listOwnedUserApps",
        "tags": [
          "Apps"
        ],
        "summary": "List owned user apps",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:read"
            ]
          }
        ],
        "description": "This API returns the list of user apps assigned to logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*\n\n**ownerName**: *eq, sw*\n\n**ownerAlias**: *eq, sw*\n\n**accountId**: *eq*\n\n**sourceAppId**: *eq*",
            "example": "name eq \"user app name\"",
            "required": false,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of user apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserApp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-apps/all": {
      "get": {
        "operationId": "listAllUserApps",
        "tags": [
          "Apps"
        ],
        "summary": "List all user apps",
        "security": [
          {
            "userAuth": [
              "idn:app-roles:manage"
            ]
          }
        ],
        "description": "This API returns the list of all user apps with specified filters.\nThis API must be used with **filters** query parameter.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*\n\n**ownerId**: *eq*\n\n**ownerName**: *eq, sw*\n\n**ownerAlias**: *eq, sw*\n\n**accountId**: *eq*\n\n**sourceAppId**: *eq*",
            "example": "name eq \"user app name\"",
            "required": true,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of user apps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserApp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verified-from-addresses": {
      "get": {
        "operationId": "listFromAddresses",
        "tags": [
          "Notifications"
        ],
        "summary": "List from addresses",
        "description": "Retrieve a list of sender email addresses and their verification statuses",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**email**: *eq, ge, le, sw*",
            "example": "email eq \"john.doe@company.com\""
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **email**",
            "example": "email"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Email Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailStatusDto"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "createVerifiedFromAddress",
        "tags": [
          "Notifications"
        ],
        "summary": "Create verified from address",
        "description": "Create a new sender email address and initiate verification process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailStatusDto"
              },
              "example": {
                "email": "sender@example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New Verified Email Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailStatusDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verified-from-addresses/{id}": {
      "delete": {
        "operationId": "deleteVerifiedFromAddress",
        "tags": [
          "Notifications"
        ],
        "summary": "Delete verified from address",
        "description": "Delete a verified sender email address",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listFromAddresses"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/verified-domains": {
      "get": {
        "security": [
          {
            "userAuth": [
              "sp:notification-dkim-attributes:read"
            ]
          }
        ],
        "operationId": "getDkimAttributes",
        "tags": [
          "Notifications"
        ],
        "summary": "Get dkim attributes",
        "description": "Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants' AWS SES identities. Limits retrieval to 100 identities per call.",
        "responses": {
          "200": {
            "description": "List of DKIM Attributes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DkimAttributes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "security": [
          {
            "userAuth": [
              "sp:notification-verify-domain-dkim:write"
            ]
          }
        ],
        "operationId": "createDomainDkim",
        "tags": [
          "Notifications"
        ],
        "summary": "Verify domain address via dkim",
        "description": "Create a domain to be verified via DKIM (DomainKeys Identified Mail)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainAddress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of DKIM tokens required for the verification process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainStatusDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies": {
      "post": {
        "operationId": "createSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Create sod policy",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy.\nRequires role of ORG_ADMIN.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SodPolicy"
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": {
                    "name": "Conflicting-Policy-Name",
                    "description": "This policy ensures compliance of xyz",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  }
                },
                "General Policy": {
                  "value": {
                    "description": "Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "name": "General-Policy-Name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SOD policy created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicy"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "This policy ensures compliance of xyz",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listSodPolicies",
        "tags": [
          "SOD Policies"
        ],
        "summary": "List sod policies",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:read"
            ]
          }
        ],
        "description": "This gets list of all SOD policies.\nRequires role of ORG_ADMIN",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in*\n\n**name**: *eq, in*\n\n**state**: *eq, in*",
            "example": "id eq \"bc693f07e7b645539626c25954c58554\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "required": false,
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "example": "id,name",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **id, name, created, modified, description**"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all SOD policies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SodPolicy"
                  }
                },
                "example": [
                  {
                    "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "name": "Conflicting-Policy-Name",
                    "created": "2020-01-01T00:00:00.000000Z",
                    "modified": "2020-01-01T00:00:00.000000Z",
                    "description": "This policy ensures compliance of xyz",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "description": "Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "type": "GENERAL",
                    "conflictingAccessCriteria": null,
                    "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                    "name": "General-Policy-Name",
                    "created": "2020-05-12T19:47:38Z",
                    "modified": "2020-05-12T19:47:38Z"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}": {
      "get": {
        "operationId": "getSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Get sod policy by id",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:read"
            ]
          }
        ],
        "description": "This gets specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "SOD policy ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicy"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "This policy ensures compliance of xyz",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Update sod policy by id",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "This updates a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the SOD policy to update.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SodPolicy"
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": {
                    "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "name": "Conflicting-Policy-Name",
                    "created": "2020-01-01T00:00:00.000000Z",
                    "modified": "2020-01-01T00:00:00.000000Z",
                    "description": "Modified Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "XYZ policy",
                    "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                    "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                    "state": "ENFORCED",
                    "tags": [
                      "string"
                    ],
                    "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                    "violationOwnerAssignmentConfig": {
                      "assignmentRule": "MANAGER",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Violation Owner Name"
                      }
                    },
                    "scheduled": true,
                    "type": "CONFLICTING_ACCESS_BASED",
                    "conflictingAccessCriteria": {
                      "leftCriteria": {
                        "name": "money-in",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a66"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a67"
                          }
                        ]
                      },
                      "rightCriteria": {
                        "name": "money-out",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a68"
                          },
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c9180866166b5b0016167c32ef31a69"
                          }
                        ]
                      }
                    }
                  }
                },
                "General Policy": {
                  "value": {
                    "description": "Modified Description",
                    "ownerRef": {
                      "type": "IDENTITY",
                      "id": "2c918087682f9a86016839c05e8f1aff",
                      "name": "Owner Name"
                    },
                    "externalPolicyReference": "New policy",
                    "policyQuery": "policy query implementation",
                    "compensatingControls": "Compensating controls",
                    "correctionAdvice": "Correction advice",
                    "tags": [],
                    "state": "ENFORCED",
                    "scheduled": false,
                    "creatorId": "2c918087682f9a86016839c05e8f1aff",
                    "modifierId": null,
                    "violationOwnerAssignmentConfig": null,
                    "type": "GENERAL",
                    "conflictingAccessCriteria": null,
                    "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                    "name": "General-Policy-Name",
                    "created": "2020-05-12T19:47:38Z",
                    "modified": "2020-05-12T19:47:38Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SOD Policy by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicy"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c9180866166b5b0016167c32ef31a68 OR id:2c9180866166b5b0016167c32ef31a69)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a68"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a69"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Modified Description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Delete sod policy by id",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "This deletes a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the SOD Policy to delete.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "query",
            "name": "logical",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Indicates whether this is a soft delete (logical true) or a hard delete.",
            "required": false,
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Patch a sod policy",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\nRequires role of ORG_ADMIN.\nThis endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the SOD policy being modified.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.\n\nThe following fields are patchable:\n* name\n* description\n* ownerRef\n* externalPolicyReference\n* compensatingControls\n* correctionAdvice\n* state\n* tags\n* violationOwnerAssignmentConfig\n* scheduled\n* conflictingAccessCriteria\n",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "examples": {
                "Conflicting Access Based Policy": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Modified description"
                    },
                    {
                      "op": "replace",
                      "path": "/conflictingAccessCriteria/leftCriteria/name",
                      "value": "money-in-modified"
                    },
                    {
                      "op": "replace",
                      "path": "/conflictingAccessCriteria/rightCriteria",
                      "value": {
                        "name": "money-out-modified",
                        "criteriaList": [
                          {
                            "type": "ENTITLEMENT",
                            "id": "2c918087682f9a86016839c0509c1ab2"
                          }
                        ]
                      }
                    }
                  ]
                },
                "General Policy": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Modified description"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates the PATCH operation succeeded, and returns the SOD policy's new representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicy"
                },
                "examples": {
                  "Conflicting Access Based Policy": {
                    "value": {
                      "id": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "name": "Conflicting-Policy-Name",
                      "created": "2020-01-01T00:00:00.000000Z",
                      "modified": "2020-01-01T00:00:00.000000Z",
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "XYZ policy",
                      "policyQuery": "@access(id:2c9180866166b5b0016167c32ef31a66 OR id:2c9180866166b5b0016167c32ef31a67) AND @access(id:2c918087682f9a86016839c0509c1ab2)",
                      "compensatingControls": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
                      "correctionAdvice": "Based on the role of the employee, managers should remove access that is not required for their job function.",
                      "state": "ENFORCED",
                      "tags": [
                        "string"
                      ],
                      "creatorId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "modifierId": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
                      "violationOwnerAssignmentConfig": {
                        "assignmentRule": "MANAGER",
                        "ownerRef": {
                          "type": "IDENTITY",
                          "id": "2c91808568c529c60168cca6f90c1313",
                          "name": "Violation Owner Name"
                        }
                      },
                      "scheduled": true,
                      "type": "CONFLICTING_ACCESS_BASED",
                      "conflictingAccessCriteria": {
                        "leftCriteria": {
                          "name": "money-in-modified",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a66"
                            },
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c9180866166b5b0016167c32ef31a67"
                            }
                          ]
                        },
                        "rightCriteria": {
                          "name": "money-out-modified",
                          "criteriaList": [
                            {
                              "type": "ENTITLEMENT",
                              "id": "2c918087682f9a86016839c0509c1ab2"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "General Policy": {
                    "value": {
                      "description": "Modified description",
                      "ownerRef": {
                        "type": "IDENTITY",
                        "id": "2c918087682f9a86016839c05e8f1aff",
                        "name": "Owner Name"
                      },
                      "externalPolicyReference": "New policy",
                      "policyQuery": "policy query implementation",
                      "compensatingControls": "Compensating controls",
                      "correctionAdvice": "Correction advice",
                      "tags": [],
                      "state": "ENFORCED",
                      "scheduled": false,
                      "creatorId": "2c918087682f9a86016839c05e8f1aff",
                      "modifierId": null,
                      "violationOwnerAssignmentConfig": null,
                      "type": "GENERAL",
                      "conflictingAccessCriteria": null,
                      "id": "52c11db4-733e-4c31-949a-766c95ec95f1",
                      "name": "General-Policy-Name",
                      "created": "2020-05-12T19:47:38Z",
                      "modified": "2020-05-12T19:47:38Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/schedule": {
      "get": {
        "operationId": "getSodPolicySchedule",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Get sod policy schedule",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:read"
            ]
          }
        ],
        "description": "This endpoint gets a specified SOD policy's schedule.\nRequires the role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "SOD policy ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicySchedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putPolicySchedule",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Update sod policy schedule",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "This updates schedule for a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the SOD policy to update its schedule.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SodPolicySchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SOD policy by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SodPolicySchedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteSodPolicySchedule",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Delete sod policy schedule",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-policy:write"
            ]
          }
        ],
        "description": "This deletes schedule for a specified SOD policy.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The ID of the SOD policy the schedule must be deleted for.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/violation-report/run": {
      "post": {
        "operationId": "startSodPolicy",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Runs sod policy violation report",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:write"
            ]
          }
        ],
        "description": "This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listSodPolicies",
            "description": "The SOD policy ID to run.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Reference to the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReference"
                },
                "example": {
                  "status": "PENDING",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies/{id}/violation-report": {
      "get": {
        "operationId": "getSodViolationReportStatus",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Get sod violation report status",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "description": "This gets the status for a violation report run task that has already been invoked.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "startSodPolicy",
            "description": "The ID of the object reference to retrieve.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReference"
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-violations/predict": {
      "post": {
        "operationId": "startPredictSodViolations",
        "tags": [
          "SOD Violations"
        ],
        "summary": "Predict sod violations for identity.",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "description": "This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.\n\nA token with ORG_ADMIN or API authority is required to call this API.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityWithNewAccess"
              },
              "example": {
                "identityId": "2c91808568c529c60168cca6f90c1313",
                "accessRefs": [
                  {
                    "type": "ENTITLEMENT",
                    "id": "2c918087682f9a86016839c050861ab1"
                  },
                  {
                    "type": "ENTITLEMENT",
                    "id": "2c918087682f9a86016839c0509c1ab2"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Violation Contexts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViolationPrediction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-policies/sod-violation-report-status/{reportResultId}": {
      "get": {
        "operationId": "getSodViolationReportRunStatus",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Get violation report run status",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "description": "This gets the status for a violation report run task that has already been invoked.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "getSodAllReportRunStatus",
            "description": "The ID of the report reference to retrieve.",
            "example": "2e8d8180-24bc-4d21-91c6-7affdb473b0d"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReference"
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "2e8d8180-24bc-4d21-91c6-7affdb473b0d",
                  "name": "policy-xyz"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/run": {
      "post": {
        "operationId": "startSodAllPoliciesForOrg",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Runs all policies for org",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:write"
            ]
          }
        ],
        "description": "Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided.\nRequires role of ORG_ADMIN.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiPolicyRequest"
              },
              "example": {
                "filteredPolicyList": [
                  "b868cd40-ffa4-4337-9c07-1a51846cfa94",
                  "63a07a7b-39a4-48aa-956d-50c827deba2a"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reference to the violation report run task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReference"
                },
                "example": {
                  "status": "PENDING",
                  "type": "REPORT_RESULT",
                  "id": "37b3b32a-f394-46f8-acad-b5223969fa68",
                  "name": "Multi Query Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-violation-report": {
      "get": {
        "operationId": "getSodAllReportRunStatus",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Get multi-report run task status",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "description": "This endpoint gets the status for a violation report for all policy run.\nRequires role of ORG_ADMIN.",
        "responses": {
          "200": {
            "description": "Status of the violation report run task for all policy run.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReference"
                },
                "example": {
                  "status": "SUCCESS",
                  "type": "REPORT_RESULT",
                  "id": "37b3b32a-f394-46f8-acad-b5223969fa68",
                  "name": "Multi Query Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/{reportResultId}/download": {
      "get": {
        "operationId": "getDefaultViolationReport",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Download violation report",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "description": "This allows to download a violation report for a given report reference.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "startSodPolicy",
            "description": "The ID of the report reference to download.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PolicyReport.zip that contains the violation report file.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sod-violation-report/{reportResultId}/download/{fileName}": {
      "get": {
        "operationId": "getCustomViolationReport",
        "tags": [
          "SOD Policies"
        ],
        "summary": "Download custom violation report",
        "deprecated": true,
        "security": [
          {
            "userAuth": [
              "idn:sod-violation:read"
            ]
          }
        ],
        "description": "This allows to download a specified named violation report for a given report reference.\nRequires role of ORG_ADMIN.",
        "parameters": [
          {
            "in": "path",
            "name": "reportResultId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "startSodPolicy",
            "description": "The ID of the report reference to download.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "fileName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Custom Name for the  file.",
            "example": "custom-name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the zip file with given custom name that contains the violation report file.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items": {
      "get": {
        "operationId": "listWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "List work items",
        "description": "This gets a collection of work items belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [List Work Items](https://developer.sailpoint.com/docs/api/v2025/list-work-items/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/completed": {
      "get": {
        "operationId": "getCompletedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Completed work items",
        "description": "This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Completed Work Items](https://developer.sailpoint.com/docs/api/v2025/get-completed-work-items/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "example": "2c91808571bcfcf80171c23e4b4221fc",
            "description": "The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          }
        ],
        "responses": {
          "200": {
            "description": "List of completed work items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/count": {
      "get": {
        "operationId": "getCountWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count work items",
        "description": "This gets a count of work items belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Count Work Items](https://developer.sailpoint.com/docs/api/v2025/get-count-work-items/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "example": "2c91808571bcfcf80171c23e4b4221fc",
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsCount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/completed/count": {
      "get": {
        "operationId": "getCountCompletedWorkItems",
        "tags": [
          "Work Items"
        ],
        "summary": "Count completed work items",
        "description": "This gets a count of completed work items belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Count Completed Work Items](https://developer.sailpoint.com/docs/api/v2025/get-count-completed-work-items/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "example": "2c91808571bcfcf80171c23e4b4221fc",
            "description": "ID of the work item owner.",
            "required": false
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemsCount"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/summary": {
      "get": {
        "operationId": "getWorkItemsSummary",
        "tags": [
          "Work Items"
        ],
        "summary": "Work items summary",
        "description": "This gets a summary of work items belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Work Items Summary](https://developer.sailpoint.com/docs/api/v2025/get-work-items-summary) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "description": "ID of the work item owner.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of work items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsSummary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/{id}": {
      "get": {
        "operationId": "getWorkItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Get a work item",
        "description": "This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Get a Work Item](https://developer.sailpoint.com/docs/api/v2025/get-work-item/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            },
            "description": "ID of the work item owner.",
            "required": false,
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "ID of the work item.",
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "responses": {
          "200": {
            "description": "The work item with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkItems"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "completeWorkItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Complete a work item",
        "description": "This API completes a work item. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Complete a Work Item](https://developer.sailpoint.com/docs/api/v2025/complete-work-item/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "description": "Body is the request payload to create form definition request",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A WorkItems object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/forward": {
      "post": {
        "operationId": "submitForwardWorkItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Forward a work item",
        "description": "This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Forward a Work Item](https://developer.sailpoint.com/docs/api/v2025/forward-work-item/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkItemForward"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success, but no data is returned."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/approve/{approvalItemId}": {
      "post": {
        "operationId": "approveApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Approve an approval item",
        "description": "This API approves an Approval Item. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Approve an Approval Item](https://developer.sailpoint.com/docs/api/v2025/approve-approval-item/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/reject/{approvalItemId}": {
      "post": {
        "operationId": "rejectApprovalItem",
        "tags": [
          "Work Items"
        ],
        "summary": "Reject an approval item",
        "description": "This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Reject an Approval Item](https://developer.sailpoint.com/docs/api/v2025/reject-approval-item/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          {
            "in": "path",
            "name": "approvalItemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the approval item.",
            "example": "1211bcaa32112bcef6122adb21cef1ac"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/bulk-approve/{id}": {
      "post": {
        "operationId": "approveApprovalItemsInBulk",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk approve approval items",
        "description": "This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Bulk approve Approval Items](https://developer.sailpoint.com/docs/api/v2025/approve-approval-items-in-bulk/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/bulk-reject/{id}": {
      "post": {
        "operationId": "rejectApprovalItemsInBulk",
        "tags": [
          "Work Items"
        ],
        "summary": "Bulk reject approval items",
        "description": "This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Bulk reject Approval Items](https://developer.sailpoint.com/docs/api/v2025/reject-approval-items-in-bulk/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/work-items/{id}/submit-account-selection": {
      "post": {
        "operationId": "submitAccountSelection",
        "tags": [
          "Work Items"
        ],
        "summary": "Submit account selections",
        "description": "This API submits account selections. Either an admin, or the owning/current user must make this request.",
        "deprecated": true,
        "x-deprecated-description": "This API has been deprecated, please refer to [Submit Account Selections](https://developer.sailpoint.com/docs/api/v2025/submit-account-selection/) for latest API.\n",
        "security": [
          {
            "userAuth": [
              "idn:work-item:update"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkItems",
            "description": "The ID of the work item",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              },
              "example": {
                "fieldName": "fieldValue"
              }
            }
          },
          "description": "Account Selection Data map, keyed on fieldName"
        },
        "responses": {
          "200": {
            "description": "A work items details object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItems"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows": {
      "post": {
        "operationId": "createWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Create workflow",
        "description": "Create a new workflow with the desired trigger and steps specified in the request body.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "name",
                      "owner"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/WorkflowBody"
                  }
                ]
              },
              "examples": {
                "Event Trigger": {
                  "description": "Workflow initiated by an event trigger",
                  "value": {
                    "name": "Send Email",
                    "owner": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "William Wilson"
                    },
                    "description": "Send an email to the identity who's attributes changed.",
                    "definition": {
                      "start": "Send Email Test",
                      "steps": {
                        "Send Email": {
                          "actionId": "sp:send-email",
                          "attributes": {
                            "body": "This is a test",
                            "from": "sailpoint@sailpoint.com",
                            "recipientId.$": "$.identity.id",
                            "subject": "test"
                          },
                          "nextStep": "success",
                          "selectResult": null,
                          "type": "action"
                        },
                        "success": {
                          "type": "success"
                        }
                      }
                    },
                    "enabled": false,
                    "trigger": {
                      "type": "EVENT",
                      "attributes": {
                        "id": "idn:identity-attributes-changed",
                        "filter": "$.changes[?(@.attribute == 'manager')]"
                      }
                    }
                  }
                },
                "Scheduled Trigger": {
                  "description": "Workflow initiated by a scheduled trigger",
                  "value": {
                    "name": "Send Email",
                    "owner": {
                      "type": "IDENTITY",
                      "id": "2c91808568c529c60168cca6f90c1313",
                      "name": "William Wilson"
                    },
                    "description": "Send an email to the identity who's attributes changed.",
                    "definition": {
                      "start": "Send Email Test",
                      "steps": {
                        "Send Email": {
                          "actionId": "sp:send-email",
                          "attributes": {
                            "body": "This is a test",
                            "from": "sailpoint@sailpoint.com",
                            "recipientId.$": "$.identity.id",
                            "subject": "test"
                          },
                          "nextStep": "success",
                          "selectResult": null,
                          "type": "action"
                        },
                        "success": {
                          "type": "success"
                        }
                      }
                    },
                    "enabled": false,
                    "trigger": {
                      "type": "SCHEDULED",
                      "attributes": {
                        "cronString": "0 * */3 */5 *"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listWorkflows",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflows",
        "description": "List all workflows in the tenant.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
            "required": false,
            "example": 250,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 250,
              "default": 250
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
            "required": false,
            "example": 0,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "enabled eq true and triggerId eq \"abc123\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**enabled**: *eq*      \n\n**connectorInstanceId**: *eq*\n\n**triggerId**: *eq*",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **modified, name**",
            "example": "modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{id}": {
      "get": {
        "operationId": "getWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow by id",
        "description": "Get a single workflow by id.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          },
          {
            "name": "workflowMetrics",
            "in": "query",
            "description": "disable workflow metrics",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "operationId": "putWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Update workflow",
        "description": "Perform a full update of a workflow.  The updated workflow object is returned in the response.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Patch workflow",
        "description": "Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "Update all patchable fields": {
                  "description": "Demonstrate how to update each patchable field in one PATCH request.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "Send Email"
                    },
                    {
                      "op": "replace",
                      "path": "/owner",
                      "value": {
                        "type": "IDENTITY",
                        "id": "2c91808568c529c60168cca6f90c1313",
                        "name": "William Wilson"
                      }
                    },
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Send an email to the identity who's attributes changed."
                    },
                    {
                      "op": "replace",
                      "path": "/enabled",
                      "value": false
                    },
                    {
                      "op": "replace",
                      "path": "/definition",
                      "value": {
                        "start": "Send Email Test",
                        "steps": {
                          "Send Email": {
                            "actionId": "sp:send-email",
                            "attributes": {
                              "body": "This is a test",
                              "from": "sailpoint@sailpoint.com",
                              "recipientId.$": "$.identity.id",
                              "subject": "test"
                            },
                            "nextStep": "success",
                            "selectResult": null,
                            "type": "action"
                          },
                          "success": {
                            "type": "success"
                          }
                        }
                      }
                    },
                    {
                      "op": "replace",
                      "path": "/trigger",
                      "value": {
                        "type": "EVENT",
                        "attributes": {
                          "id": "idn:identity-attributes-changed"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Delete workflow by id",
        "description": "Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:manage"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/test": {
      "post": {
        "operationId": "testWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Test workflow by id",
        "description": "Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow.\nThis endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint.\n**This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**",
        "security": [
          {
            "userAuth": [
              "sp:workflow-execute:external"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "input"
                ],
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The test input for the workflow."
                  }
                }
              },
              "examples": {
                "Identity Attributes Changed": {
                  "description": "Identity Attributes Changed Trigger Input",
                  "value": {
                    "input": {
                      "identity": {
                        "id": "ee769173319b41d19ccec6cea52f237b",
                        "name": "john.doe",
                        "type": "IDENTITY"
                      },
                      "changes": [
                        {
                          "attribute": "department",
                          "oldValue": "sales",
                          "newValue": "marketing"
                        },
                        {
                          "attribute": "manager",
                          "oldValue": {
                            "id": "ee769173319b41d19ccec6c235423237b",
                            "name": "nice.guy",
                            "type": "IDENTITY"
                          },
                          "newValue": {
                            "id": "ee769173319b41d19ccec6c235423236c",
                            "name": "mean.guy",
                            "type": "IDENTITY"
                          }
                        },
                        {
                          "attribute": "email",
                          "oldValue": "john.doe@hotmail.com",
                          "newValue": "john.doe@gmail.com"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowExecutionId": {
                      "type": "string",
                      "description": "The workflow execution id",
                      "example": "0e11cefa-96e7-4b67-90d0-065bc1da5753"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/executions": {
      "get": {
        "operationId": "getWorkflowExecutions",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflow executions",
        "description": "Use this API to list a specified workflow's executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following: \n1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows. \n2. Get your workflow ID from the response. \n3. You can then do either of the following: \n\n  - Filter to find relevant workflow executions.\n  For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`\n\n  - Paginate through results with the `offset` parameter. \n  For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250. \n  Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination. ",
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_SUBADMIN",
          "SOURCE_ADMIN"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "example": "status eq \"Failed\"",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**startTime**: *eq, lt, le, gt, ge*\n\n**status**: *eq*",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow executions for the specified workflow. ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowExecution"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-executions/{id}": {
      "get": {
        "operationId": "getWorkflowExecution",
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow execution",
        "description": "Get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.",
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ],
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow execution ID.",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow execution.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkflowExecution"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-executions/{id}/history": {
      "get": {
        "operationId": "getWorkflowExecutionHistory",
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow execution history",
        "description": "Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow execution",
            "required": true,
            "x-sailpoint-resource-operation-id": "getWorkflowExecutions",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow execution events for the given workflow execution",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowExecutionEvent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-executions/{id}/cancel": {
      "post": {
        "operationId": "cancelWorkflowExecution",
        "tags": [
          "Workflows"
        ],
        "summary": "Cancel workflow execution by id",
        "description": "Use this API to cancel a running workflow execution.",
        "security": [
          {
            "userAuth": [
              "sp:workflow-execute:external"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The workflow execution ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "getWorkflowExecutions",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-library": {
      "get": {
        "operationId": "listCompleteWorkflowLibrary",
        "tags": [
          "Workflows"
        ],
        "summary": "List complete workflow library",
        "description": "This lists all triggers, actions, and operators in the library",
        "externalDocs": {
          "description": "Additional documentation for workflows",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow steps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/WorkflowLibraryAction"
                      },
                      {
                        "$ref": "#/components/schemas/WorkflowLibraryTrigger"
                      },
                      {
                        "$ref": "#/components/schemas/WorkflowLibraryOperator"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-library/actions": {
      "get": {
        "operationId": "listWorkflowLibraryActions",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflow library actions",
        "description": "This lists the workflow actions available to you.",
        "externalDocs": {
          "description": "Additional documentation for each action",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html#actions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*",
            "example": "id eq \"sp:create-campaign\""
          }
        ],
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowLibraryAction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-library/triggers": {
      "get": {
        "operationId": "listWorkflowLibraryTriggers",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflow library triggers",
        "description": "This lists the workflow triggers available to you",
        "externalDocs": {
          "description": "Additional documentation for each trigger",
          "url": "https://documentation.sailpoint.com/saas/help/workflows/workflow-steps.html#triggers"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq*",
            "example": "id eq \"idn:identity-attributes-changed\""
          }
        ],
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow triggers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowLibraryTrigger"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflow-library/operators": {
      "get": {
        "operationId": "listWorkflowLibraryOperators",
        "tags": [
          "Workflows"
        ],
        "summary": "List workflow library operators",
        "description": "This lists the workflow operators available to you",
        "security": [
          {
            "userAuth": [
              "sp:workflow:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowLibraryOperator"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{id}/external/oauth-clients": {
      "post": {
        "operationId": "postWorkflowExternalTrigger",
        "tags": [
          "Workflows"
        ],
        "summary": "Generate external trigger oauth client",
        "description": "Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.",
        "security": [
          {
            "userAuth": [
              "sp:workflow:manage"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The OAuth Client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowOAuthClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/execute/external/{id}": {
      "post": {
        "operationId": "postExternalExecuteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Execute workflow via external trigger",
        "description": "This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.",
        "security": [
          {
            "userAuth": [
              "sp:workflow-execute:external"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The input for the workflow",
                    "example": {
                      "customAttribute1": "value1",
                      "customAttribute2": "value2"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflowExecutionId": {
                      "type": "string",
                      "description": "The workflow execution id",
                      "example": "0e11cefa-96e7-4b67-90d0-065bc1da5753"
                    },
                    "message": {
                      "type": "string",
                      "description": "An error message if any errors occurred",
                      "example": "Workflow was not executed externally. Check enabled flag on workflow definition"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/execute/external/{id}/test": {
      "post": {
        "operationId": "testExternalExecuteWorkflow",
        "tags": [
          "Workflows"
        ],
        "summary": "Test workflow via external trigger",
        "description": "Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.",
        "security": [
          {
            "userAuth": [
              "sp:workflow-execute:external"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the workflow",
            "required": true,
            "x-sailpoint-resource-operation-id": "listWorkflows",
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "The test input for the workflow",
                    "example": {
                      "test": "hello world"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responds with the test input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payload": {
                      "type": "object",
                      "description": "The input that was received",
                      "example": {
                        "test": "hello world"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workgroups": {
      "get": {
        "operationId": "listWorkgroups",
        "tags": [
          "Governance Groups"
        ],
        "summary": "List governance groups",
        "description": "This API returns list of Governance Groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**id**: *eq, in, sw*\n\n**name**: *eq, sw, in*\n\n**memberships.identityId**: *eq, in*",
            "example": "name sw \"Test\"",
            "required": false
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified, id, description**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Governance Groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkgroupDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:read"
            ]
          }
        ]
      },
      "post": {
        "operationId": "createWorkgroup",
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ],
        "tags": [
          "Governance Groups"
        ],
        "summary": "Create a new governance group.",
        "description": "This API creates a new Governance Group.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkgroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Governance Group object created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workgroups/{id}": {
      "get": {
        "operationId": "getWorkgroup",
        "tags": [
          "Governance Groups"
        ],
        "summary": "Get governance group by id",
        "description": "This API returns a Governance Groups by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Governance Group",
            "example": "2c9180837ca6693d017ca8d097500149"
          }
        ],
        "responses": {
          "200": {
            "description": "A Governance Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:read"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteWorkgroup",
        "tags": [
          "Governance Groups"
        ],
        "summary": "Delete a governance group",
        "description": "This API deletes a Governance Group by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Governance Group",
            "example": "2c9180837ca6693d017ca8d097500149"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchWorkgroup",
        "tags": [
          "Governance Groups"
        ],
        "summary": "Patch a governance group",
        "description": "This API updates an existing governance group by ID. \nThe following fields and objects are patchable:\n  * name\n  * description\n  * owner\n\nA token with API or ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Governance Group",
            "example": "2c9180837ca6693d017ca8d097500149"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperation"
                }
              },
              "examples": {
                "Replace Description": {
                  "description": "Replace description of a Governance Group.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Governance Group new description."
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Governance Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupDto"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ]
      }
    },
    "/workgroups/bulk-delete": {
      "post": {
        "operationId": "deleteWorkgroupsInBulk",
        "summary": "Delete governance group(s)",
        "tags": [
          "Governance Groups"
        ],
        "description": "\nThis API initiates a bulk deletion of one or more Governance Groups.\n\n>  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.\n\n>  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.\n\n>  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.\n\n>  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it. \n\n>  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkgroupBulkDeleteRequest"
              },
              "example": {
                "ids": [
                  "567a697e-885b-495a-afc5-d55e1c23a302",
                  "c7b0f7b2-1e78-4063-b294-a555333dacd2"
                ]
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Governance Group bulk delete response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupBulkDeleteResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ]
      }
    },
    "/workgroups/{workgroupId}/connections": {
      "get": {
        "operationId": "listConnections",
        "tags": [
          "Governance Groups"
        ],
        "summary": "List connections for governance group",
        "description": "This API returns list of connections associated with a Governance Group.",
        "parameters": [
          {
            "name": "workgroupId",
            "in": "path",
            "description": "ID of the Governance Group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit50"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List all connections associated with a Governance Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkgroupConnectionDto"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:read"
            ]
          }
        ]
      }
    },
    "/workgroups/{workgroupId}/members": {
      "get": {
        "operationId": "listWorkgroupMembers",
        "tags": [
          "Governance Groups"
        ],
        "summary": "List governance group members",
        "description": "This API returns list of members associated with a Governance Group.",
        "parameters": [
          {
            "name": "workgroupId",
            "in": "path",
            "description": "ID of the Governance Group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit50"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, created, modified**",
            "example": "name,-modified",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List all members associated with a Governance Group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Identity of workgroup member.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Workgroup member identity DTO type.",
                        "enum": [
                          "IDENTITY"
                        ],
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "Workgroup member identity ID.",
                        "example": "2c7180a46faadee4016fb4e018c20642"
                      },
                      "name": {
                        "type": "string",
                        "description": "Workgroup member identity display name.",
                        "example": "Michael Michaels"
                      },
                      "email": {
                        "type": "string",
                        "description": "Workgroup member identity email.",
                        "example": "michael.michaels@sailpoint.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:workgroup:read"
            ]
          }
        ]
      }
    },
    "/workgroups/{workgroupId}/members/bulk-add": {
      "post": {
        "operationId": "updateWorkgroupMembers",
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ],
        "tags": [
          "Governance Groups"
        ],
        "summary": "Add members to governance group",
        "description": "This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.\n\n>  **Following field of Identity is an optional field in the request.**\n\n>  **name**",
        "parameters": [
          {
            "name": "workgroupId",
            "in": "path",
            "description": "ID of the Governance Group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          }
        ],
        "requestBody": {
          "description": "List of identities to be added to a Governance Group members list.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkWorkgroupMembersRequest"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "List of added and not added identities into  Governance Group members list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupMemberBulkAddResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workgroups/{workgroupId}/members/bulk-delete": {
      "post": {
        "operationId": "deleteWorkgroupMembers",
        "security": [
          {
            "userAuth": [
              "idn:workgroup:write"
            ]
          }
        ],
        "tags": [
          "Governance Groups"
        ],
        "summary": "Remove members from governance group",
        "description": "This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.\n\n>  **Following field of Identity is an optional field in the request.**\n\n>  **name**",
        "parameters": [
          {
            "name": "workgroupId",
            "in": "path",
            "description": "ID of the Governance Group.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2c91808a7813090a017814121919ecca"
            }
          }
        ],
        "requestBody": {
          "description": "List of identities to be removed from  a Governance Group members list.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkWorkgroupMembersRequest"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "List of deleted and not deleted identities from Governance Group members list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkgroupMemberBulkDeleteResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/form-definitions": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Export form definitions by tenant.",
        "description": "No parameters required.",
        "operationId": "searchFormDefinitionsByTenant",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset\n\nInteger specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nThe offset value is record-based, not page-based, and the index starts at 0.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            },
            "example": 250,
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit\n\nInteger specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nIf it is not specified, a default limit is used.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maxLength": 250,
              "minLength": 0,
              "default": 250
            },
            "example": 250,
            "required": false
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *eq, gt, sw, in*\n\n**description**: *eq, gt, sw, in*\n\n**created**: *eq, gt, sw, in*\n\n**modified**: *eq, gt, sw, in*",
            "schema": {
              "type": "string"
            },
            "example": "name sw \"my form\"",
            "required": false
          },
          {
            "name": "sorters",
            "in": "query",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, description, created, modified**",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "example": "name",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of form definitions by tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFormDefinitionsByTenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Creates a form definition.",
        "operationId": "createFormDefinition",
        "requestBody": {
          "description": "Body is the request payload to create form definition request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormDefinitionRequest"
              },
              "example": {
                "name": "my form",
                "description": "my form description",
                "owner": {
                  "type": "IDENTITY",
                  "id": "00000000-0000-0000-0000-000000000000"
                },
                "formElements": [
                  {
                    "id": "000000000000",
                    "elementType": "SECTION",
                    "config": {
                      "alignment": "LEFT",
                      "description": "elementType must be 'SECTION' for the root formElements,  child formElements must be within the 'config' attribute",
                      "label": "Section",
                      "labelStyle": "h2",
                      "showLabel": true,
                      "formElements": [
                        {
                          "id": "0000000000000",
                          "key": "textField",
                          "elementType": "TEXT",
                          "config": {
                            "default": "",
                            "description": "",
                            "helpText": "form element type text",
                            "label": "Text Field",
                            "placeholder": "",
                            "required": false
                          },
                          "validations": []
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a new form definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      }
    },
    "/form-definitions/{formDefinitionID}": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Return a form definition.",
        "description": "Parameter `{formDefinitionID}` should match a form definition ID.",
        "operationId": "getFormDefinitionByKey",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "Form definition ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormDefinitionID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a form definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Deletes a form definition.",
        "description": "Parameter `{formDefinitionID}` should match a form definition ID.",
        "operationId": "deleteFormDefinition",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "Form definition ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormDefinitionID"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nil"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Patch a form definition.",
        "description": "Parameter `{formDefinitionID}` should match a form definition ID.",
        "operationId": "patchFormDefinition",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "Form definition ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormDefinitionID"
          }
        ],
        "requestBody": {
          "description": "Body is the request payload to patch a form definition, check: https://jsonpatch.com",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/description",
                  "value": "test-description"
                }
              ]
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the form definition updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-definitions/{formDefinitionID}/data-source": {
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Preview form definition data source.",
        "operationId": "showPreviewDataSource",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "Form definition ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormDefinitionID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit\n\nInteger specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nIf it is not specified, a default limit is used.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maxLength": 250,
              "minLength": 0,
              "default": 10,
              "x-go-name": "Limit"
            },
            "example": 10,
            "required": false,
            "x-go-name": "Limit"
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**value**: *eq, ne, in*\n\nSupported composite operators: *not*\n\nOnly a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")`",
            "schema": {
              "type": "string",
              "x-go-name": "Filters"
            },
            "example": "value eq \"ID01\"",
            "required": false,
            "x-go-name": "Filters"
          },
          {
            "name": "query",
            "in": "query",
            "description": "String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields.",
            "schema": {
              "type": "string",
              "x-go-name": "Query"
            },
            "example": "ac",
            "required": false,
            "x-go-name": "Query"
          }
        ],
        "requestBody": {
          "description": "Body is the request payload to create a form definition dynamic schema",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormElementPreviewRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns a preview of a form definition data source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewDataSourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      }
    },
    "/form-definitions/export": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "List form definitions by tenant.",
        "description": "No parameters required.",
        "operationId": "exportFormDefinitionsByTenant",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset\n\nInteger specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nThe offset value is record-based, not page-based, and the index starts at 0.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0,
              "x-go-name": "Offset"
            },
            "example": 0,
            "required": false,
            "x-go-name": "Offset"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit\n\nInteger specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nIf it is not specified, a default limit is used.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maxLength": 250,
              "minLength": 0,
              "default": 250,
              "x-go-name": "Limit"
            },
            "example": 250,
            "required": false,
            "x-go-name": "Limit"
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**name**: *eq, gt, sw, in*\n\n**description**: *eq, gt, sw, in*\n\n**created**: *eq, gt, sw, in*\n\n**modified**: *eq, gt, sw, in*",
            "schema": {
              "type": "string",
              "x-go-name": "Filters"
            },
            "example": "name sw \"my form\"",
            "required": false,
            "x-go-name": "Filters"
          },
          {
            "name": "sorters",
            "in": "query",
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, description, created, modified**",
            "schema": {
              "type": "string",
              "default": "name",
              "x-go-name": "Sorters"
            },
            "example": "name",
            "required": false,
            "x-go-name": "Sorters"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of form definition objects by tenant used by SP-Config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "$ref": "#/components/schemas/FormDefinitionResponse"
                      },
                      "self": {
                        "$ref": "#/components/schemas/FormDefinitionSelfImportExportDto"
                      },
                      "version": {
                        "type": "integer",
                        "x-go-name": "Version"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      }
    },
    "/form-definitions/forms-action-dynamic-schema": {
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Generate json schema dynamically.",
        "operationId": "createFormDefinitionDynamicSchema",
        "requestBody": {
          "description": "Body is the request payload to create a form definition dynamic schema",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormDefinitionDynamicSchemaRequest"
              },
              "example": {
                "id": "sp:forms",
                "attributes": {
                  "formDefinitionId": "00000000-0000-0000-0000-000000000000"
                },
                "description": "AnotherDescription",
                "type": "action",
                "versionNumber": 1
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns a form elements dynamic schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionDynamicSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-definitions/import": {
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Import form definitions from export.",
        "operationId": "importFormDefinitions",
        "requestBody": {
          "description": "Body is the request payload to import form definitions",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "$ref": "#/components/schemas/FormDefinitionResponse"
                    },
                    "self": {
                      "type": "string",
                      "x-go-name": "Self"
                    },
                    "version": {
                      "type": "integer",
                      "x-go-name": "Version"
                    }
                  }
                }
              },
              "example": [
                {
                  "version": 1,
                  "self": {
                    "name": "All fields not required",
                    "id": "05ed4edb-d0a9-41d9-ad0c-2f6e486ec4aa",
                    "type": "FORM_DEFINITION"
                  },
                  "object": {
                    "id": "05ed4edb-d0a9-41d9-ad0c-2f6e486ec4aa",
                    "name": "All fields not required",
                    "description": "description",
                    "owner": {
                      "type": "IDENTITY",
                      "id": "3447d8ec2602455ab6f1e8408a0f0150"
                    },
                    "usedBy": [
                      {
                        "type": "WORKFLOW",
                        "id": "5008594c-dacc-4295-8fee-41df60477304"
                      },
                      {
                        "type": "WORKFLOW",
                        "id": "97e75a75-c179-4fbc-a2da-b5fa4aaa8743"
                      }
                    ],
                    "formInput": [
                      {
                        "type": "STRING",
                        "label": "input1",
                        "description": "A single dynamic scalar value (i.e. number, string, date, etc) that can be passed into the form for use in conditional logic"
                      }
                    ],
                    "formElements": [
                      {
                        "id": "3069272797630701",
                        "elementType": "SECTION",
                        "config": {
                          "label": "First Section",
                          "formElements": [
                            {
                              "id": "3069272797630700",
                              "elementType": "TEXT",
                              "key": "firstName",
                              "config": {
                                "label": "First Name"
                              }
                            },
                            {
                              "id": "3498415402897539",
                              "elementType": "TEXT",
                              "key": "lastName",
                              "config": {
                                "label": "Last Name"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "formConditions": [
                      {
                        "ruleOperator": "AND",
                        "rules": [
                          {
                            "sourceType": "INPUT",
                            "source": "Department",
                            "operator": "EQ",
                            "valueType": "STRING",
                            "value": "Sales"
                          }
                        ],
                        "effects": [
                          {
                            "effectType": "HIDE",
                            "config": {
                              "element": "2614088730489570"
                            }
                          }
                        ]
                      }
                    ],
                    "created": "2022-10-04T19:27:04.456Z",
                    "modified": "2022-11-16T20:45:02.172Z"
                  }
                }
              ]
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Returns statuses of those form definition objects imported",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "detail": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object"
                            },
                            "x-go-name": "Detail"
                          },
                          "key": {
                            "type": "string",
                            "x-go-name": "Key"
                          },
                          "text": {
                            "type": "string",
                            "x-go-name": "Text"
                          }
                        }
                      },
                      "x-go-name": "Errors"
                    },
                    "importedObjects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "object": {
                            "$ref": "#/components/schemas/FormDefinitionResponse"
                          },
                          "self": {
                            "$ref": "#/components/schemas/FormDefinitionSelfImportExportDto"
                          },
                          "version": {
                            "type": "integer",
                            "x-go-name": "Version"
                          }
                        }
                      },
                      "x-go-name": "ImportedObjects"
                    },
                    "infos": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "detail": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object"
                            },
                            "x-go-name": "Detail"
                          },
                          "key": {
                            "type": "string",
                            "x-go-name": "Key"
                          },
                          "text": {
                            "type": "string",
                            "x-go-name": "Text"
                          }
                        }
                      },
                      "x-go-name": "Infos"
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "detail": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object"
                            },
                            "x-go-name": "Detail"
                          },
                          "key": {
                            "type": "string",
                            "x-go-name": "Key"
                          },
                          "text": {
                            "type": "string",
                            "x-go-name": "Text"
                          }
                        }
                      },
                      "x-go-name": "Warnings"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-definitions/template": {
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Create a form definition by template.",
        "operationId": "createFormDefinitionByTemplate",
        "requestBody": {
          "description": "Body is the request payload to create form definition request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormDefinitionRequest"
              },
              "example": {
                "name": "my form",
                "description": "my form description",
                "owner": {
                  "type": "IDENTITY",
                  "id": "00000000-0000-0000-0000-000000000000"
                },
                "formElements": [
                  {
                    "id": "000000000000",
                    "elementType": "SECTION",
                    "config": {
                      "alignment": "LEFT",
                      "description": "elementType must be 'SECTION' for the root formElements,  child formElements must be within the 'config' attribute",
                      "label": "Section",
                      "labelStyle": "h2",
                      "showLabel": true,
                      "formElements": [
                        {
                          "id": "0000000000000",
                          "key": "textField",
                          "elementType": "TEXT",
                          "config": {
                            "default": "",
                            "description": "",
                            "helpText": "form element type text",
                            "label": "Text Field",
                            "placeholder": "",
                            "required": false
                          },
                          "validations": []
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a new form definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "trackingId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      }
    },
    "/form-definitions/{formDefinitionID}/upload": {
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Upload new form definition file.",
        "description": "Parameter `{formDefinitionID}` should match a form definition ID.",
        "operationId": "createFormDefinitionFileRequest",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "FormDefinitionID\n\nString specifying FormDefinitionID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "example": "00000000-0000-0000-0000-000000000000",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "x-go-name": "FormDefinitionID"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File specifying the multipart",
                    "format": "binary",
                    "x-go-name": "File"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "image/png, image/jpeg"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns a new form definition file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDefinitionFileUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "An error with payload size too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "An error with unsupported media type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An external service is not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-definitions/{formDefinitionID}/file/{fileID}": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Download definition file by fileid.",
        "operationId": "getFileFromS3",
        "parameters": [
          {
            "name": "formDefinitionID",
            "in": "path",
            "description": "FormDefinitionID\n\nForm definition ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "example": "00000000-0000-0000-0000-000000000000",
            "schema": {
              "type": "string",
              "x-go-name": "FormDefinitionID"
            },
            "x-go-name": "FormDefinitionID"
          },
          {
            "name": "fileID",
            "in": "path",
            "description": "FileID\n\nString specifying the hashed name of the uploaded file we are retrieving.",
            "required": true,
            "x-sailpoint-resource-operation-id": "createFormDefinitionFileRequest",
            "example": "00000031N0J7R2B57M8YG73J7M.png",
            "schema": {
              "type": "string",
              "x-go-name": "FileID"
            },
            "x-go-name": "FileID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file that is referred to by fileID and associated with the formDefinitionID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An external service is not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-instances": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "List form instances by tenant.",
        "description": "No parameters required.",
        "operationId": "searchFormInstancesByTenant",
        "responses": {
          "200": {
            "description": "Returns a list of form instances by tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormInstanceResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Creates a form instance.",
        "operationId": "createFormInstance",
        "requestBody": {
          "description": "Body is the request payload to create a form instance",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormInstanceRequest"
              },
              "example": {
                "expire": "2023-06-20T15:57:55.332882Z",
                "formDefinitionId": "00000000-0000-0000-0000-000000000000",
                "recipients": [
                  {
                    "type": "IDENTITY",
                    "id": "an-identity-id"
                  }
                ],
                "createdBy": {
                  "type": "WORKFLOW_EXECUTION",
                  "id": "a-workflow-execution-id"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a new form instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-instances/{formInstanceID}": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Returns a form instance.",
        "description": "Parameter `{formInstanceID}` should match a form instance ID.",
        "operationId": "getFormInstanceByKey",
        "parameters": [
          {
            "name": "formInstanceID",
            "in": "path",
            "description": "Form instance ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormInstancesByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormInstanceID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormInstanceID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a form instance by its key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Patch a form instance.",
        "description": "Parameter `{formInstanceID}` should match a form instance ID.",
        "operationId": "patchFormInstance",
        "parameters": [
          {
            "name": "formInstanceID",
            "in": "path",
            "description": "Form instance ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormInstancesByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormInstanceID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormInstanceID"
          }
        ],
        "requestBody": {
          "description": "Body is the request payload to patch a form instance, check: https://jsonpatch.com",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patch"
              },
              "example": [
                {
                  "op": "replace",
                  "path": "/state",
                  "value": "SUBMITTED"
                },
                {
                  "op": "replace",
                  "path": "/formData",
                  "value": {
                    "a-key-1": "a-value-1",
                    "a-key-2": true,
                    "a-key-3": 1
                  }
                }
              ]
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the form instance updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormInstanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "An error with the request property conflicts with stored",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": []
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-instances/{formInstanceID}/data-source/{formElementID}": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Retrieves dynamic data by element.",
        "description": "Parameter `{formInstanceID}` should match a form instance ID.\nParameter `{formElementID}` should match a form element ID at the data source configuration.",
        "operationId": "searchFormElementDataByElementID",
        "parameters": [
          {
            "name": "formInstanceID",
            "in": "path",
            "description": "Form instance ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "schema": {
              "type": "string",
              "x-go-name": "FormInstanceID"
            },
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormInstanceID"
          },
          {
            "name": "formElementID",
            "in": "path",
            "description": "Form element ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "getFormInstanceByKey",
            "schema": {
              "type": "string",
              "x-go-name": "FormElementID"
            },
            "example": 1,
            "x-go-name": "FormElementID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit\n\nInteger specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nIf it is not specified, a default limit is used.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maxLength": 250,
              "minLength": 0,
              "default": 250,
              "x-go-name": "Limit"
            },
            "example": 250,
            "required": false,
            "x-go-name": "Limit"
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**value**: *eq, ne, in*\n\nSupported composite operators: *not*\n\nOnly a single *not* may be used, and it can only be used with the `in` operator. The `not` composite operator must be used in front of the field. For example, the following is valid: `not value in (\"ID01\")`",
            "schema": {
              "type": "string",
              "x-go-name": "Filters"
            },
            "example": "value eq \"ID01\"",
            "required": false,
            "x-go-name": "Filters"
          },
          {
            "name": "query",
            "in": "query",
            "description": "String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \"starts with\" filter against  several fields.",
            "schema": {
              "type": "string",
              "x-go-name": "Query"
            },
            "example": "support",
            "required": false,
            "x-go-name": "Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves dynamic data to aid in correctly completing a valid form by form element ID from data source configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFormElementDataByElementIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": []
          }
        ]
      }
    },
    "/form-instances/{formInstanceID}/file/{fileID}": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "Download instance file by fileid.",
        "operationId": "getFormInstanceFile",
        "parameters": [
          {
            "name": "formInstanceID",
            "in": "path",
            "description": "FormInstanceID\n\nForm instance ID",
            "required": true,
            "x-sailpoint-resource-operation-id": "searchFormDefinitionsByTenant",
            "example": "00000000-0000-0000-0000-000000000000",
            "schema": {
              "type": "string",
              "x-go-name": "FormInstanceID"
            },
            "x-go-name": "FormInstanceID"
          },
          {
            "name": "fileID",
            "in": "path",
            "description": "FileID\n\nString specifying the hashed name of the uploaded file we are retrieving.",
            "required": true,
            "x-sailpoint-resource-operation-id": "createFormDefinitionFileRequest",
            "example": "00000031N0J7R2B57M8YG73J7M.png",
            "schema": {
              "type": "string",
              "x-go-name": "FileID"
            },
            "x-go-name": "FileID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a file that is referred to by fileID and associated with the formInstanceID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error with the item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "An external service is not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ],
        "x-codegen-request-body-name": "Body"
      }
    },
    "/form-definitions/predefined-select-options": {
      "get": {
        "tags": [
          "Custom Forms"
        ],
        "summary": "List predefined select options.",
        "description": "No parameters required.",
        "operationId": "searchPreDefinedSelectOptions",
        "responses": {
          "200": {
            "description": "Returns a list of available predefined select options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPredefinedSelectOptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "An error with the request occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "An error with the authorization occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error with the user permissions occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detailCode": {
                      "type": "string",
                      "x-go-name": "DetailCode"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      },
                      "x-go-name": "Messages"
                    },
                    "statusCode": {
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "StatusCode"
                    },
                    "trackingId": {
                      "type": "string",
                      "x-go-name": "TrackingID"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:forms:manage"
            ]
          }
        ]
      }
    },
    "/source-usages/{sourceId}/status": {
      "get": {
        "tags": [
          "Source Usages"
        ],
        "summary": "Finds status of source usage",
        "description": "This API returns the status of the source usage insights setup by IDN source ID.",
        "operationId": "getStatusBySourceId",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "ID of IDN source",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "example": "2c9180835d191a86015d28455b4a2329"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:accounts:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the source usage insights setup by IDN source ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUsageStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/source-usages/{sourceId}/summaries": {
      "get": {
        "tags": [
          "Source Usages"
        ],
        "summary": "Returns source usage insights",
        "description": "This API returns a summary of source usage insights for past 12 months.",
        "operationId": "getUsagesBySourceId",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "ID of IDN source",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSources",
            "schema": {
              "type": "string"
            },
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **date**",
            "example": "-date"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:accounts:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Summary of source usage insights for past 12 months.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/account-usages/{accountId}/summaries": {
      "get": {
        "tags": [
          "Account Usages"
        ],
        "summary": "Returns account usage insights",
        "description": "This API returns a summary of account usage insights for past 12 months.",
        "operationId": "getUsagesByAccountId",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of IDN account",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ef38f94347e94562b5bb8424a56397d8",
            "x-sailpoint-resource-operation-id": "listAccounts"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **date**",
            "example": "-date"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:accounts:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Summary of account usage insights for past 12 months.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountUsage"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/access-request-identity-metrics/{identityId}/requested-objects/{requestedObjectId}/type/{type}": {
      "get": {
        "tags": [
          "Access Request Identity Metrics"
        ],
        "summary": "Return access request identity metrics",
        "description": "Use this API to return information access metrics.",
        "operationId": "getAccessRequestIdentityMetrics",
        "parameters": [
          {
            "name": "identityId",
            "in": "path",
            "description": "Manager's identity ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "7025c863-c270-4ba6-beea-edf3cb091573",
            "x-sailpoint-resource-operation-id": "listIdentities"
          },
          {
            "name": "requestedObjectId",
            "in": "path",
            "description": "Requested access item's ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2db501be-f0fb-4cc5-a695-334133c52891",
            "x-sailpoint-resource-operation-id": "listRequestableObjects"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Requested access item's type.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ENTITLEMENT",
              "description": "Access item's type.",
              "enum": [
                "ENTITLEMENT",
                "ACCESS_PROFILE",
                "ROLE"
              ]
            },
            "example": "ENTITLEMENT"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:access-request-approvals:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Summary of the resource access and source activity for the direct reports of the provided manager.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/AccessRequestIdentityMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/manual-discover-applications-template": {
      "get": {
        "summary": "Download csv template for discovery",
        "tags": [
          "Application Discovery"
        ],
        "description": "Download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values 'Example Application' and 'Example Description'.\n\nThe downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.\n",
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:read"
            ]
          }
        ],
        "operationId": "getManualDiscoverApplicationsCsvTemplate",
        "responses": {
          "200": {
            "description": "A CSV file download was successful.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ManualDiscoverApplicationsTemplate"
                },
                "example": "application_name,description\nExample Application,Example Description\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/manual-discover-applications": {
      "post": {
        "summary": "Upload csv to discover applications",
        "tags": [
          "Application Discovery"
        ],
        "description": "Upload a CSV file with application data for manual correlation to specific ISC connectors. \nIf a suitable ISC connector is unavailable, the system will recommend generic connectors instead.",
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:write"
            ]
          }
        ],
        "operationId": "sendManualDiscoverApplicationsCsvTemplate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ManualDiscoverApplications"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The CSV has been successfully processed."
          },
          "400": {
            "$ref": "#/components/responses/400",
            "description": "Bad request - There was an error with the CSV format or validation failed (e.g., `application_name` missing). Error message should be provided in response.\n"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/discovered-applications": {
      "get": {
        "operationId": "getDiscoveredApplications",
        "tags": [
          "Application Discovery"
        ],
        "summary": "Retrieve discovered applications for tenant",
        "description": "Get a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.\n",
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "in": "query",
            "name": "detail",
            "schema": {
              "type": "string",
              "enum": [
                "SLIM",
                "FULL"
              ]
            },
            "description": "Determines whether slim, or increased level of detail is provided for each discovered application in the returned list. SLIM is the default behavior.",
            "example": "FULL"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n  \n  \nFiltering is supported for the following fields and operators:\n\n**name**: *eq, sw, co*\n\n**description**: *eq, sw, co*\n\n**createdAtStart**: *eq, le, ge*\n\n**createdAtEnd**: *eq, le, ge*\n\n**discoveredAtStart**: *eq, le, ge*\n\n**discoveredAtEnd**: *eq, le, ge*\n\n**discoverySource**: *eq, in*\n",
            "example": "name eq \"Okta\" and description co \"Okta\" and discoverySource in (\"csv\", \"Okta Saas\")",
            "required": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sorters",
            "schema": {
              "type": "string",
              "format": "comma-separated"
            },
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **name, description, discoveredAt, discoverySource**",
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of discovered applications. By default, the API returns a list of SLIM discovered applications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SlimDiscoveredApplications"
                      },
                      {
                        "$ref": "#/components/schemas/FullDiscoveredApplications"
                      }
                    ]
                  }
                },
                "examples": {
                  "Slim Discovered Application": {
                    "$ref": "#/components/examples/SlimDiscoveredApplications"
                  },
                  "Discovered Application": {
                    "$ref": "#/components/examples/FullDiscoveredApplications"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/discovered-applications/{id}": {
      "get": {
        "operationId": "getDiscoveredApplicationByID",
        "tags": [
          "Application Discovery"
        ],
        "summary": "Get discovered application by id",
        "description": "Get the discovered application, along with with its associated sources, based on the provided ID.\n",
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Discovered application's ID.",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the discovered application, along with its associated sources.",
            "content": {
              "application/json": {
                "example": {
                  "id": "app-123",
                  "name": "Example App",
                  "discoverySource": "csv",
                  "discoveredVendor": "Example Vendor",
                  "description": "An application for managing examples.",
                  "recommendedConnectors": [
                    "ConnectorA",
                    "ConnectorB"
                  ],
                  "discoveredAt": "2023-07-01T12:00:00Z",
                  "createdAt": "2024-06-01T12:00:00Z",
                  "status": "ACTIVE",
                  "associatedSources": [
                    "4e2d7605-833f-4c34-8d03-5b2c7d2f4f66",
                    "f9b7e2ce-aced-4117-a95f-4ffad8b33989",
                    "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "operationId": "patchDiscoveredApplicationByID",
        "tags": [
          "Application Discovery"
        ],
        "summary": "Patch discovered application by id",
        "description": "Update an existing discovered application by using a limited version of the [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.\nYou can patch these fields: - **associatedSources** - **dismissed**",
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Discovered application's ID.",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonPatchOperations"
                },
                "example": [
                  {
                    "op": "replace",
                    "path": "/dismissed",
                    "value": false
                  }
                ]
              },
              "examples": {
                "Dismiss an app": {
                  "description": "This example shows how use patch to set the dismissal status of a correlated application to true.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/dismissed",
                      "value": true
                    }
                  ]
                },
                "Replace associated sources": {
                  "description": "This example shows how use patch to replace the values of the associatedSources field.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/associatedSources",
                      "value": [
                        "4e2d7605-833f-4c34-8d03-5b2c7d2f4f66",
                        "f9b7e2ce-aced-4117-a95f-4ffad8b33989",
                        "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f"
                      ]
                    }
                  ]
                },
                "Add an associated source to a correlated application": {
                  "description": "This example shows how to use patch to add an associated source to a correlated application.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/associatedSources",
                      "value": "123e4567-e89b-a456-42655440005"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the single patched discovered application.",
            "content": {
              "application/json": {
                "example": {
                  "id": "app-123",
                  "name": "Example App",
                  "discoverySource": "csv",
                  "discoveredVendor": "Example Vendor",
                  "description": "An application for managing examples.",
                  "recommendedConnectors": [
                    "ConnectorA",
                    "ConnectorB"
                  ],
                  "discoveredAt": "2023-07-01T12:00:00Z",
                  "createdAt": "2024-06-01T12:00:00Z",
                  "status": "ACTIVE",
                  "associatedSources": [
                    "4e2d7605-833f-4c34-8d03-5b2c7d2f4f66",
                    "f9b7e2ce-aced-4117-a95f-4ffad8b33989",
                    "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/vendor-connector-mappings": {
      "get": {
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:read"
            ]
          }
        ],
        "operationId": "getVendorConnectorMappings",
        "tags": [
          "Vendor Connector Mappings"
        ],
        "summary": "List vendor connector mappings",
        "description": "Get a list of mappings between SaaS vendors and ISC connectors, detailing the connections established for correlation.\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorConnectorMapping"
                  },
                  "example": [
                    {
                      "id": "78733556-9ea3-4f59-bf69-e5cd92b011b4",
                      "vendor": "Example Vendor",
                      "connector": "Example Connector",
                      "createdAt": "2024-03-13T12:56:19.391294Z",
                      "createdBy": "admin",
                      "updatedAt": {
                        "Time": "2024-03-14T12:56:19.391294Z",
                        "Valid": true
                      },
                      "updatedBy": {
                        "String": "user-67891",
                        "Valid": true
                      },
                      "deletedAt": {
                        "Time": "0001-01-01T00:00:00Z",
                        "Valid": false
                      },
                      "deletedBy": {
                        "String": "",
                        "Valid": false
                      }
                    },
                    {
                      "id": "78733556-9ea3-4f59-bf69-e5cd92b011b5",
                      "vendor": "Another Corporation",
                      "connector": "Another Connector",
                      "createdAt": "2024-04-13T11:46:19.391294Z",
                      "createdBy": "admin",
                      "updatedAt": {
                        "Time": "0001-01-01T00:00:00Z",
                        "Valid": false
                      },
                      "updatedBy": {
                        "String": "",
                        "Valid": false
                      },
                      "deletedAt": {
                        "Time": "0001-01-01T00:00:00Z",
                        "Valid": false
                      },
                      "deletedBy": {
                        "String": "",
                        "Valid": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:write"
            ]
          }
        ],
        "operationId": "createVendorConnectorMapping",
        "tags": [
          "Vendor Connector Mappings"
        ],
        "summary": "Create vendor connector mapping",
        "description": "Create a new mapping between a SaaS vendor and an ISC connector to establish correlation paths.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorConnectorMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new vendor connector mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorConnectorMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "userAuth": [
              "idn:application-discovery:write"
            ]
          }
        ],
        "operationId": "deleteVendorConnectorMapping",
        "tags": [
          "Vendor Connector Mappings"
        ],
        "summary": "Delete vendor connector mapping",
        "description": "Soft delete a mapping between a SaaS vendor and an ISC connector, removing the established correlation.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorConnectorMapping"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deleted the specified vendor connector mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of vendor connector mappings successfully deleted.",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/icons/{objectType}/{objectId}": {
      "put": {
        "operationId": "setIcon",
        "tags": [
          "Icons"
        ],
        "summary": "Update an icon",
        "description": "This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "objectType",
            "schema": {
              "type": "string",
              "enum": [
                "application"
              ]
            },
            "required": true,
            "description": "Object type",
            "example": "application"
          },
          {
            "in": "path",
            "name": "objectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Object id.",
            "example": "a291e870-48c3-4953-b656-fb5ce2a93169",
            "x-sailpoint-resource-operation-id": "searchObjects"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "image"
                ],
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "file with icon. Allowed mime-types ['image/png', 'image/jpeg']",
                    "example": "\\x00\\x00\\x00\\x02"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:icons:manage"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Icon updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "icon": {
                      "type": "string",
                      "description": "url to file with icon",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "deleteIcon",
        "tags": [
          "Icons"
        ],
        "summary": "Delete an icon",
        "description": "This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.",
        "parameters": [
          {
            "in": "path",
            "name": "objectType",
            "schema": {
              "type": "string",
              "enum": [
                "application"
              ]
            },
            "required": true,
            "description": "Object type",
            "example": "application"
          },
          {
            "in": "path",
            "name": "objectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Object id.",
            "example": "a291e870-48c3-4953-b656-fb5ce2a93169",
            "x-sailpoint-resource-operation-id": "searchObjects"
          }
        ],
        "security": [
          {
            "userAuth": [
              "idn:icons:manage"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/suggested-entitlement-description-batches/{batchId}/stats": {
      "get": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "getSedBatchStats",
        "summary": "Submit sed batch stats request",
        "description": "Submit Sed Batch Stats Request.\n\nSubmits batchId in the path param `(e.g. {batchId}/stats)`.\nAPI responses with stats of the batchId.\n",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch Id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb",
            "required": true,
            "x-sailpoint-resource-operation-id": "getSedBatches"
          }
        ],
        "responses": {
          "200": {
            "description": "Stats of Sed batch.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SedBatchStats"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ]
      }
    },
    "/suggested-entitlement-description-batches": {
      "get": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "getSedBatches",
        "summary": "List Sed Batch Record",
        "description": "List Sed Batches.\nAPI responses with Sed Batch Records",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset\n\nInteger specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nThe offset value is record-based, not page-based, and the index starts at 0.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0,
              "x-go-name": "Offset"
            },
            "example": 0,
            "required": false,
            "x-go-name": "Offset"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit\n\nInteger specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nIf it is not specified, a default limit is used.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maxLength": 250,
              "minLength": 0,
              "default": 250,
              "x-go-name": "Limit"
            },
            "example": 250,
            "required": false,
            "x-go-name": "Limit"
          },
          {
            "name": "count",
            "in": "query",
            "description": "If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. \nThe standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nSince requesting a total count can have a performance impact, it is recommended not to send `count=true` if that value will not be used.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true,
            "required": false
          },
          {
            "name": "count-only",
            "in": "query",
            "description": "If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored.\nThis parameter differs from the count parameter in that this one skips executing the actual query and always return an empty array.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true,
            "required": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Batch Status",
            "schema": {
              "type": "string"
            },
            "example": "completed, failed, submitted, materialized, failed",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of Sed Batch Records",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Sed"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ]
      },
      "post": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "submitSedBatchRequest",
        "summary": "Submit sed batch request",
        "description": "Submit Sed Batch Request.\nRequest body has one of the following:\n  - a list of entitlement Ids\n  - a list of SED Ids\nthat user wants to have description generated by LLM.  API responses with batchId that groups Ids together",
        "requestBody": {
          "description": "Sed Batch Request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SedBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sed Batch Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SedBatchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN"
        ]
      }
    },
    "/suggested-entitlement-description-approvals": {
      "post": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "summary": "Submit bulk approval request",
        "description": "Submit Bulk Approval Request for SED.\nRequest body takes list of SED Ids. API responses with list of SED Approval Status",
        "operationId": "submitSedApproval",
        "requestBody": {
          "description": "Sed Approval",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/SedApproval"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of SED Approval Status",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SedApprovalStatus"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:write"
            ]
          }
        ]
      }
    },
    "/suggested-entitlement-description-assignments": {
      "post": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "submitSedAssignment",
        "summary": "Submit sed assignment request",
        "description": "Submit Assignment Request.\nRequest body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together",
        "requestBody": {
          "description": "Sed Assignment Request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SedAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Sed Assignment Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SedAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:write"
            ]
          }
        ]
      }
    },
    "/suggested-entitlement-descriptions": {
      "get": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "listSeds",
        "summary": "List suggested entitlement descriptions",
        "description": "List of Suggested Entitlement Descriptions (SED)\n\nSED field descriptions:\n\n**batchId**: the ID of the batch of entitlements that are submitted for description generation\n\n**displayName**: the display name of the entitlement that we are generating a description for\n\n**sourceName**: the name of the source associated with the entitlement that we are generating the description for\n\n**sourceId**: the ID of the source associated with the entitlement that we are generating the description for\n\n**status**: the status of the suggested entitlement description, valid status options: \"requested\", \"suggested\", \"not_suggested\", \"failed\", \"assigned\", \"approved\", \"denied\"\n\n**fullText**: will filter suggested entitlement description records by text found in any of the following fields: entitlement name, entitlement display name, suggested description, source name",
        "parameters": [
          {
            "description": "Integer specifying the maximum number of records to return in a single API call. \nThe standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "example": "limit=25"
          },
          {
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**batchId**: *eq, ne*\n\n**displayName**: *eq, ne, co*\n\n**sourceName**: *eq, ne, co*\n\n**sourceId**: *eq, ne*\n\n**status**: *eq, ne*\n\n**fullText**: *co*",
            "in": "query",
            "name": "filters",
            "example": "displayName co \"Read and Write\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)\n\nSorting is supported for the following fields: **displayName, sourceName, status**",
            "in": "query",
            "name": "sorters",
            "example": "sorters=displayName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored. \nThe standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results).\nSince requesting a total count can have a performance impact, it is recommended not to send `count=true` if that value will not be used.",
            "in": "query",
            "name": "count",
            "example": "count=true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If `true` it will populate the `X-Total-Count` response header with the number of results that would be returned if `limit` and `offset` were ignored.\nThis parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.",
            "in": "query",
            "name": "count-only",
            "example": "count-only=true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "By default, the ListSeds API will only return items that you have requested to be generated.  \nThis option will allow you to see all items that have been requested",
            "in": "query",
            "name": "requested-by-anyone",
            "example": "requested-by-anyone=true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Will limit records to items that are in \"suggested\" or \"approved\" status",
            "in": "query",
            "name": "show-pending-status-only",
            "example": "show-pending-status-only=true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Suggested Entitlement Details",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Sed"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      },
      "patch": {
        "tags": [
          "Suggested Entitlement Description"
        ],
        "operationId": "patchSed",
        "summary": "Patch suggested entitlement description",
        "description": "Patch Suggested Entitlement Description",
        "parameters": [
          {
            "description": "id is sed id",
            "in": "path",
            "name": "id",
            "example": "ebab396f-0af1-4050-89b7-dafc63ec70e7",
            "required": true,
            "x-sailpoint-resource-operation-id": "listSeds",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Sed Patch Request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/SedPatch"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "detail of patched sed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sed"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "idn:sed:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN",
          "SOURCE_ADMIN",
          "SOURCE_SUBADMIN"
        ]
      }
    },
    "/launchers": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "List all launchers for tenant",
        "description": "Return a list of Launchers for the authenticated tenant",
        "operationId": "getLaunchers",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "description": "Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)\n\nFiltering is supported for the following fields and operators:\n\n**description**: *sw*\n\n**disabled**: *eq*\n\n**name**: *sw*",
            "example": "disabled eq \"true\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next",
            "in": "query",
            "description": "Pagination marker",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "eyJuZXh0IjoxMjN9Cg=="
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of Launchers to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "example": 42
          }
        ],
        "responses": {
          "200": {
            "description": "List of Launchers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string",
                      "description": "Pagination marker"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Launcher"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-admin:read",
              "sp:launcher-user:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "post": {
        "tags": [
          "Launchers"
        ],
        "summary": "Create launcher",
        "description": "Create a Launcher with given information",
        "operationId": "createLauncher",
        "requestBody": {
          "description": "Payload to create a Launcher",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LauncherRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Launcher created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Launcher"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-admin:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/launchers/{launcherID}": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get launcher by id",
        "description": "Get details for the given Launcher ID",
        "operationId": "getLauncher",
        "parameters": [
          {
            "name": "launcherID",
            "in": "path",
            "description": "ID of the Launcher to be retrieved",
            "required": true,
            "x-sailpoint-resource-operation-id": "getLaunchers",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "e3012408-8b61-4564-ad41-c5ec131c325b"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Launcher"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-admin:read",
              "sp:launcher-user:read"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "put": {
        "tags": [
          "Launchers"
        ],
        "summary": "Replace launcher",
        "description": "Replace the given Launcher ID with given payload",
        "operationId": "putLauncher",
        "parameters": [
          {
            "name": "launcherID",
            "in": "path",
            "description": "ID of the Launcher to be replaced",
            "required": true,
            "x-sailpoint-resource-operation-id": "getLaunchers",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "e3012408-8b61-4564-ad41-c5ec131c325b"
          }
        ],
        "requestBody": {
          "description": "Payload to replace Launcher",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LauncherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Launcher replaced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Launcher"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-admin:write"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      },
      "delete": {
        "tags": [
          "Launchers"
        ],
        "summary": "Delete launcher",
        "description": "Delete the given Launcher ID",
        "operationId": "deleteLauncher",
        "parameters": [
          {
            "name": "launcherID",
            "in": "path",
            "description": "ID of the Launcher to be deleted",
            "required": true,
            "x-sailpoint-resource-operation-id": "getLaunchers",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "e3012408-8b61-4564-ad41-c5ec131c325b"
          }
        ],
        "responses": {
          "204": {
            "description": "Launcher deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-admin:delete"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    },
    "/beta/launchers/{launcherID}/launch": {
      "post": {
        "tags": [
          "Launchers"
        ],
        "summary": "Launch a launcher",
        "description": "Launch the given Launcher ID",
        "operationId": "startLauncher",
        "parameters": [
          {
            "name": "launcherID",
            "in": "path",
            "description": "ID of the Launcher to be launched",
            "required": true,
            "x-sailpoint-resource-operation-id": "getLaunchers",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "e3012408-8b61-4564-ad41-c5ec131c325b"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher launched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "interactiveProcessId"
                  ],
                  "properties": {
                    "interactiveProcessId": {
                      "type": "string",
                      "description": "ID of the Interactive Process that was launched",
                      "example": "5da68cfe-2d60-4b09-858f-0d03acd2f47a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "userAuth": [
              "sp:launcher-user:launch"
            ]
          }
        ],
        "x-sailpoint-userLevels": [
          "ORG_ADMIN"
        ]
      }
    }
  },
  "x-webhooks": {
    "AccessRequestDecision": {
      "post": {
        "summary": "Access request decision",
        "operationId": "accessRequestDecisionEvent",
        "description": "This event trigger fires after an access request is approved or denied.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Access Request Decision](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-decision).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestPostApproval"
              }
            }
          }
        }
      }
    },
    "AccessRequestDynamicApproval": {
      "post": {
        "summary": "Access request dynamic approval",
        "operationId": "accessRequestDynamicApprovalEvent",
        "description": "This event trigger fires after an access request is submitted but before the request is approved or denied. You can use this trigger as a way to route the access request to an additional approval step by an identity or governance group.\nThis is a `REQUEST_RESPONSE` event trigger.  This trigger type expects a response from the subscribers with directions about how to proceed with the event. You can only have one subscriber per event. For more information about this event trigger, refer to [Access Request Dynamic Approval](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-dynamic-approval).\n>**Note: If there is an active subscription to the [Access Request Submitted trigger](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-submitted), this trigger is invoked after the Access Request Submitted trigger, only if the response to that trigger was to approve the request.**",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestDynamicApprover"
              }
            }
          }
        },
        "responses": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/trigger/example-input/AccessRequestDynamicApprovalResponse.yaml"
              }
            }
          }
        }
      }
    },
    "AccessRequestSubmitted": {
      "post": {
        "summary": "Access request submitted",
        "operationId": "accessRequestSubmittedEvent",
        "description": "This event trigger fires after an access request is submitted but before the request is approved or denied.  A service subscribing to the trigger can respond in real-time to approve or deny the request.\nThis is a `REQUEST_RESPONSE` event trigger.  This trigger type expects a response from the subscribers with directions about how to proceed with the event. You can only have one subscriber per event. For more information about this event trigger, refer to [Access Request Submitted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/access-request-submitted).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestPreApproval"
              }
            }
          }
        },
        "responses": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/trigger/example-input/AccessRequestSubmittedResponse.yaml"
              }
            }
          }
        }
      }
    },
    "AccountAggregationCompleted": {
      "post": {
        "summary": "Account aggregation completed",
        "operationId": "accountAggregationCompletedEvent",
        "description": "This event trigger fires after a source aggregation has either succeeded or failed in collecting source accounts but before Identity Security Cloud (ISC) processes the aggregation.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Account Aggregation Completed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/account-aggregation-completed).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAggregationCompleted"
              }
            }
          }
        }
      }
    },
    "CampaignActivated": {
      "post": {
        "summary": "Campaign activated",
        "operationId": "campaignActivatedEvent",
        "description": "This event trigger fires after a certification campaign is activated.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Campaign Activated](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/campaign-activated).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignActivated"
              }
            }
          }
        }
      }
    },
    "CampaignEnded": {
      "post": {
        "summary": "Campaign ended",
        "operationId": "campaignEndedEvent",
        "description": "This event trigger fires after a certification campaign ends.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Campaign Ended](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/campaign-ended).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignEnded"
              }
            }
          }
        }
      }
    },
    "CampaignGenerated": {
      "post": {
        "summary": "Campaign generated",
        "operationId": "campaignGeneratedEvent",
        "description": "This event trigger fires after a certification campaign has generated and moved into the 'Preview Ready' state but hasn't been activated yet.  A typical use case for this event trigger is to use it to immediately activate a campaign once it is generated.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Campaign Generated](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/campaign-generated).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignGenerated"
              }
            }
          }
        }
      }
    },
    "CertificationSignedOff": {
      "post": {
        "summary": "Certification signed off",
        "operationId": "certificationSignedOffEvent",
        "description": "This event trigger fires after a certification is signed off on and moves to the 'End' status. Do not confuse this event trigger with the Campaign End trigger.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Certification Sign Off](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/certification-signed-off).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificationSignedOff"
              }
            }
          }
        }
      }
    },
    "FormSubmitted": {
      "post": {
        "summary": "Form submitted",
        "operationId": "formSubmittedEvent",
        "description": "This event trigger fires after a user has submitted a [custom form](https://documentation.sailpoint.com/saas/help/forms/index.html) in Identity Security Cloud (ISC).\nA typical use case for this trigger is to immediately take actions based on the data in the submitted form.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Form Submitted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/form-submitted).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormSubmitted"
              }
            }
          }
        }
      }
    },
    "IdentityAttributesChanged": {
      "post": {
        "summary": "Identity attributes changed",
        "operationId": "identityAttributesChangedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) detects an identity attribute change.  ISC identity attribute changes occur when account attributes aggregated from an authoritative source differ from an identity's current attributes during an identity refresh.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Identity Attributes Changed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/identity-attribute-changed).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityAttributesChanged"
              }
            }
          }
        }
      }
    },
    "IdentityCreated": {
      "post": {
        "summary": "Identity created",
        "operationId": "identityCreatedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) detects a new identity during an aggregation and refresh from an authoritative source. ISC detects a new identity when it finds an account from an authoritative source that isn't correlated to an existing identity.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Identity Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/identity-created).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityCreated"
              }
            }
          }
        }
      }
    },
    "NativeChangeAccountCreated": {
      "post": {
        "summary": "Native change account created",
        "operationId": "nativeChangeAccountCreatedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) aggregates data from an external source and detects that a new account exists on the source. The external source must meet these criteria for you to receive this type of event:\n  * Native Change Detection (NCD) is enabled.\n  * Account Create operations are monitored.\n  * At least one attribute selected for monitoring has changed.\n\nIn addition to having NCD enabled,  There are two ways to configure a source for NCD: \n  * Invoke the 'Update Native Change Detection' configuration for each source you want to receive NCD events from.\n  * Configure the NCD options on the source in the source configuration user interface (UI).\n  \nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Native Change Account Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/native-change-account-created).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountCreated"
              }
            }
          }
        }
      }
    },
    "NativeChangeAccountDeleted": {
      "post": {
        "summary": "Native change account deleted",
        "operationId": "nativeChangeAccountDeletedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) aggregates data from an external source and detects that an account has been deleted from the source. The external source must meet these criteria for you to receive this type of event:\n  * Native Change Detection (NCD) is enabled.\n  * Account Delete operations are monitored.\n  * At least one attribute selected for monitoring has changed.\n  \nIn addition to having NCD enabled,  There are two ways to configure a source for NCD: \n  * Invoke the 'Update Native Change Detection' configuration for each source you want to receive NCD events from.\n  * Configure the NCD options on the source in the source configuration user interface (UI).\n\nA typical use for this event trigger would be to notify the correlated identity's manager and the source owner when the account is deleted.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Native Change Account Deleted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/native-change-account-deleted).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountDeleted"
              }
            }
          }
        }
      }
    },
    "NativeChangeAccountUpdated": {
      "post": {
        "summary": "Native change account updated",
        "operationId": "nativeChangeAccountUpdatedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) aggregates data from an external source and detects that an account has been updated on the source. The external source must meet these criteria for you to receive this type of event:\n  * Native Change Detection (NCD) is enabled.\n  * Account Update operations are monitored.\n  * At least one attribute selected for monitoring has changed.\n  \nIn addition to having NCD enabled,  There are two ways to configure a source for NCD: \n  * Invoke the 'Update Native Change Detection' configuration for each source you want to receive NCD events from.\n  * Configure the NCD options on the source in the source configuration user interface (UI).\n\nA typical use for this event trigger would be to notify the correlated identity's manager and the source owner when the account is deleted.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Native Change Account Updated](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/native-change-account-updated).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountUpdated"
              }
            }
          }
        }
      }
    },
    "OutlierDetected": {
      "post": {
        "summary": "Outlier detected",
        "operationId": "outlierDetectedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) detects that identities have unusual access relative their peers. ISC calculates outliers daily, flags the outliers, and notifies the trigger's subscribers when it detects them.\nThese are the requirements to use the trigger:\n  * Your organization must have Access Insights, which it needs to access Identity Outliers.\n  * Your organization must have at a configured source that it has loaded account data from.\n  * Your organization's accound data must be onboarded into AI-Driven Identity Security.\n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Outlier Detected](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/outlier-detected).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutlierDetected"
              }
            }
          }
        }
      }
    },
    "ProvisioningCompleted": {
      "post": {
        "summary": "Provisioning completed",
        "operationId": "provisioningCompletedEvent",
        "description": "This event trigger fires after Identity Security Cloud (ISC) provisions access to an account.  This trigger provides organizations with a flexible way to extend the provisioning workflow after an identity's access has changed within ISC. \nThese are the requirements to use the trigger:\n  * An oAuth client must be configured with the `ORG_ADMIN` authority.\n  * The organization has enabled the `ARSENAL_ALLOW_POSTPROVISIONING_TRIGGERS` feature flag.\n  * Connectors are configured for provisioning into the target applications.\n  * The organization is configured for automated provisioning. Different event contexts require different setups. For more information about these setups, refer to [Provisioning Completed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/provisioning-completed).\n\nTo provision access to a target application, the source's connector must support these features: \n  * `ENABLE`: The ability to enable or disable accounts.\n  * `UNLOCK`: The ability to lock or unlock accounts.\n  * `PROVISIONING`: The ability to write to accounts.\n  * `PASSWORD`: The ability to update account passwords.\n\nFor a list of supported connectors and features, refer to [Identity Security Cloud Connectors](https://documentation.sailpoint.com/connectors/isc/landingpages/help/landingpages/isc_landing.html). For more information about configuring sources for provisioning in ISC, refer to [Configuring Source Account Provisioning](https://documentation.sailpoint.com/saas/help/provisioning/create_profile.html).\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Provisioning Completed](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/provisioning-completed).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningCompleted"
              }
            }
          }
        }
      }
    },
    "ScheduledSearch": {
      "post": {
        "summary": "Scheduled search",
        "operationId": "scheduledSearchEvent",
        "description": "This event trigger fires after Identity Security Cloud (ISC) generates a report from a saved search. \nIn ISC, users can subscribe to saved searches to receive an email report generated by the saved search. They can then set a schedule for when those saved searches generate reports, such as daily at 6:00 GMT.  The trigger can notify an external HTTP application that ISC has generated a report from a saved search and the report is ready to be processed. \nThese are some typical use cases for the trigger:\n  * Perform continous checks for Separation of Duties (SOD) violations, for quality control.\n  * Respond to upcoming Joiner-Mover-Leaver (JML) scenarios, such as deprovisioning access before an employee's separation date. \n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Scheduled Search](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/scheduled-search).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchComplete"
              }
            }
          }
        }
      }
    },
    "SourceCreated": {
      "post": {
        "summary": "Source created",
        "operationId": "sourceCreatedEvent",
        "description": "This event trigger fires when a new source is created in Identity Security Cloud (ISC), by either the [API](https://developer.sailpoint.com/docs/api/v2024/create-source) or the [Admin UI](https://documentation.sailpoint.com/saas/help/accounts/loading_data.html#configuring-a-source). \nThese are some typical use cases for the trigger:\n  * Provide evidence to auditors to show that connector logic and sources are maintained by proper change control processes and aren't vulnerable to outside manipulation. \n  * Auto-configure new sources with proper owners, using external data sources. \n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-created).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreated"
              }
            }
          }
        }
      }
    },
    "SourceDeleted": {
      "post": {
        "summary": "Source deleted",
        "operationId": "sourceDeletedEvent",
        "description": "This event trigger fires when a new source is deleted from Identity Security Cloud (ISC), by either the [API](https://developer.sailpoint.com/docs/api/v2024/delete-source) or the [Admin UI](https://documentation.sailpoint.com/saas/help/sources/index.html#deleting-a-source). \nThese are some typical use cases for the trigger:\n  * Provide evidence to auditors to show that connector logic and sources are maintained by proper change control processes and aren't vulnerable to outside manipulation. \n  * Alert admins when a source is incorrectly deleted. \n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-deleted).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDeleted"
              }
            }
          }
        }
      }
    },
    "SourceUpdated": {
      "post": {
        "summary": "Source updated",
        "operationId": "sourceUpdatedEvent",
        "description": "This event trigger fires when a new source's configuration is changed in Identity Security Cloud (ISC).\nThese are some typical use cases for the trigger:\n  * Provide evidence to auditors to show that connector logic and sources are maintained by proper change control processes and aren't vulnerable to outside manipulation. \n  * Trigger review for an updated source. \n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-updated).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdated"
              }
            }
          }
        }
      }
    },
    "VaClusterStatusChange": {
      "post": {
        "summary": "Va cluster status change",
        "operationId": "vaClusterStatusChangeEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC) runs a health check on a virtual appliance (VA) cluster, and the cluster's health status is different from the previous health check, such as a change from healthy to unhealthy or the opposite.  VA cluster health checks run every 30 minutes. Users can use this trigger to monitor all their VA clusters' health status changes.\nThese are some typical use cases for the trigger:\n  * Create real-time health dashboards for VA clusters.\n  * Notify an admin or system to take appropriate actions when a VA cluster's health status changes.\n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/va-cluster-status-change).",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VAClusterStatusChangeEvent"
              }
            }
          }
        }
      }
    },
    "IdentityDeleted": {
      "post": {
        "summary": "Identity deleted",
        "operationId": "identityDeletedEvent",
        "description": "This event trigger fires after an identity has been completely deleted from Identity Security Cloud (ISC). ISC only deletes an identity when it meets all these requirements: \n  * It has no correlated accounts.\n  * It's not an owner of a role, access profile, application, source, or task result. \n  * It's not an owner or requester of a work item.\n  * It's not a protected account or manager.\n  * It has no assigned capabilities, such as being an assigned certification reviewer.\n  * It's not involved in any active certification as a target (its access is not being certified).\n\nThese are some typical use cases for the trigger:\n  * Notify an administrator or system to take the appropriate provisioning actions as part of the leaver workflow.\n  * Notify a system to trigger another action, such as deactivating an employee's badge upon termination.\n\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Identity Deleted](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/identity-deleted).\n>**Note: This is an early access event trigger. Contact support to enable it on your tenant.**",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityDeleted"
              }
            }
          }
        }
      }
    },
    "SourceAccountCreated": {
      "post": {
        "summary": "Source account created",
        "operationId": "sourceAccountCreatedEvent",
        "description": "This event trigger fires after Identity Security Cloud (ISC) detects a new account during an account aggregation and refresh from a source.  This trigger cannot determine whether the account creation happened on the source or in ISC. It omits events related to ISC accounts, such as the ISC Admin. \nA typical use for this trigger is to watch for new accounts with highly privileged access, such as an account created in Active Directory Domain Admins.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Account Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-created).\n>**Note: This is an early access event trigger. Contact support to enable it on your tenant.**",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "deprecated": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountCreated"
              }
            }
          }
        }
      }
    },
    "SourceAccountDeleted": {
      "post": {
        "summary": "Source account deleted",
        "operationId": "sourceAccountDeletedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC), during an account aggregation operation, detects that an account has been deleted.  This trigger cannot determine whether the account deletion happened on the source or in ISC. It omits events related to ISC accounts, such as the ISC Admin.\nA typical use for this trigger is to watch for deletions of authoritative accounts, such as an account deleted from Workday.\nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Account Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-deleted).\n>**Note: This is an early access event trigger. Contact support to enable it on your tenant.**",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "deprecated": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountDeleted"
              }
            }
          }
        }
      }
    },
    "SourceAccountUpdated": {
      "post": {
        "summary": "Source account updated",
        "operationId": "sourceAccountUpdatedEvent",
        "description": "This event trigger fires when Identity Security Cloud (ISC), during an account aggregation operation, detects a change to one or more account attributes on a single account.  This trigger cannot determine whether the account update happened on the source or in ISC. It omits events related to ISC accounts, such as the ISC Admin.\nThese actions are considered updated:\n  * An update to account attributes\n  * Enabling or disabling an account\n  * Locking or unlocking an account\n  * A change to a source account password\n\nA typical use for this trigger is to watch for updates to accounts that add highly privileged access, such as an account that is granted privileged access on a sensitive source. \nThis is a `FIRE_AND_FORGET` event trigger.  You can have a maximum of 50 subscriptions for this trigger. For more information about this event trigger, refer to [Source Account Created](https://developer.sailpoint.com/docs/extensibility/event-triggers/triggers/source-account-updated).\n>**Note: This is an early access event trigger. Contact support to enable it on your tenant.**",
        "tags": [
          "Triggers"
        ],
        "security": [
          {
            "userAuth": [
              "sp:trigger-service-subscriptions:manage"
            ]
          }
        ],
        "deprecated": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceAccountUpdated"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "userAuth": {
        "type": "oauth2",
        "x-displayName": "Personal Access Token",
        "description": "OAuth2 Bearer token (JWT) generated using either a [personal access token (PAT)](https://developer.sailpoint.com/docs/api/authentication/#generate-a-personal-access-token) or through the [authorization code flow](https://developer.sailpoint.com/docs/api/authentication/#request-access-token-with-authorization-code-grant-flow).\n\nPersonal access tokens are associated with a user in Identity Security Cloud and relies on the user's [user level](https://documentation.sailpoint.com/saas/help/common/users/index.html) (ex. Admin, Helpdesk, etc.) to determine a base level of access.\n\nSee [Identity Security Cloud REST API Authentication](https://developer.sailpoint.com/docs/api/authentication/) for more information.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://tenant.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://tenant.login.sailpoint.com/oauth/authorize",
            "tokenUrl": "https://tenant.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          }
        }
      },
      "applicationAuth": {
        "type": "oauth2",
        "x-displayName": "Client Credentials",
        "description": "OAuth2 Bearer token (JWT) generated using [client credentials flow](https://developer.sailpoint.com/docs/api/authentication/#request-access-token-with-client-credentials-grant-flow).\n\nClient credentials refers to tokens that are not associated with a user in Identity Security Cloud.\n\nSee [Identity Security Cloud REST API Authentication](https://developer.sailpoint.com/docs/api/authentication/) for more information.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://tenant.api.identitynow.com/oauth/token",
            "scopes": {
              "sp:scopes:default": "default scope",
              "sp:scopes:all": "access to all scopes"
            }
          }
        }
      }
    },
    "schemas": {
      "AccountAggregation": {
        "$ref": "#/components/schemas/AccountAggregationStatus"
      },
      "ApprovalItems": {
        "$ref": "#/components/schemas/ApprovalItemDetails"
      },
      "slimcampaign": {
        "$ref": "#/components/schemas/SlimCampaign"
      },
      "fullcampaign": {
        "$ref": "#/components/schemas/Campaign"
      },
      "IdentityProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommonDto"
          },
          {
            "type": "object",
            "required": [
              "authoritativeSource"
            ],
            "properties": {
              "description": {
                "type": "string",
                "nullable": true,
                "description": "Identity profile's description.",
                "example": "My custom flat file profile"
              },
              "owner": {
                "type": "object",
                "description": "Identity profile's owner.",
                "nullable": true,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "IDENTITY"
                    ],
                    "description": "Owner's object type.",
                    "example": "IDENTITY"
                  },
                  "id": {
                    "type": "string",
                    "description": "Owner's ID.",
                    "example": "2c9180835d191a86015d28455b4b232a"
                  },
                  "name": {
                    "type": "string",
                    "description": "Owner's name.",
                    "example": "William Wilson"
                  }
                }
              },
              "priority": {
                "type": "integer",
                "format": "int64",
                "description": "Identity profile's priority.",
                "example": 10
              },
              "authoritativeSource": {
                "type": "object",
                "description": "Identity profile's authoritative source.",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "SOURCE"
                    ],
                    "description": "Authoritative source's object type.",
                    "example": "SOURCE"
                  },
                  "id": {
                    "type": "string",
                    "description": "Authoritative source's ID.",
                    "example": "2c9180835d191a86015d28455b4b232a"
                  },
                  "name": {
                    "type": "string",
                    "description": "Authoritative source's name.",
                    "example": "HR Active Directory"
                  }
                }
              },
              "identityRefreshRequired": {
                "type": "boolean",
                "default": false,
                "description": "Set this value to 'True' if an identity refresh is necessary. You would typically want to trigger an identity refresh when a change has been made on the source.",
                "example": true
              },
              "identityCount": {
                "type": "integer",
                "description": "Number of identities belonging to the identity profile.",
                "format": "int32",
                "example": 8
              },
              "identityAttributeConfig": {
                "$ref": "#/components/schemas/IdentityAttributeConfig"
              },
              "identityExceptionReportReference": {
                "$ref": "#/components/schemas/IdentityExceptionReportReference"
              },
              "hasTimeBasedAttr": {
                "description": "Indicates the value of `requiresPeriodicRefresh` attribute for the identity profile.",
                "type": "boolean",
                "default": true,
                "example": true
              }
            }
          }
        ]
      },
      "ManagedClient": {
        "description": "Managed Client",
        "type": "object",
        "title": "Managed Client",
        "required": [
          "clientId",
          "clusterId",
          "description",
          "type"
        ],
        "properties": {
          "id": {
            "description": "ManagedClient ID",
            "readOnly": true,
            "type": "string",
            "example": "aClientId"
          },
          "alertKey": {
            "description": "ManagedClient alert key",
            "readOnly": true,
            "type": "string",
            "example": "anAlertKey"
          },
          "apiGatewayBaseUrl": {
            "description": "ManagedClient gateway base url",
            "readOnly": true,
            "type": "string",
            "example": "https://denali-xxx.api.cloud.sailpoint.com"
          },
          "ccId": {
            "description": "Previous CC ID to be used in data migration. (This field will be deleted after CC migration!)",
            "type": "integer",
            "format": "int64",
            "example": 2248
          },
          "clientId": {
            "description": "The client ID used in API management",
            "type": "string",
            "example": "aClientApiId"
          },
          "clusterId": {
            "description": "Cluster ID that the ManagedClient is linked to",
            "type": "string",
            "example": "aClusterId"
          },
          "cookbook": {
            "description": "VA cookbook",
            "readOnly": true,
            "type": "string",
            "example": "va-cookbook-info"
          },
          "description": {
            "description": "ManagedClient description",
            "type": "string",
            "example": "A short description of the ManagedClient"
          },
          "ipAddress": {
            "description": "The public IP address of the ManagedClient",
            "readOnly": true,
            "type": "string",
            "example": "123.456.78.90"
          },
          "lastSeen": {
            "description": "When the ManagedClient was last seen by the server",
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "name": {
            "description": "ManagedClient name",
            "type": "string",
            "example": "aName"
          },
          "sinceLastSeen": {
            "description": "Milliseconds since the ManagedClient has polled the server",
            "readOnly": true,
            "type": "string",
            "example": 15000
          },
          "status": {
            "description": "Status of the ManagedClient",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagedClientStatusEnum"
              }
            ]
          },
          "type": {
            "description": "Type of the ManagedClient (VA, CCG)",
            "type": "string",
            "example": "VA"
          },
          "vaDownloadUrl": {
            "description": "ManagedClient VA download URL",
            "readOnly": true,
            "type": "string",
            "example": "aUrl"
          },
          "vaVersion": {
            "description": "Version that the ManagedClient's VA is running",
            "readOnly": true,
            "type": "string",
            "example": "va-megapod-useast1-610-1621372012"
          },
          "secret": {
            "description": "Client's apiKey",
            "type": "string",
            "example": "ef878e15eaa8c8d3e2fa52f41125e2a0eeadadc6a14f931a33ad3e1b62d56381"
          }
        }
      },
      "ManagedClientStatus": {
        "description": "Managed Client Status",
        "type": "object",
        "title": "Managed Client Status",
        "required": [
          "body",
          "status",
          "type",
          "timestamp"
        ],
        "properties": {
          "body": {
            "description": "ManagedClientStatus body information",
            "type": "object",
            "example": {
              "alertKey": "",
              "id": "5678",
              "clusterId": "1234",
              "ccg_etag": "ccg_etag123xyz456",
              "ccg_pin": "NONE",
              "cookbook_etag": "20210420125956-20210511144538",
              "hostname": "megapod-useast1-secret-hostname.sailpoint.com",
              "internal_ip": "127.0.0.1",
              "lastSeen": "1620843964604",
              "sinceSeen": "14708",
              "sinceSeenMillis": "14708",
              "localDev": false,
              "stacktrace": "",
              "state": null,
              "status": "NORMAL",
              "uuid": null,
              "product": "idn",
              "va_version": null,
              "platform_version": "2",
              "os_version": "2345.3.1",
              "os_type": "flatcar",
              "hypervisor": "unknown"
            }
          },
          "status": {
            "description": "status of the Managed Client",
            "$ref": "#/components/schemas/ManagedClientStatusEnum"
          },
          "type": {
            "description": "type of the Managed Client",
            "$ref": "#/components/schemas/ManagedClientType"
          },
          "timestamp": {
            "description": "timestamp on the Client Status update",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.000000Z"
          }
        }
      },
      "MessageCatalogDto": {
        "type": "object",
        "title": "Message Catalog Dto",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The language in which the messages are returned",
            "example": "en_US"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceBundleMessage"
            },
            "description": "The list of message with their keys and formats"
          }
        }
      },
      "PeerGroupMember": {
        "type": "object",
        "title": "Peer Group Member",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the peer group member."
          },
          "type": {
            "type": "string",
            "description": "The type of the peer group member."
          },
          "peer_group_id": {
            "type": "string",
            "description": "The ID of the peer group."
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "Arbitrary key-value pairs, belonging to the peer group member."
          }
        }
      },
      "RecommendationRequestDto": {
        "type": "object",
        "title": "Recommendation Request Dto",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationRequest",
              "description": "List of requests to retrieve recommendations"
            }
          },
          "excludeInterpretations": {
            "type": "boolean",
            "description": "Exclude interpretations in the response if \"true\". Return interpretations in the response if this attribute is not specified.",
            "default": "false",
            "example": "false"
          },
          "includeTranslationMessages": {
            "type": "boolean",
            "description": "When set to true, the calling system uses the translated messages for the specified language",
            "default": "false",
            "example": "false"
          },
          "includeDebugInformation": {
            "type": "boolean",
            "description": "Returns the recommender calculations if set to true",
            "default": "false",
            "example": "true"
          },
          "prescribeMode": {
            "type": "boolean",
            "description": "When set to true, uses prescribedRulesRecommenderConfig to get identity attributes and peer group threshold instead of standard config.",
            "default": "false",
            "example": "false"
          }
        }
      },
      "RecommendationResponseDto": {
        "type": "object",
        "title": "Recommendation Response Dto",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationResponse"
            }
          }
        }
      },
      "RemediationItems": {
        "$ref": "#/components/schemas/RemediationItemDetails"
      },
      "SearchAttributeConfig": {
        "type": "object",
        "title": "Search Attribute Config",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new attribute",
            "example": "newMailAttribute"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the new attribute",
            "example": "New Mail Attribute"
          },
          "applicationAttributes": {
            "type": "object",
            "description": "Map of application id and their associated attribute.",
            "example": {
              "2c91808b79fd2422017a0b35d30f3968": "employeeNumber",
              "2c91808b79fd2422017a0b36008f396b": "employeeNumber"
            }
          }
        }
      },
      "WorkItems": {
        "type": "object",
        "title": "Work Items",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the work item",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterId": {
            "type": "string",
            "nullable": true,
            "description": "ID of the requester",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "requesterDisplayName": {
            "type": "string",
            "nullable": true,
            "description": "The displayname of the requester",
            "example": "John Smith"
          },
          "ownerId": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the owner",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "ownerName": {
            "type": "string",
            "description": "The name of the owner",
            "example": "Jason Smith"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the work item",
            "example": "Create account on source 'AD'"
          },
          "state": {
            "$ref": "#/components/schemas/WorkItemState"
          },
          "type": {
            "$ref": "#/components/schemas/WorkItemType"
          },
          "remediationItems": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemediationItemDetails"
            }
          },
          "approvalItems": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalItemDetails"
            }
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The work item name",
            "example": "Account Create"
          },
          "completed": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "numItems": {
            "type": "integer",
            "nullable": true,
            "description": "The number of items in the work item",
            "example": 19
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "The work item ID that was specified was not found."
            ]
          },
          "form": {
            "$ref": "#/components/schemas/FormDetails"
          }
        }
      },
      "WorkItemsCount": {
        "type": "object",
        "title": "Work Items Count",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The count of work items",
            "example": 29
          }
        }
      },
      "WorkItemsSummary": {
        "type": "object",
        "title": "Work Items Summary",
        "properties": {
          "open": {
            "type": "integer",
            "description": "The count of open work items",
            "example": 29
          },
          "completed": {
            "type": "integer",
            "description": "The count of completed work items",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "The count of total work items",
            "example": 30
          }
        }
      },
      "Form": {
        "$ref": "#/components/schemas/FormDetails"
      },
      "FormItem": {
        "$ref": "#/components/schemas/FormItemDetails"
      },
      "Section": {
        "$ref": "#/components/schemas/SectionDetails"
      },
      "Field": {
        "$ref": "#/components/schemas/FieldDetails"
      },
      "AccountUsage": {
        "type": "object",
        "title": "Account Usage",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "The first day of the month for which activity is aggregated.",
            "example": "2023-04-21"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "The number of days within the month that the account was active in a source.",
            "example": 10
          }
        }
      },
      "SourceUsage": {
        "type": "object",
        "title": "Source Usage",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "The first day of the month for which activity is aggregated.",
            "example": "2023-04-21"
          },
          "count": {
            "type": "number",
            "format": "float",
            "description": "The average number of days that accounts were active within this source, for the month.",
            "example": 10.45
          }
        }
      },
      "SourceUsageStatus": {
        "type": "object",
        "title": "Source Usage Status",
        "properties": {
          "status": {
            "type": "string",
            "description": "Source Usage Status. Acceptable values are:\n  - COMPLETE\n      - This status means that an activity data source has been setup and usage insights are available for the source.\n  - INCOMPLETE\n      - This status means that an activity data source has not been setup and usage insights are not available for the source.",
            "example": "COMPLETE",
            "enum": [
              "COMPLETE",
              "INCOMPLETE"
            ]
          }
        }
      },
      "AttributeValueDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Technical name of the Attribute value. This is unique and cannot be changed after creation.",
            "example": "public"
          },
          "name": {
            "type": "string",
            "description": "The display name of the Attribute value.",
            "example": "Public"
          },
          "status": {
            "type": "string",
            "description": "The status of the Attribute value.",
            "example": "active"
          }
        }
      },
      "AttributeDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Technical name of the Attribute. This is unique and cannot be changed after creation.",
            "example": "iscPrivacy"
          },
          "name": {
            "type": "string",
            "description": "The display name of the key.",
            "example": "Privacy"
          },
          "multiselect": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the attribute can have multiple values.",
            "example": false
          },
          "status": {
            "type": "string",
            "description": "The status of the Attribute.",
            "example": "active"
          },
          "type": {
            "type": "string",
            "description": "The type of the Attribute. This can be either \"custom\" or \"governance\".",
            "example": "governance"
          },
          "objectTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "An array of object types this attributes values can be applied to. Possible values are \"all\" or \"entitlement\". Value \"all\" means this attribute can be used with all object types that are supported.",
            "example": [
              "entitlement"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the Attribute.",
            "example": "Specifies the level of privacy associated with an access item."
          },
          "values": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeValueDTO"
            }
          }
        }
      },
      "LocaleOrigin": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "REQUEST",
          null
        ],
        "description": "An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.",
        "example": "DEFAULT",
        "nullable": true
      },
      "ErrorMessageDto": {
        "type": "object",
        "title": "Error Message Dto",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The locale for the message text, a BCP 47 language tag.",
            "example": "en-US",
            "nullable": true
          },
          "localeOrigin": {
            "$ref": "#/components/schemas/LocaleOrigin"
          },
          "text": {
            "type": "string",
            "description": "Actual text of the error message in the indicated locale.",
            "example": "The request was syntactically correct but its content is semantically invalid."
          }
        }
      },
      "ErrorResponseDto": {
        "type": "object",
        "title": "Error Response Dto",
        "properties": {
          "detailCode": {
            "type": "string",
            "description": "Fine-grained error code providing more detail of the error.",
            "example": "400.1 Bad Request Content"
          },
          "trackingId": {
            "type": "string",
            "description": "Unique tracking id for the error.",
            "example": "e7eab60924f64aa284175b9fa3309599"
          },
          "messages": {
            "type": "array",
            "description": "Generic localized reason for error",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          },
          "causes": {
            "type": "array",
            "description": "Plain-text descriptive reasons to provide additional detail to the text provided in the messages field",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        }
      },
      "OwnerReference": {
        "type": "object",
        "nullable": false,
        "description": "Owner of the object.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "IDENTITY"
            ],
            "description": "Owner type. This field must be either left null or set to 'IDENTITY' on input, otherwise a 400 Bad Request error will result.",
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Owner's identity ID.",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Owner's name. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner's display name, otherwise a 400 Bad Request error will result.",
            "example": "support"
          }
        }
      },
      "AccessProfileSourceRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the source the access profile is associated with.",
            "example": "2c91809773dee3610173fdb0b6061ef4"
          },
          "type": {
            "type": "string",
            "enum": [
              "SOURCE"
            ],
            "description": "Source's DTO type.",
            "example": "SOURCE"
          },
          "name": {
            "type": "string",
            "description": "Source name.",
            "example": "ODS-AD-SOURCE"
          }
        }
      },
      "EntitlementRef": {
        "type": "object",
        "description": "Entitlement including a specific set of access.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Entitlement's DTO type.",
            "enum": [
              "ENTITLEMENT"
            ],
            "example": "ENTITLEMENT"
          },
          "id": {
            "type": "string",
            "description": "Entitlement's ID.",
            "example": "2c91809773dee32014e13e122092014e"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Entitlement's display name.",
            "example": "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local"
          }
        }
      },
      "AccessProfileApprovalScheme": {
        "type": "object",
        "properties": {
          "approverType": {
            "type": "string",
            "enum": [
              "APP_OWNER",
              "OWNER",
              "SOURCE_OWNER",
              "MANAGER",
              "GOVERNANCE_GROUP"
            ],
            "description": "Describes the individual or group that is responsible for an approval step. These are the possible values:\n**APP_OWNER**: The owner of the Application\n\n**OWNER**: Owner of the associated Access Profile or Role\n\n**SOURCE_OWNER**: Owner of the Source associated with an Access Profile\n\n**MANAGER**: Manager of the Identity making the request\n\n**GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field",
            "example": "GOVERNANCE_GROUP"
          },
          "approverId": {
            "type": "string",
            "nullable": true,
            "description": "Specific approver ID. Only use this when the `approverType` is `GOVERNANCE_GROUP`.",
            "example": "46c79819-a69f-49a2-becb-12c971ae66c6"
          }
        }
      },
      "Requestability": {
        "type": "object",
        "nullable": true,
        "properties": {
          "commentsRequired": {
            "type": "boolean",
            "description": "Indicates whether the requester of the containing object must provide comments justifying the request.",
            "example": true,
            "nullable": true,
            "default": false
          },
          "denialCommentsRequired": {
            "type": "boolean",
            "description": "Indicates whether an approver must provide comments when denying the request.",
            "example": true,
            "nullable": true,
            "default": false
          },
          "reauthorizationRequired": {
            "type": "boolean",
            "description": "Indicates whether reauthorization is required for the request.",
            "example": true,
            "nullable": true,
            "default": false
          },
          "approvalSchemes": {
            "type": "array",
            "nullable": true,
            "description": "List describing the steps involved in approving the request.",
            "items": {
              "$ref": "#/components/schemas/AccessProfileApprovalScheme"
            }
          }
        }
      },
      "Revocability": {
        "type": "object",
        "nullable": true,
        "properties": {
          "approvalSchemes": {
            "type": "array",
            "nullable": true,
            "description": "List describing the steps involved in approving the revocation request.",
            "items": {
              "$ref": "#/components/schemas/AccessProfileApprovalScheme"
            }
          }
        }
      },
      "ProvisioningCriteriaOperation": {
        "type": "string",
        "enum": [
          "EQUALS",
          "NOT_EQUALS",
          "CONTAINS",
          "HAS",
          "AND",
          "OR"
        ],
        "description": "Supported operations on `ProvisioningCriteria`.",
        "example": "EQUALS"
      },
      "ProvisioningCriteriaLevel3": {
        "type": "object",
        "description": "Defines matching criteria for an account to be provisioned with a specific access profile.",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ProvisioningCriteriaOperation"
          },
          "attribute": {
            "type": "string",
            "description": "Name of the account attribute to be tested. If **operation** is one of `EQUALS`, `NOT_EQUALS`, `CONTAINS`, or `HAS`, this field is required. Otherwise, specifying it results in an error.",
            "example": "email",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "String value to test the account attribute w/r/t the specified operation. If the operation is one of `EQUALS`, `NOT_EQUALS`, or `CONTAINS`, this field is required. Otherwise, specifying it results in an error. If the attribute is not string-typed, the API will convert it to the appropriate type.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "children": {
            "type": "string",
            "nullable": true,
            "description": "Array of child criteria. This field is required if the operation is `AND` or `OR`. Otherwise, it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.",
            "example": null
          }
        }
      },
      "ProvisioningCriteriaLevel2": {
        "type": "object",
        "description": "Defines matching criteria for an account to be provisioned with a specific access profile.",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ProvisioningCriteriaOperation"
          },
          "attribute": {
            "type": "string",
            "description": "Name of the account attribute to be tested. If **operation** is one of `EQUALS`, `NOT_EQUALS`, `CONTAINS`, or `HAS`, this field is required. Otherwise, specifying it results in an error.",
            "example": "email",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "String value to test the account attribute w/r/t the specified operation. If the operation is one of `EQUALS`, `NOT_EQUALS`, or `CONTAINS`, this field is required. Otherwise, specifying it results in an error. If the attribute is not string-typed, the API will convert it to the appropriate type.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningCriteriaLevel3"
            },
            "nullable": true,
            "description": "Array of child criteria. This field is required if the operation is `AND` or `OR`. Otherwise, it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.",
            "example": null
          }
        }
      },
      "ProvisioningCriteriaLevel1": {
        "type": "object",
        "nullable": true,
        "description": "Defines matching criteria for an account to be provisioned with a specific access profile.",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ProvisioningCriteriaOperation"
          },
          "attribute": {
            "type": "string",
            "description": "Name of the account attribute to be tested. If **operation** is one of `EQUALS`, `NOT_EQUALS`, `CONTAINS`, or `HAS`, this field is required. Otherwise, specifying it results in an error.",
            "example": "email",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "String value to test the account attribute w/r/t the specified operation. If the operation is one of `EQUALS`, `NOT_EQUALS`, or `CONTAINS`, this field is required. Otherwise, specifying it results in an error. If the attribute is not string-typed, the API will convert it to the appropriate type.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningCriteriaLevel2"
            },
            "nullable": true,
            "description": "Array of child criteria. This field is required if the operation is `AND` or `OR`. Otherwise, it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.",
            "example": null
          }
        }
      },
      "AccessProfile": {
        "type": "object",
        "description": "Access profile.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Access profile ID.",
            "example": "2c91808a7190d06e01719938fcd20792",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Access profile name.",
            "example": "Employee-database-read-write"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Access profile description.",
            "example": "Collection of entitlements to read/write the employee database"
          },
          "created": {
            "type": "string",
            "description": "Date and time when the access profile was created.",
            "format": "date-time",
            "example": "2021-03-01T22:32:58.104Z",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Date and time when the access profile was last modified.",
            "format": "date-time",
            "example": "2021-03-02T20:22:28.104Z",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the access profile is enabled. If it's enabled, you must include at least one entitlement.",
            "example": true
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerReference",
            "description": "Access profile owner."
          },
          "source": {
            "$ref": "#/components/schemas/AccessProfileSourceRef"
          },
          "entitlements": {
            "type": "array",
            "nullable": true,
            "description": "List of entitlements associated with the access profile. If `enabled` is false, this can be empty. Otherwise, it must contain at least one entitlement.",
            "items": {
              "$ref": "#/components/schemas/EntitlementRef"
            }
          },
          "requestable": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether the access profile is requestable by access request. Currently, making an access profile non-requestable is only supported  for customers enabled with the new Request Center. Otherwise, attempting to create an access profile with a value  **false** in this field results in a 400 error.",
            "example": true
          },
          "accessRequestConfig": {
            "$ref": "#/components/schemas/Requestability",
            "nullable": true,
            "description": "Access request configuration for the object."
          },
          "revocationRequestConfig": {
            "$ref": "#/components/schemas/Revocability",
            "nullable": true,
            "description": "Revocation request configuration for the object."
          },
          "segments": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "List of segment IDs, if any, that the access profile is assigned to.",
            "example": [
              "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
              "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
            ]
          },
          "provisioningCriteria": {
            "$ref": "#/components/schemas/ProvisioningCriteriaLevel1",
            "description": "When an identity has multiple accounts on the source the access profile is associated with, the API evaluates this expression against those accounts to choose one to provision with the access profile.",
            "nullable": true,
            "example": {
              "operation": "OR",
              "children": [
                {
                  "operation": "AND",
                  "children": [
                    {
                      "attribute": "dn",
                      "operation": "CONTAINS",
                      "value": "useast"
                    },
                    {
                      "attribute": "manager",
                      "operation": "CONTAINS",
                      "value": "Scott.Clark"
                    }
                  ]
                },
                {
                  "operation": "AND",
                  "children": [
                    {
                      "attribute": "dn",
                      "operation": "EQUALS",
                      "value": "Gibson"
                    },
                    {
                      "attribute": "telephoneNumber",
                      "operation": "CONTAINS",
                      "value": "512"
                    }
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "owner",
          "name",
          "source"
        ]
      },
      "JsonPatchOperation": {
        "type": "object",
        "title": "Json Patch Operation",
        "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ],
            "example": "replace"
          },
          "path": {
            "type": "string",
            "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
            "example": "/description"
          },
          "value": {
            "oneOf": [
              {
                "type": "string",
                "example": "New description",
                "title": "string"
              },
              {
                "type": "boolean",
                "example": true,
                "title": "boolean"
              },
              {
                "type": "integer",
                "example": 300,
                "title": "integer"
              },
              {
                "type": "object",
                "title": "object",
                "example": {
                  "attributes": {
                    "name": "philip"
                  }
                }
              },
              {
                "type": "array",
                "title": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object"
                    }
                  ],
                  "example": [
                    "001",
                    "002",
                    "003"
                  ]
                }
              }
            ],
            "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
            "example": "New description"
          }
        }
      },
      "AccessProfileBulkDeleteRequest": {
        "type": "object",
        "properties": {
          "accessProfileIds": {
            "description": "List of IDs of Access Profiles to be deleted.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c9180847812e0b1017817051919ecca",
              "2c9180887812e0b201781e129f151816"
            ]
          },
          "bestEffortOnly": {
            "description": "If **true**, silently skip over any of the specified Access Profiles if they cannot be deleted because they are in use. If **false**, no deletions will be attempted if any of the Access Profiles are in use.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "AccessProfileUsage": {
        "type": "object",
        "properties": {
          "accessProfileId": {
            "type": "string",
            "description": "ID of the Access Profile that is in use",
            "example": "2c91808876438bbb017668c21919ecca"
          },
          "usedBy": {
            "type": "array",
            "description": "List of references to objects which are using the indicated Access Profile",
            "items": {
              "type": "object",
              "description": "Role using the access profile.",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "DTO type of role using the access profile.",
                  "enum": [
                    "ROLE"
                  ],
                  "example": "ROLE"
                },
                "id": {
                  "type": "string",
                  "description": "ID of role using the access profile.",
                  "example": "2c8180857a9b3da0017aa03418480f9d"
                },
                "name": {
                  "type": "string",
                  "description": "Display name of role using the access profile.",
                  "example": "Manager Role"
                }
              }
            }
          }
        }
      },
      "AccessProfileBulkDeleteResponse": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of the task which is executing the bulk deletion. This can be passed to the **/task-status** API to track status.",
            "example": "2c9180867817ac4d017817c491119a20"
          },
          "pending": {
            "type": "array",
            "description": "List of IDs of Access Profiles which are pending deletion.",
            "items": {
              "type": "string"
            },
            "example": [
              "2c91808876438bbb017668c21919ecca",
              "2c91808876438bb201766e129f151816"
            ]
          },
          "inUse": {
            "type": "array",
            "description": "List of usages of Access Profiles targeted for deletion.",
            "items": {
              "$ref": "#/components/schemas/AccessProfileUsage"
            }
          }
        }
      },
      "AccessProfileBulkUpdateRequest": {
        "description": "List of Access profiles to be updated.",
        "type": "array",
        "items": {
          "type": "object",
          "description": "Access Profile's basic details.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Access Profile ID.",
              "example": "464ae7bf-791e-49fd-b746-06a2e4a8"
            },
            "requestable": {
              "type": "boolean",
              "description": "Access Profile is requestable or not.",
              "example": false
            }
          }
        },
        "example": [
          {
            "id": "464ae7bf-791e-49fd-b746-06a2e4a8",
            "requestable": false
          }
        ],
        "required": [
          "id",
          "requestable"
        ]
      },
      "AccessProfileUpdateItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifier of Access Profile in bulk update request.",
            "type": "string",
            "example": "2c7180a46faadee4016fb4e018c20642"
          },
          "requestable": {
            "description": "Access Profile requestable or not.",
            "type": "boolean",
            "example": false
          },
          "status": {
            "description": "\nThe HTTP response status code returned for an individual Access Profile that is requested for update during a bulk update operation.\n\n> 201   - Access profile is updated successfully.\n\n> 404   - Access profile not found.\n",
            "type": "string",
            "example": "201"
          },
          "description": {
            "description": "Human readable status description and containing additional context information about success or failures etc.\n",
            "type": "string",
            "example": "\n> Access profile is updated successfully.\n\n> Referenced Access profile with Id \"2c7180a46faadee4016fb4e018c20642\" was not found.\n"
          }
        },
        "required": [
          "id",
          "requestable",
          "status"
        ]
      },
      "AccessProfileBulkUpdateResponse": {
        "description": "Access Profile Bulk update response.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AccessProfileUpdateItem"
        },
        "example": [
          {
            "id": "464ae7bf-791e-49fd-b746-06a2e4a8",
            "status": "201",
            "requestable": false,
            "description": "Access Profile updated successfully."
          }
        ]
      },
      "OwnerReferenceDto": {
        "type": "object",
        "description": "Simplified DTO for the owner object of the entitlement",
        "properties": {
          "id": {
            "type": "string",
            "description": "The owner id for the entitlement",
            "example": "2a2fdacca5e345f18bf7970cfbb8fec2"
          },
          "name": {
            "type": "string",
            "description": "The owner name for the entitlement",
            "example": "identity 1"
          },
          "type": {
            "type": "string",
            "enum": [
              "IDENTITY"
            ],
            "description": "The type of the owner. Initially only type IDENTITY is supported",
            "example": "IDENTITY"
          }
        }
      },
      "PermissionDto": {
        "type": "object",
        "title": "Permission DTO",
        "description": "Simplified DTO for the Permission objects stored in SailPoint's database. The data is aggregated from customer systems and is free-form, so its appearance can vary largely between different clients/customers.",
        "properties": {
          "rights": {
            "type": "array",
            "description": "All the rights (e.g. actions) that this permission allows on the target",
            "readOnly": true,
            "items": {
              "type": "string",
              "example": "SELECT"
            }
          },
          "target": {
            "type": "string",
            "description": "The target the permission would grants rights on.",
            "readOnly": true,
            "example": "SYS.GV_$TRANSACTION"
          }
        }
      },
      "ManuallyUpdatedFieldsDTO": {
        "type": "object",
        "properties": {
          "DISPLAY_NAME": {
            "type": "boolean",
            "default": false,
            "description": "True if the entitlements name was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation.\nField refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `name` property.",
            "example": true
          },
          "DESCRIPTION": {
            "type": "boolean",
            "default": false,
            "description": "True if the entitlement description was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation.\nField refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `description` property.",
            "example": true
          }
        }
      },
      "AttributeDTOList": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeDTO"
            },
            "example": [
              {
                "key": "iscPrivacy",
                "name": "Privacy",
                "multiselect": false,
                "status": "active",
                "type": "governance",
                "objectTypes": [
                  "all"
                ],
                "description": "Specifies the level of privacy associated with an access item.",
                "values": [
                  {
                    "value": "public",
                    "name": "Public",
                    "status": "active"
                  }
                ]
              }
            ]
          }
        }
      },
      "Entitlement": {
        "type": "object",
        "title": "Entitlement",
        "properties": {
          "id": {
            "type": "string",
            "description": "The entitlement id",
            "example": "2c91808874ff91550175097daaec161c"
          },
          "name": {
            "type": "string",
            "description": "The entitlement name",
            "example": "LauncherTest2"
          },
          "created": {
            "type": "string",
            "description": "Time when the entitlement was created",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "modified": {
            "type": "string",
            "description": "Time when the entitlement was last modified",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "attribute": {
            "type": "string",
            "description": "The entitlement attribute name",
            "example": "memberOf",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value of the entitlement",
            "example": "CN=LauncherTest2,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local"
          },
          "sourceSchemaObjectType": {
            "type": "string",
            "description": "The object type of the entitlement from the source schema",
            "example": "group"
          },
          "privileged": {
            "type": "boolean",
            "default": false,
            "description": "True if the entitlement is privileged",
            "example": true
          },
          "cloudGoverned": {
            "type": "boolean",
            "default": false,
            "description": "True if the entitlement is cloud governed",
            "example": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the entitlement",
            "example": "CN=LauncherTest2,OU=LauncherTestOrg,OU=slpt-automation,DC=TestAutomationAD,DC=local"
          },
          "requestable": {
            "type": "boolean",
            "default": false,
            "description": "True if the entitlement is requestable",
            "example": true
          },
          "attributes": {
            "type": "object",
            "description": "A map of free-form key-value pairs from the source system",
            "example": {
              "fieldName": "fieldValue"
            },
            "additionalProperties": true
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The source ID",
                "example": "2c9180827ca885d7017ca8ce28a000eb"
              },
              "type": {
                "type": "string",
                "description": "The source type, will always be \"SOURCE\"",
                "example": "SOURCE"
              },
              "name": {
                "type": "string",
                "description": "The source name",
                "example": "ODS-AD-Source",
                "nullable": true
              }
            }
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnerReferenceDto"
              },
              {
                "nullable": true
              }
            ]
          },
          "directPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of IDs of segments, if any, to which this Entitlement is assigned.",
            "example": [
              "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
              "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
            ]
          },
          "manuallyUpdatedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ManuallyUpdatedFieldsDTO"
              },
              {
                "nullable": true,
                "description": "Object contains entitlement manually updated fields. Field value is true if is was updated manually via entitlement import csv or patch endpoint. Field value is false if that property value has not been changed after first entitlement aggregation. Values for all manually updatable fields must be specified. For now only two entitlement fields support this: DISPLAY_NAME and DESCRIPTION.",
                "example": {
                  "DISPLAY_NAME": true,
                  "DESCRIPTION": true
                }
              }
            ]
          },
          "accessModelMetadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttributeDTOList"
              },
              {
                "nullable": true,
                "description": "Access Model Metadata (beta)."
              }
            ]
          }
        }
      },
      "AccessRequestType": {
        "type": "string",
        "enum": [
          "GRANT_ACCESS",
          "REVOKE_ACCESS",
          null
        ],
        "description": "Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field.",
        "example": "GRANT_ACCESS",
        "nullable": true
      },
      "AccessRequestItem": {
        "type": "object",
        "title": "Access Request Item",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "ROLE",
              "ENTITLEMENT"
            ],
            "description": "The type of the item being requested.",
            "example": "ACCESS_PROFILE"
          },
          "id": {
            "type": "string",
            "description": "ID of Role, Access Profile or Entitlement being requested.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "comment": {
            "type": "string",
            "description": "Comment provided by requester.\n* Comment is required when the request is of type Revoke Access.\n",
            "example": "Requesting access profile for John Doe"
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                "requestedAppName": "test-app"
              }
            },
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities and /access-request-status."
          },
          "removeDate": {
            "type": "string",
            "description": "The date and time the role or access profile or entitlement is no longer assigned to the specified identity. Also known as the expiration date.\n* Specify a date-time in the future.\n* The current SLA for the deprovisioning is 24 hours.\n* This date-time can be used to change the duration of an existing access item assignment for the specified identity. A GRANT_ACCESS request can extend duration or even remove an expiration date, and either a  GRANT_ACCESS or REVOKE_ACCESS request can reduce duration or add an expiration date where one has not previously been present. You can change the expiration date in requests for yourself or others you are authorized to request for.\n",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "assignmentId": {
            "type": "string",
            "nullable": true,
            "description": "The assignmentId for a specific role assignment on the identity. This id is used to revoke that specific roleAssignment on that identity.\n* For use with REVOKE_ACCESS requests for roles for identities with multiple accounts on a single source.\n",
            "example": "ee48a191c00d49bf9264eb0a4fc3a9fc"
          },
          "nativeIdentity": {
            "type": "string",
            "nullable": true,
            "description": "The unique identifier for an account on the identity, designated as the account ID attribute in the source's account schema. This is used to revoke a specific attributeAssignment on the identity.\n* For use with REVOKE_ACCESS requests for entitlements for identities with multiple accounts on a single source.\n",
            "example": "CN=User db3377de14bf,OU=YOURCONTAINER, DC=YOURDOMAIN"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "AccountItemRef": {
        "type": "object",
        "properties": {
          "accountUuid": {
            "type": "string",
            "nullable": true,
            "description": "The uuid for the account, available under the 'objectguid' attribute",
            "example": "{fab7119e-004f-4822-9c33-b8d570d6c6a6}"
          },
          "nativeIdentity": {
            "type": "string",
            "nullable": false,
            "description": "The 'distinguishedName' attribute for the account",
            "example": "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
          }
        }
      },
      "SourceItemRef": {
        "type": "object",
        "properties": {
          "sourceId": {
            "type": "string",
            "nullable": true,
            "description": "The id for the source on which account selections are made",
            "example": "cb89bc2f1ee6445fbea12224c526ba3a"
          },
          "accounts": {
            "description": "A list of account selections on the source. Currently, only one selection per source is supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountItemRef"
            },
            "nullable": true
          }
        }
      },
      "RequestedItemDtoRef": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "ROLE",
              "ENTITLEMENT"
            ],
            "description": "The type of the item being requested.",
            "example": "ACCESS_PROFILE"
          },
          "id": {
            "type": "string",
            "description": "ID of Role, Access Profile or Entitlement being requested.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "comment": {
            "type": "string",
            "description": "Comment provided by requester.\n* Comment is required when the request is of type Revoke Access.\n",
            "example": "Requesting access profile for John Doe"
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                "requestedAppName": "test-app"
              }
            },
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities and /access-request-status."
          },
          "removeDate": {
            "type": "string",
            "description": "The date and time the role or access profile or entitlement is no longer assigned to the specified identity. Also known as the expiration date.\n* Specify a date-time in the future.\n* The current SLA for the deprovisioning is 24 hours.\n* This date-time can be used to change the duration of an existing access item assignment for the specified identity. A GRANT_ACCESS request can extend duration or even remove an expiration date, and either a  GRANT_ACCESS or REVOKE_ACCESS request can reduce duration or add an expiration date where one has not previously been present. You can change the expiration date in requests for yourself or others you are authorized to request for.\n",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "accountSelection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceItemRef"
            },
            "nullable": true,
            "description": "The accounts where the access item will be provisioned to\n* Includes selections performed by the user in the event of multiple accounts existing on the same source\n* Also includes details for sources where user only has one account\n"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "RequestedForDtoRef": {
        "type": "object",
        "properties": {
          "identityId": {
            "type": "string",
            "nullable": false,
            "description": "The identity id for which the access is requested",
            "example": "cb89bc2f1ee6445fbea12224c526ba3a"
          },
          "requestedItems": {
            "description": "the details for the access items that are requested for the identity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedItemDtoRef"
            },
            "nullable": false
          }
        },
        "required": [
          "identityId",
          "requestedItems"
        ]
      },
      "AccessRequest": {
        "type": "object",
        "title": "Access Request",
        "properties": {
          "requestedFor": {
            "description": "A list of Identity IDs for whom the Access is requested. If it's a Revoke request, there can only be one Identity ID.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "2c918084660f45d6016617daa9210584"
          },
          "requestType": {
            "$ref": "#/components/schemas/AccessRequestType"
          },
          "requestedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRequestItem"
            },
            "minItems": 1
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "example": {
                "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
                "requestedAppName": "test-app"
              }
            },
            "example": {
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1",
              "requestedAppName": "test-app"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities."
          },
          "requestedForWithRequestedItems": {
            "description": "Additional submit data structure with requestedFor containing requestedItems allowing distinction for each request item and Identity.\n* Can only be used when 'requestedFor' and 'requestedItems' are not separately provided\n* Adds ability to specify which account the user wants the access on, in case they have multiple accounts on a source\n* Allows the ability to request items with different remove dates\n* Also allows different combinations of request items and identities in the same request\n* Only for use in GRANT_ACCESS type requests\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedForDtoRef"
            },
            "nullable": true
          }
        },
        "required": [
          "requestedFor",
          "requestedItems"
        ]
      },
      "RequestedItemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of access item requested.",
            "enum": [
              "ACCESS_PROFILE",
              "ENTITLEMENT",
              "ROLE"
            ],
            "example": "ENTITLEMENT"
          },
          "id": {
            "type": "string",
            "description": "The id of the access item requested.",
            "example": "779c6fd7171540bba1184e5946112c28"
          }
        }
      },
      "AccessRequestTracking": {
        "type": "object",
        "properties": {
          "requestedFor": {
            "type": "string",
            "description": "The identity id in which the access request is for.",
            "example": "2c918084660f45d6016617daa9210584"
          },
          "requestedItemsDetails": {
            "type": "array",
            "description": "The details of the item requested.",
            "example": "{\n\"type\": \"ENTITLEMENT\", \n\"id\": \"779c6fd7171540bba1184e5946112c28\" \n }",
            "items": {
              "$ref": "#/components/schemas/RequestedItemDetails"
            }
          },
          "attributesHash": {
            "type": "integer",
            "format": "int32",
            "description": "a hash representation of the access requested, useful for longer term tracking client side.",
            "example": -1928438224
          },
          "accessRequestIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "a list of access request identifiers, generally only one will be populated, but high volume requested may result in multiple ids.",
            "example": [
              "5d3118c518a44ec7805450d53479ccdb"
            ]
          }
        }
      },
      "AccessRequestResponse": {
        "type": "object",
        "properties": {
          "newRequests": {
            "description": "A list of new access request tracking data mapped to the values requested.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRequestTracking"
            },
            "example": [
              {
                "requestedFor": "899fd612ecfc4cf3bf48f14d0afdef89",
                "requestedItemsDetails": [
                  {
                    "type": "ENTITLEMENT",
                    "id": "779c6fd7171540bba1184e5946112c28"
                  }
                ],
                "attributesHash": -1928438224,
                "accessRequestIds": [
                  "5d3118c518a44ec7805450d53479ccdb"
                ]
              }
            ]
          },
          "existingRequests": {
            "description": "A list of existing access request tracking data mapped to the values requested.  This indicates access has already been requested for this item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRequestTracking"
            },
            "example": [
              {
                "requestedFor": "899fd612ecfc4cf3bf48f14d0afdef89",
                "requestedItemsDetails": [
                  {
                    "type": "ROLE",
                    "id": "779c6fd7171540bbc1184e5946112c28"
                  }
                ],
                "attributesHash": 2843118224,
                "accessRequestIds": [
                  "5d3118c518a44ec7805450d53479ccdc"
                ]
              }
            ]
          }
        }
      },
      "CancelAccessRequest": {
        "type": "object",
        "title": "Cancel Access Request",
        "description": "Request body payload for cancel access request endpoint.",
        "required": [
          "accountActivityId",
          "comment"
        ],
        "properties": {
          "accountActivityId": {
            "type": "string",
            "description": "This refers to the identityRequestId. To successfully cancel an access request, you must provide the identityRequestId.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "comment": {
            "type": "string",
            "description": "Reason for cancelling the pending access request.",
            "example": "I requested this role by mistake."
          }
        }
      },
      "CloseAccessRequest": {
        "type": "object",
        "title": "Close Access Request",
        "description": "Request body payload for close access requests endpoint.",
        "required": [
          "accessRequestIds"
        ],
        "properties": {
          "accessRequestIds": {
            "type": "array",
            "description": "Access Request IDs for the requests to be closed. Accepts 1-500 Identity Request IDs per request.",
            "items": {
              "type": "string"
            },
            "example": [
              "2c90ad2a70ace7d50170acf22ca90010"
            ]
          },
          "message": {
            "type": "string",
            "description": "Reason for closing the access request. Displayed under Warnings in IdentityNow.",
            "default": "The IdentityNow Administrator manually closed this request.",
            "example": "The IdentityNow Administrator manually closed this request."
          },
          "executionStatus": {
            "type": "string",
            "enum": [
              "Terminated",
              "Completed"
            ],
            "description": "The request's provisioning status. Displayed as Stage in IdentityNow.",
            "default": "Terminated",
            "example": "Terminated"
          },
          "completionStatus": {
            "type": "string",
            "enum": [
              "Success",
              "Incomplete",
              "Failure"
            ],
            "description": "The request's overall status. Displayed as Status in IdentityNow.",
            "default": "Failure",
            "example": "Failure"
          }
        }
      },
      "RequestOnBehalfOfConfig": {
        "type": "object",
        "title": "Request On Behalf Of Config",
        "properties": {
          "allowRequestOnBehalfOfAnyoneByAnyone": {
            "type": "boolean",
            "description": "If this is true, anyone can request access for anyone.",
            "default": false,
            "example": true
          },
          "allowRequestOnBehalfOfEmployeeByManager": {
            "type": "boolean",
            "description": "If this is true, a manager can request access for his or her direct reports.",
            "default": false,
            "example": true
          }
        }
      },
      "IdentityReferenceWithNameAndEmail": {
        "type": "object",
        "title": "Identity Reference With Name And Email",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "description": "The type can only be IDENTITY. This is read-only.",
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity ID.",
            "example": "5168015d32f890ca15812c9180835d2e"
          },
          "name": {
            "type": "string",
            "description": "Identity's human-readable display name. This is read-only.",
            "example": "Alison Ferguso"
          },
          "email": {
            "type": "string",
            "description": "Identity's email address. This is read-only.",
            "example": "alison.ferguso@identitysoon.com"
          }
        }
      },
      "ApprovalReminderAndEscalationConfig": {
        "type": "object",
        "title": "Approval Reminder And Escalation Config",
        "properties": {
          "daysUntilEscalation": {
            "type": "integer",
            "description": "Number of days to wait before the first reminder. If no reminders are configured, then this is the number of days to wait before escalation.",
            "format": "int32",
            "example": 0,
            "nullable": true
          },
          "daysBetweenReminders": {
            "type": "integer",
            "description": "Number of days to wait between reminder notifications.",
            "format": "int32",
            "example": 0,
            "nullable": true
          },
          "maxReminders": {
            "type": "integer",
            "description": "Maximum number of reminder notification to send to the reviewer before approval escalation.",
            "format": "int32",
            "minimum": 1,
            "example": 1,
            "nullable": true
          },
          "fallbackApproverRef": {
            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
          }
        }
      },
      "EntitlementRequestConfig": {
        "type": "object",
        "title": "Entitlement Request Config",
        "properties": {
          "allowEntitlementRequest": {
            "type": "boolean",
            "description": "If this is true, entitlement requests are allowed.",
            "default": false,
            "example": true
          },
          "requestCommentsRequired": {
            "type": "boolean",
            "description": "If this is true, comments are required to submit entitlement requests.",
            "default": false,
            "example": false
          },
          "deniedCommentsRequired": {
            "type": "boolean",
            "description": "If this is true, comments are required to reject entitlement requests.",
            "default": false,
            "example": false
          },
          "grantRequestApprovalSchemes": {
            "type": "string",
            "description": "Approval schemes for granting entitlement request. This can be empty if no approval is needed.\nMultiple schemes must be comma-separated. The valid schemes are \"entitlementOwner\", \"sourceOwner\", \"manager\" and \"`workgroup:{id}`\".\nYou can use multiple governance groups (workgroups).\n",
            "default": "sourceOwner",
            "nullable": true,
            "example": "entitlementOwner, sourceOwner, manager, workgroup:2c918084660f45d6016617daa9210584"
          }
        }
      },
      "AccessRequestConfig": {
        "type": "object",
        "title": "Access Request Config",
        "properties": {
          "approvalsMustBeExternal": {
            "type": "boolean",
            "description": "If this is true, approvals must be processed by an external system. Also, if this is true, it blocks Request Center access requests and returns an error for any user who isn't an org admin.",
            "default": false,
            "example": true
          },
          "autoApprovalEnabled": {
            "type": "boolean",
            "description": "If this is true and the requester and reviewer are the same, the request is automatically approved.",
            "default": false,
            "example": true
          },
          "reauthorizationEnabled": {
            "type": "boolean",
            "description": "If this is true, reauthorization will be enforced for appropriately configured access items. Enablement of this feature is currently in a limited state.",
            "default": false,
            "example": true
          },
          "requestOnBehalfOfConfig": {
            "$ref": "#/components/schemas/RequestOnBehalfOfConfig",
            "description": "Request On Behalf Of configuration."
          },
          "approvalReminderAndEscalationConfig": {
            "$ref": "#/components/schemas/ApprovalReminderAndEscalationConfig",
            "description": "Approval reminder and escalation configuration."
          },
          "entitlementRequestConfig": {
            "$ref": "#/components/schemas/EntitlementRequestConfig",
            "description": "Entitlement request configuration."
          }
        }
      },
      "OwnerDto": {
        "type": "object",
        "title": "Owner Dto",
        "description": "Owner's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Owner's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Owner's identity ID.",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Owner's name.",
            "example": "Support"
          }
        }
      },
      "CancelledRequestDetails": {
        "type": "object",
        "title": "Cancelled Request Details",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment made by the owner when cancelling the associated request.",
            "example": "This request must be cancelled."
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerDto"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Date comment was added by the owner when cancelling the associated request.",
            "example": "2019-12-20T09:17:12.192Z"
          }
        },
        "description": "Provides additional details for a request that has been cancelled."
      },
      "ErrorMessageDtoList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorMessageDto"
        }
      },
      "RequestedItemStatusRequestState": {
        "type": "string",
        "enum": [
          "EXECUTING",
          "REQUEST_COMPLETED",
          "CANCELLED",
          "TERMINATED",
          "PROVISIONING_VERIFICATION_PENDING",
          "REJECTED",
          "PROVISIONING_FAILED",
          "NOT_ALL_ITEMS_PROVISIONED",
          "ERROR"
        ],
        "description": "Indicates the state of an access request:\n* EXECUTING: The request is executing, which indicates the system is doing some processing.\n* REQUEST_COMPLETED: Indicates the request  has been completed.\n* CANCELLED: The request was cancelled with no user input.\n* TERMINATED: The request has been terminated before it was able to complete.\n* PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified.\n* REJECTED: The request was rejected.\n* PROVISIONING_FAILED: The request has failed to complete.\n* NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes.\n* ERROR: An error occurred during request processing.",
        "example": "EXECUTING"
      },
      "AccessItemReviewedBy": {
        "type": "object",
        "title": "Access Item Reviewed By",
        "description": "Identity who reviewed the access item request.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of identity who reviewed the access item request.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "ID of identity who reviewed the access item request.",
            "example": "2c3780a46faadee4016fb4e018c20652"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity who reviewed the access item request.",
            "example": "Allen Albertson"
          }
        }
      },
      "ManualWorkItemState": {
        "type": "string",
        "enum": [
          "PENDING",
          "APPROVED",
          "REJECTED",
          "EXPIRED",
          "CANCELLED",
          "ARCHIVED"
        ],
        "description": "Indicates the state of the request processing for this item:\n* PENDING: The request for this item is awaiting processing.\n* APPROVED: The request for this item has been approved.\n* REJECTED: The request for this item was rejected.\n* EXPIRED: The request for this item expired with no action taken.\n* CANCELLED: The request for this item was cancelled with no user action.\n* ARCHIVED: The request for this item has been archived after completion.",
        "example": "PENDING"
      },
      "ApprovalScheme": {
        "type": "string",
        "enum": [
          "APP_OWNER",
          "SOURCE_OWNER",
          "MANAGER",
          "ROLE_OWNER",
          "ACCESS_PROFILE_OWNER",
          "ENTITLEMENT_OWNER",
          "GOVERNANCE_GROUP"
        ],
        "description": "Describes the individual or group that is responsible for an approval step.",
        "example": "MANAGER"
      },
      "ApprovalStatusDto": {
        "type": "object",
        "title": "Approval Status Dto",
        "properties": {
          "approvalId": {
            "type": "string",
            "description": "Unique identifier for the approval.",
            "example": "2c9180877b2b6ea4017b2c545f971429",
            "nullable": true
          },
          "forwarded": {
            "type": "boolean",
            "default": false,
            "description": "True if the request for this item was forwarded from one owner to another.",
            "example": false
          },
          "originalOwner": {
            "type": "object",
            "description": "Identity of orginal approval owner.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of original approval owner's identity.",
                "enum": [
                  "GOVERNANCE_GROUP",
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of original approval owner's identity.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Display name of original approval owner.",
                "example": "Michael Michaels"
              }
            }
          },
          "currentOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessItemReviewedBy"
              },
              {
                "nullable": true
              }
            ]
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which item was modified.",
            "example": "2019-08-23T18:52:57.398Z",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ManualWorkItemState"
          },
          "scheme": {
            "$ref": "#/components/schemas/ApprovalScheme"
          },
          "errorMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            },
            "description": "If the request failed, includes any error messages that were generated.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment, if any, provided by the approver.",
            "example": "I approve this request",
            "nullable": true
          },
          "removeDate": {
            "type": "string",
            "description": "The date the role or access profile or entitlement is no longer assigned to the specified identity.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z",
            "nullable": true
          }
        }
      },
      "ReassignmentType": {
        "type": "string",
        "enum": [
          "MANUAL_REASSIGNMENT",
          "AUTOMATIC_REASSIGNMENT",
          "AUTO_ESCALATION",
          "SELF_REVIEW_DELEGATION"
        ],
        "description": "The approval reassignment type. \n* MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task's owner, from their queue to someone else's. \n* AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to that approver's reassignment configuration. The approver's reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time.\n* AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to the request's escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html).\n* SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).",
        "example": "AUTOMATIC_REASSIGNMENT"
      },
      "ApprovalForwardHistory": {
        "type": "object",
        "title": "Approval Forward History",
        "properties": {
          "oldApproverName": {
            "type": "string",
            "description": "Display name of approver from whom the approval was forwarded.",
            "example": "Frank Mir"
          },
          "newApproverName": {
            "type": "string",
            "description": "Display name of approver to whom the approval was forwarded.",
            "example": "Al Volta"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Comment made while forwarding.",
            "example": "Forwarding from Frank to Al"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which approval was forwarded.",
            "example": "2019-08-23T18:52:57.398Z"
          },
          "forwarderName": {
            "type": "string",
            "nullable": true,
            "description": "Display name of forwarder who forwarded the approval.",
            "example": "William Wilson"
          },
          "reassignmentType": {
            "$ref": "#/components/schemas/ReassignmentType",
            "description": "The approval reassignment type. \n* MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task's owner, from their queue to someone else's. \n* AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to that approver's reassignment configuration. The approver's reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time.\n* AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to the request's escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html).\n* SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).",
            "example": "AUTOMATIC_REASSIGNMENT"
          }
        }
      },
      "ManualWorkItemDetails": {
        "type": "object",
        "title": "Manual Work Item Details",
        "properties": {
          "forwarded": {
            "type": "boolean",
            "default": false,
            "description": "True if the request for this item was forwarded from one owner to another.",
            "example": true
          },
          "originalOwner": {
            "type": "object",
            "nullable": true,
            "description": "Identity of original work item owner, if the work item has been forwarded.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of original work item owner's identity.",
                "enum": [
                  "GOVERNANCE_GROUP",
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of original work item owner's identity.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Display name of original work item owner.",
                "example": "Michael Michaels"
              }
            }
          },
          "currentOwner": {
            "type": "object",
            "description": "Identity of current work item owner.",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of current work item owner's identity.",
                "enum": [
                  "GOVERNANCE_GROUP",
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of current work item owner's identity.",
                "example": "2c3780a46faadee4016fb4e018c20652"
              },
              "name": {
                "type": "string",
                "description": "Display name of current work item owner.",
                "example": "Allen Albertson"
              }
            }
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which item was modified.",
            "example": "2019-08-23T18:52:57.398Z"
          },
          "status": {
            "$ref": "#/components/schemas/ManualWorkItemState"
          },
          "forwardHistory": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApprovalForwardHistory"
            },
            "description": "The history of approval forward action."
          }
        }
      },
      "AccessItemRequester": {
        "type": "object",
        "title": "Access Item Requester",
        "description": "Access item requester's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Access item requester's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Access item requester's identity ID.",
            "example": "2c7180a46faadee4016fb4e018c20648"
          },
          "name": {
            "type": "string",
            "description": "Access item owner's human-readable display name.",
            "example": "William Wilson"
          }
        }
      },
      "CommentDto": {
        "type": "object",
        "title": "Comment Dto",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Comment content.",
            "example": "This is a comment."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time comment was created.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "author": {
            "type": "object",
            "readOnly": true,
            "description": "Author of the comment",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY",
                "description": "The type of object"
              },
              "id": {
                "type": "string",
                "description": "The unique ID of the object",
                "example": "2c9180847e25f377017e2ae8cae4650b"
              },
              "name": {
                "type": "string",
                "description": "The display name of the object",
                "example": "john.doe"
              }
            }
          }
        }
      },
      "SodPolicyDto": {
        "type": "object",
        "title": "Sod Policy Dto",
        "description": "SOD policy.",
        "properties": {
          "type": {
            "type": "string",
            "description": "SOD policy DTO type.",
            "enum": [
              "SOD_POLICY"
            ],
            "example": "SOD_POLICY"
          },
          "id": {
            "type": "string",
            "description": "SOD policy ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "name": {
            "type": "string",
            "description": "SOD policy display name.",
            "example": "Business SOD Policy"
          }
        }
      },
      "DtoType": {
        "type": "string",
        "enum": [
          "ACCOUNT_CORRELATION_CONFIG",
          "ACCESS_PROFILE",
          "ACCESS_REQUEST_APPROVAL",
          "ACCOUNT",
          "APPLICATION",
          "CAMPAIGN",
          "CAMPAIGN_FILTER",
          "CERTIFICATION",
          "CLUSTER",
          "CONNECTOR_SCHEMA",
          "ENTITLEMENT",
          "GOVERNANCE_GROUP",
          "IDENTITY",
          "IDENTITY_PROFILE",
          "IDENTITY_REQUEST",
          "MACHINE_IDENTITY",
          "LIFECYCLE_STATE",
          "PASSWORD_POLICY",
          "ROLE",
          "RULE",
          "SOD_POLICY",
          "SOURCE",
          "TAG",
          "TAG_CATEGORY",
          "TASK_RESULT",
          "REPORT_RESULT",
          "SOD_VIOLATION",
          "ACCOUNT_ACTIVITY",
          "WORKGROUP"
        ],
        "description": "An enumeration of the types of DTOs supported within the IdentityNow infrastructure.",
        "example": "IDENTITY"
      },
      "SodExemptCriteria": {
        "description": "Details of the Entitlement criteria",
        "type": "object",
        "title": "Sod Exempt Criteria",
        "properties": {
          "existing": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If the entitlement already belonged to the user or not."
          },
          "type": {
            "$ref": "#/components/schemas/DtoType",
            "example": "ENTITLEMENT"
          },
          "id": {
            "type": "string",
            "description": "Entitlement ID",
            "example": "2c918085771e9d3301773b3cb66f6398"
          },
          "name": {
            "type": "string",
            "description": "Entitlement name",
            "example": "My HR Entitlement"
          }
        }
      },
      "SodViolationContext": {
        "description": "The contextual information of the violated criteria",
        "type": "object",
        "title": "Sod Violation Context",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/SodPolicyDto"
          },
          "conflictingAccessCriteria": {
            "type": "object",
            "description": "The object which contains the left and right hand side of the entitlements that got violated according to the policy.",
            "properties": {
              "leftCriteria": {
                "type": "object",
                "properties": {
                  "criteriaList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SodExemptCriteria"
                    }
                  }
                }
              },
              "rightCriteria": {
                "type": "object",
                "properties": {
                  "criteriaList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SodExemptCriteria"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SodViolationCheckResult": {
        "description": "The inner object representing the completed SOD Violation check",
        "type": "object",
        "title": "Sod Violation Check Result",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ErrorMessageDto",
            "description": "If the request failed, this includes any error message that was generated.",
            "example": [
              {
                "locale": "en-US",
                "localeOrigin": "DEFAULT",
                "text": "An error has occurred during the SOD violation check"
              }
            ]
          },
          "clientMetadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.",
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            }
          },
          "violationContexts": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SodViolationContext"
            }
          },
          "violatedPolicies": {
            "type": "array",
            "nullable": true,
            "description": "A list of the SOD policies that were violated.",
            "items": {
              "$ref": "#/components/schemas/SodPolicyDto"
            }
          }
        }
      },
      "SodViolationContextCheckCompleted": {
        "description": "An object referencing a completed SOD violation check",
        "type": "object",
        "title": "Sod Violation Context Check Completed",
        "nullable": true,
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "ERROR",
              null
            ],
            "description": "The status of SOD violation check",
            "example": "SUCCESS",
            "nullable": true
          },
          "uuid": {
            "description": "The id of the Violation check event",
            "type": "string",
            "example": "f73d16e9-a038-46c5-b217-1246e15fdbdd",
            "nullable": true
          },
          "violationCheckResult": {
            "$ref": "#/components/schemas/SodViolationCheckResult"
          }
        }
      },
      "ProvisioningDetails": {
        "type": "object",
        "title": "Provisioning Details",
        "properties": {
          "orderedSubPhaseReferences": {
            "type": "string",
            "description": "Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.",
            "example": "manualWorkItemDetails"
          }
        },
        "description": "Provides additional details about provisioning for this request."
      },
      "PreApprovalTriggerDetails": {
        "type": "object",
        "title": "Pre Approval Trigger Details",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment left for the pre-approval decision",
            "example": "Access is Approved"
          },
          "reviewer": {
            "type": "string",
            "description": "The reviewer of the pre-approval decision",
            "example": "John Doe"
          },
          "decision": {
            "type": "string",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "description": "The decision of the pre-approval trigger",
            "example": "APPROVED"
          }
        },
        "description": "Provides additional details about the pre-approval trigger for this request."
      },
      "AccessRequestPhases": {
        "type": "object",
        "title": "Access Request Phases",
        "properties": {
          "started": {
            "type": "string",
            "description": "The time that this phase started.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          },
          "finished": {
            "type": "string",
            "description": "The time that this phase finished.",
            "format": "date-time",
            "example": "2020-07-12T00:00:00Z",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of this phase.",
            "example": "APPROVAL_PHASE"
          },
          "state": {
            "type": "string",
            "enum": [
              "PENDING",
              "EXECUTING",
              "COMPLETED",
              "CANCELLED",
              "NOT_EXECUTED"
            ],
            "description": "The state of this phase.",
            "example": "COMPLETED"
          },
          "result": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "FAILED",
              null
            ],
            "description": "The state of this phase.",
            "example": "SUCCESSFUL",
            "nullable": true
          },
          "phaseReference": {
            "type": "string",
            "description": "A reference to another object on the RequestedItemStatus that contains more details about the phase. Note that for the Provisioning phase, this will be empty if there are no manual work items.",
            "example": "approvalDetails",
            "nullable": true
          }
        },
        "description": "Provides additional details about this access request phase."
      },
      "RequestedAccountRef": {
        "type": "object",
        "title": "Requested Account Ref",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the account for the user",
            "example": "Glen.067da3248e914"
          },
          "type": {
            "description": "The type of item",
            "$ref": "#/components/schemas/DtoType",
            "example": "ACCOUNT"
          },
          "accountUuid": {
            "type": "string",
            "nullable": true,
            "description": "The uuid for the account",
            "example": "{fab7119e-004f-4822-9c33-b8d570d6c6a6}"
          },
          "accountId": {
            "type": "string",
            "nullable": true,
            "description": "The native identity for the account",
            "example": "CN=Glen 067da3248e914,OU=YOUROU,OU=org-data-service,DC=YOURDC,DC=local"
          },
          "sourceName": {
            "type": "string",
            "nullable": false,
            "description": "Display name of the source for the account",
            "example": "Multi Account AD source name"
          }
        }
      },
      "RequestedItemStatus": {
        "type": "object",
        "title": "Requested Item Status",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the access request.",
            "example": "2c9180926cbfbddd016cbfc7c3b10010"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the item being requested.",
            "example": "AccessProfile1",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "ROLE",
              "ENTITLEMENT",
              null
            ],
            "description": "Type of requested object.",
            "example": "ACCESS_PROFILE",
            "nullable": true
          },
          "cancelledRequestDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CancelledRequestDetails"
              },
              {
                "nullable": true
              }
            ]
          },
          "errorMessages": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDtoList"
            },
            "description": "List of list of localized error messages, if any, encountered during the approval/provisioning process."
          },
          "state": {
            "$ref": "#/components/schemas/RequestedItemStatusRequestState"
          },
          "approvalDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalStatusDto"
            },
            "description": "Approval details for each item."
          },
          "approvalIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of approval IDs associated with the request.",
            "example": [
              "85f0cf482dd44327b593624c07906c21",
              "fa57e1bfa36f41ee85e33ee59fcbeac5"
            ],
            "nullable": true
          },
          "manualWorkItemDetails": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ManualWorkItemDetails"
            },
            "description": "Manual work items created for provisioning the item."
          },
          "accountActivityItemId": {
            "type": "string",
            "description": "Id of associated account activity item.",
            "example": "2c9180926cbfbddd016cbfc7c3b10010"
          },
          "requestType": {
            "$ref": "#/components/schemas/AccessRequestType"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was last modified.",
            "example": "2019-08-23T18:52:59.162Z",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was created.",
            "example": "2019-08-23T18:40:35.772Z"
          },
          "requester": {
            "$ref": "#/components/schemas/AccessItemRequester"
          },
          "requestedFor": {
            "type": "object",
            "description": "Identity access was requested for.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "description": "Type of the object to which this reference applies",
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the object to which this reference applies",
                "example": "2c9180835d191a86015d28455b4b232a"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "William Wilson"
              }
            }
          },
          "requesterComment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommentDto"
              },
              {
                "nullable": true,
                "description": "The requester's comment."
              }
            ]
          },
          "sodViolationContext": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SodViolationContextCheckCompleted"
              },
              {
                "nullable": true,
                "description": "The details of the SOD violations for the associated approval."
              }
            ]
          },
          "provisioningDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisioningDetails"
              },
              {
                "nullable": true
              }
            ]
          },
          "preApprovalTriggerDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PreApprovalTriggerDetails"
              },
              {
                "nullable": true
              }
            ]
          },
          "accessRequestPhases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRequestPhases"
            },
            "description": "A list of Phases that the Access Request has gone through in order, to help determine the status of the request.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description associated to the requested object.",
            "example": "This is the Engineering role that engineers are granted.",
            "nullable": true
          },
          "removeDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the role access is scheduled for removal.",
            "example": "2019-10-23T00:00:00.000Z"
          },
          "cancelable": {
            "type": "boolean",
            "default": false,
            "description": "True if the request can be canceled.",
            "example": true
          },
          "accessRequestId": {
            "type": "string",
            "description": "This is the account activity id.",
            "example": "2b838de9-db9b-abcf-e646-d4f274ad4238"
          },
          "clientMetadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request",
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          },
          "requestedAccounts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedAccountRef"
            },
            "description": "The accounts selected by the user for the access to be provisioned on, in case they have multiple accounts on one or more sources."
          },
          "privilegeLevel": {
            "nullable": true,
            "type": "string",
            "description": "The privilege level of the requested access item, if applicable.",
            "example": "High"
          }
        }
      },
      "AccessItemRequesterDto": {
        "type": "object",
        "title": "Access Item Requester Dto",
        "description": "Access item requester's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Access item requester's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Access item requester's identity ID.",
            "example": "2c7180a46faadee4016fb4e018c20648"
          },
          "name": {
            "type": "string",
            "description": "Access item owner's human-readable display name.",
            "example": "William Wilson"
          }
        }
      },
      "AccessItemRequestedForDto": {
        "type": "object",
        "title": "Access Item Requested For Dto",
        "description": "Identity the access item is requested for.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of identity the access item is requested for.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "ID of identity the access item is requested for.",
            "example": "2c4180a46faadee4016fb4e018c20626"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity the access item is requested for.",
            "example": "Robert Robinson"
          }
        }
      },
      "AccessItemOwnerDto": {
        "type": "object",
        "title": "Access Item Owner Dto",
        "description": "Access item owner's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Access item owner's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Access item owner's identity ID.",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Access item owner's human-readable display name.",
            "example": "Support"
          }
        }
      },
      "RequestableObjectReference": {
        "type": "object",
        "title": "Requestable Object Reference",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c938083633d259901633d25c68c00fa",
            "description": "Id of the object."
          },
          "name": {
            "type": "string",
            "example": "Object Name",
            "description": "Name of the object."
          },
          "description": {
            "type": "string",
            "example": "Object Description",
            "description": "Description of the object."
          },
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "ROLE",
              "ENTITLEMENT"
            ],
            "description": "Type of the object.",
            "example": "ROLE"
          }
        }
      },
      "PendingApprovalAction": {
        "type": "string",
        "enum": [
          "APPROVED",
          "REJECTED",
          "FORWARDED"
        ],
        "description": "Enum represents action that is being processed on an approval.",
        "example": "APPROVED"
      },
      "SodViolationContext-2": {
        "description": "The contextual information of the violated criteria.",
        "type": "object",
        "title": "Sod Violation Context",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/SodPolicyDto"
          },
          "conflictingAccessCriteria": {
            "type": "object",
            "description": "The object which contains the left and right hand side of the entitlements that got violated according to the policy.",
            "properties": {
              "leftCriteria": {
                "type": "object",
                "properties": {
                  "criteriaList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SodExemptCriteria"
                    }
                  }
                }
              },
              "rightCriteria": {
                "type": "object",
                "properties": {
                  "criteriaList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SodExemptCriteria"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SodViolationCheckResult-2": {
        "description": "The inner object representing the completed SOD Violation check",
        "type": "object",
        "title": "Sod Violation Check Result",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ErrorMessageDto",
            "description": "If the request failed, includes any error message that was generated.",
            "example": [
              {
                "locale": "en-US",
                "localeOrigin": "DEFAULT",
                "text": "An error has occurred during the SOD violation check"
              }
            ]
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.",
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            }
          },
          "violationContexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SodViolationContext-2"
            }
          },
          "violatedPolicies": {
            "type": "array",
            "description": "A list of the Policies that were violated.",
            "items": {
              "$ref": "#/components/schemas/SodPolicyDto"
            }
          }
        }
      },
      "SodViolationContextCheckCompleted-2": {
        "description": "An object referencing a completed SOD violation check",
        "type": "object",
        "title": "Sod Violation Context Check Completed",
        "nullable": true,
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "ERROR"
            ],
            "description": "The status of SOD violation check",
            "example": "SUCCESS"
          },
          "uuid": {
            "description": "The id of the Violation check event",
            "type": "string",
            "example": "f73d16e9-a038-46c5-b217-1246e15fdbdd"
          },
          "violationCheckResult": {
            "$ref": "#/components/schemas/SodViolationCheckResult-2"
          }
        }
      },
      "PendingApproval": {
        "type": "object",
        "title": "Pending Approval",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c9180835d2e5168015d32f890ca1581",
            "description": "The approval id."
          },
          "name": {
            "type": "string",
            "example": "Pending approval name",
            "description": "The name of the approval."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the approval was created.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the approval was modified last time.",
            "example": "2018-07-25T20:22:28.104Z"
          },
          "requestCreated": {
            "type": "string",
            "format": "date-time",
            "description": "When the access-request was created.",
            "example": "2017-07-11T18:45:35.098Z"
          },
          "requestType": {
            "$ref": "#/components/schemas/AccessRequestType",
            "description": "If the access-request was for granting or revoking access."
          },
          "requester": {
            "$ref": "#/components/schemas/AccessItemRequesterDto"
          },
          "requestedFor": {
            "$ref": "#/components/schemas/AccessItemRequestedForDto"
          },
          "owner": {
            "$ref": "#/components/schemas/AccessItemOwnerDto"
          },
          "requestedObject": {
            "$ref": "#/components/schemas/RequestableObjectReference",
            "description": "The requested access item."
          },
          "requesterComment": {
            "$ref": "#/components/schemas/CommentDto",
            "description": "The requester's comment."
          },
          "previousReviewersComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            },
            "description": "The history of the previous reviewers comments."
          },
          "forwardHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalForwardHistory"
            },
            "description": "The history of approval forward action."
          },
          "commentRequiredWhenRejected": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "When true the rejector has to provide comments when rejecting"
          },
          "actionInProcess": {
            "$ref": "#/components/schemas/PendingApprovalAction",
            "description": "Action that is performed on this approval, and system has not finished performing that action yet."
          },
          "removeDate": {
            "type": "string",
            "description": "The date the role or access profile or entitlement is no longer assigned to the specified identity.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          },
          "removeDateUpdateRequested": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If true, then the request is to change the remove date or sunset date."
          },
          "currentRemoveDate": {
            "type": "string",
            "description": "The remove date or sunset date that was assigned at the time of the request.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          },
          "sodViolationContext": {
            "$ref": "#/components/schemas/SodViolationContextCheckCompleted-2",
            "description": "The details of the SOD violations for the associated approval."
          },
          "clientMetadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request item",
            "example": {
              "customKey1": "custom value 1",
              "customKey2": "custom value 2"
            }
          },
          "requestedAccounts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedAccountRef"
            },
            "description": "The accounts selected by the user for the access to be provisioned on, in case they have multiple accounts on one or more sources."
          },
          "privilegeLevel": {
            "nullable": true,
            "type": "string",
            "description": "The privilege level of the requested access item, if applicable.",
            "example": "High"
          }
        }
      },
      "CommentDto-2": {
        "type": "object",
        "title": "Comment Dto",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Comment content.",
            "example": "This is a comment."
          },
          "author": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the commenting identity.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the commenting identity.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Display name of the commenting identity.",
                "example": "Adam Kennedy"
              }
            }
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time comment was created.",
            "example": "2017-07-11T18:45:37.098Z"
          }
        }
      },
      "CompletedApprovalState": {
        "type": "string",
        "enum": [
          "APPROVED",
          "REJECTED"
        ],
        "description": "Enum represents completed approval object's state.",
        "example": "APPROVED"
      },
      "CompletedApproval": {
        "type": "object",
        "title": "Completed Approval",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c938083633d259901633d25c68c00fa",
            "description": "The approval id."
          },
          "name": {
            "type": "string",
            "example": "Approval Name",
            "description": "The name of the approval."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the approval was created.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the approval was modified last time.",
            "example": "2018-07-25T20:22:28.104Z"
          },
          "requestCreated": {
            "type": "string",
            "format": "date-time",
            "description": "When the access-request was created.",
            "example": "2017-07-11T18:45:35.098Z"
          },
          "requestType": {
            "$ref": "#/components/schemas/AccessRequestType",
            "description": "If the access-request was for granting or revoking access."
          },
          "requester": {
            "$ref": "#/components/schemas/AccessItemRequesterDto"
          },
          "requestedFor": {
            "type": "object",
            "description": "Identity access was requested for.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "description": "Type of the object to which this reference applies",
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the object to which this reference applies",
                "example": "2c9180835d191a86015d28455b4b232a"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "William Wilson"
              }
            }
          },
          "reviewedBy": {
            "type": "object",
            "description": "Identity who reviewed the access item request.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of identity who reviewed the access item request.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of identity who reviewed the access item request.",
                "example": "2c3780a46faadee4016fb4e018c20652"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of identity who reviewed the access item request.",
                "example": "Allen Albertson"
              }
            }
          },
          "owner": {
            "$ref": "#/components/schemas/AccessItemOwnerDto"
          },
          "requestedObject": {
            "$ref": "#/components/schemas/RequestableObjectReference",
            "description": "The requested access item."
          },
          "requesterComment": {
            "$ref": "#/components/schemas/CommentDto",
            "description": "The requester's comment."
          },
          "reviewerComment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommentDto-2"
              }
            ],
            "type": "object",
            "nullable": true,
            "description": "The approval's reviewer's comment."
          },
          "previousReviewersComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            },
            "description": "The history of the previous reviewers comments."
          },
          "forwardHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalForwardHistory"
            },
            "description": "The history of approval forward action."
          },
          "commentRequiredWhenRejected": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "When true the rejector has to provide comments when rejecting"
          },
          "state": {
            "$ref": "#/components/schemas/CompletedApprovalState",
            "description": "The final state of the approval"
          },
          "removeDate": {
            "type": "string",
            "nullable": true,
            "description": "The date the role or access profile or entitlement is no longer assigned to the specified identity.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          },
          "removeDateUpdateRequested": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If true, then the request was to change the remove date or sunset date."
          },
          "currentRemoveDate": {
            "type": "string",
            "nullable": true,
            "description": "The remove date or sunset date that was assigned at the time of the request.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          },
          "sodViolationContext": {
            "$ref": "#/components/schemas/SodViolationContextCheckCompleted-2",
            "description": "The details of the SOD violations for the associated approval."
          },
          "preApprovalTriggerResult": {
            "nullable": true,
            "type": "object",
            "description": "If the access request submitted event trigger is configured and this access request was intercepted by it, then this is the result of the trigger's decision to either approve or deny the request.",
            "properties": {
              "comment": {
                "type": "string",
                "description": "The comment from the trigger",
                "example": "This request was autoapproved by our automated ETS subscriber"
              },
              "decision": {
                "$ref": "#/components/schemas/CompletedApprovalState",
                "description": "The approval decision of the trigger"
              },
              "reviewer": {
                "type": "string",
                "description": "The name of the approver",
                "example": "Automated AR Approval"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2022-06-07T19:18:40.748Z",
                "description": "The date and time the trigger decided on the request"
              }
            }
          },
          "clientMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs provided during the request.",
            "example": {
              "requestedAppName": "test-app",
              "requestedAppId": "2c91808f7892918f0178b78da4a305a1"
            }
          },
          "requestedAccounts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedAccountRef"
            },
            "description": "The accounts selected by the user for the access to be provisioned on, in case they have multiple accounts on one or more sources."
          },
          "privilegeLevel": {
            "nullable": true,
            "type": "string",
            "description": "The privilege level of the requested access item, if applicable.",
            "example": "High"
          }
        }
      },
      "ForwardApprovalDto": {
        "type": "object",
        "title": "Forward Approval Dto",
        "required": [
          "newOwnerId",
          "comment"
        ],
        "properties": {
          "newOwnerId": {
            "type": "string",
            "description": "The Id of the new owner",
            "minLength": 1,
            "maxLength": 255
          },
          "comment": {
            "type": "string",
            "description": "The comment provided by the forwarder",
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "ApprovalSummary": {
        "type": "object",
        "title": "Approval Summary",
        "properties": {
          "pending": {
            "type": "integer",
            "description": "The number of pending access requests approvals."
          },
          "approved": {
            "type": "integer",
            "description": "The number of approved access requests approvals."
          },
          "rejected": {
            "type": "integer",
            "description": "The number of rejected access requests approvals."
          }
        }
      },
      "AccessRequestRecommendationItemType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE",
          "ROLE"
        ],
        "description": "The type of access item.",
        "example": "ACCESS_PROFILE"
      },
      "AccessRecommendationMessage": {
        "type": "object",
        "title": "Access Recommendation Message",
        "properties": {
          "interpretation": {
            "type": "string",
            "description": "Information about why the access item was recommended.",
            "example": "95% of your peers have this access."
          }
        }
      },
      "TranslationMessage": {
        "type": "object",
        "title": "Translation Message",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the translation message",
            "example": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_HIGH"
          },
          "values": {
            "type": "array",
            "description": "The values corresponding to the translation messages",
            "items": {
              "type": "string"
            },
            "example": [
              "75",
              "department"
            ]
          }
        }
      },
      "AccessRequestRecommendationItemDetail": {
        "type": "object",
        "title": "Access Request Recommendation Item Detail",
        "properties": {
          "identityId": {
            "type": "string",
            "format": "UUID",
            "description": "Identity ID for the recommendation",
            "example": "2c91808570313110017040b06f344ec9"
          },
          "access": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "UUID",
                "description": "ID of access item being recommended.",
                "example": "2c9180835d2e5168015d32f890ca1581"
              },
              "type": {
                "$ref": "#/components/schemas/AccessRequestRecommendationItemType"
              },
              "name": {
                "type": "string",
                "description": "Name of the access item",
                "example": "Employee-database-read-write"
              },
              "description": {
                "type": "string",
                "description": "Description of the access item",
                "example": "This item grants an employee read and write access to the database"
              }
            }
          },
          "ignored": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the identity has already chosen to ignore this recommendation."
          },
          "requested": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the identity has already chosen to request this recommendation."
          },
          "viewed": {
            "type": "boolean",
            "example": true,
            "description": "Whether or not the identity reportedly viewed this recommendation."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRecommendationMessage"
            }
          },
          "translationMessages": {
            "description": "The list of translation messages",
            "type": "array",
            "example": [
              {
                "key": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_HIGH",
                "values": [
                  "75",
                  "department"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/TranslationMessage"
            }
          }
        }
      },
      "AccessRequestRecommendationItem": {
        "type": "object",
        "title": "Access Request Recommendation Item",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "ID of access item being recommended.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "type": {
            "$ref": "#/components/schemas/AccessRequestRecommendationItemType"
          }
        }
      },
      "AccessRequestRecommendationActionItemResponseDto": {
        "type": "object",
        "title": "Access Request Recommendation Action Item Response Dto",
        "properties": {
          "identityId": {
            "type": "string",
            "format": "UUID",
            "description": "The identity ID taking the action.",
            "example": "2c91808570313110017040b06f344ec9"
          },
          "access": {
            "$ref": "#/components/schemas/AccessRequestRecommendationItem"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          }
        }
      },
      "AccessRequestRecommendationActionItemDto": {
        "type": "object",
        "title": "Access Request Recommendation Action Item Dto",
        "properties": {
          "identityId": {
            "type": "string",
            "format": "UUID",
            "description": "The identity ID taking the action.",
            "example": "2c91808570313110017040b06f344ec9"
          },
          "access": {
            "$ref": "#/components/schemas/AccessRequestRecommendationItem"
          }
        },
        "required": [
          "identityId",
          "access"
        ]
      },
      "BaseCommonDto": {
        "type": "object",
        "title": "Base Common Dto",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "System-generated unique ID of the Object",
            "type": "string",
            "example": "id12345",
            "readOnly": true
          },
          "name": {
            "description": "Name of the Object",
            "type": "string",
            "example": "aName",
            "nullable": true
          },
          "created": {
            "description": "Creation date of the Object",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-01-03T21:16:22.432Z"
          },
          "modified": {
            "description": "Last modification date of the Object",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-01-03T21:16:22.432Z"
          }
        }
      },
      "Recommendation": {
        "type": "object",
        "title": "Recommendation",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "HUMAN",
              "MACHINE"
            ],
            "description": "Recommended type of account.",
            "example": "MACHINE"
          },
          "method": {
            "type": "string",
            "enum": [
              "DISCOVERY",
              "SOURCE",
              "CRITERIA"
            ],
            "description": "Method used to produce the recommendation. DISCOVERY - suggested by AI, SOURCE - the account comes from a source flagged as containing machine accounts, CRITERIA - the account satisfies classification criteria.",
            "example": "DISCOVERY"
          }
        },
        "required": [
          "type",
          "method"
        ]
      },
      "BaseReferenceDto": {
        "type": "object",
        "title": "Base Reference Dto",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DtoType",
            "description": "DTO type"
          },
          "id": {
            "type": "string",
            "description": "ID of the object to which this reference applies",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the object to which this reference applies",
            "example": "William Wilson"
          }
        }
      },
      "Account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommonDto"
          },
          {
            "type": "object",
            "required": [
              "sourceId",
              "sourceName",
              "attributes",
              "authoritative",
              "disabled",
              "locked",
              "nativeIdentity",
              "systemAccount",
              "uncorrelated",
              "manuallyCorrelated",
              "hasEntitlements"
            ],
            "properties": {
              "sourceId": {
                "type": "string",
                "example": "2c9180835d2e5168015d32f890ca1581",
                "description": "The unique ID of the source this account belongs to"
              },
              "sourceName": {
                "type": "string",
                "nullable": true,
                "example": "Employees",
                "description": "The display name of the source this account belongs to"
              },
              "identityId": {
                "type": "string",
                "example": "2c9180835d2e5168015d32f890ca1581",
                "description": "The unique ID of the identity this account is correlated to"
              },
              "cloudLifecycleState": {
                "type": "string",
                "nullable": true,
                "example": "active",
                "description": "The lifecycle state of the identity this account is correlated to"
              },
              "identityState": {
                "type": "string",
                "nullable": true,
                "example": "ACTIVE",
                "description": "The identity state of the identity this account is correlated to"
              },
              "connectionType": {
                "type": "string",
                "nullable": true,
                "example": "direct",
                "description": "The connection type of the source this account is from"
              },
              "isMachine": {
                "type": "boolean",
                "default": false,
                "description": "Indicates if the account is of machine type",
                "example": true
              },
              "recommendation": {
                "$ref": "#/components/schemas/Recommendation",
                "nullable": true,
                "description": "Indicates that the account is currently classified to be one type but is recommended to be a different one",
                "example": {
                  "type": "MACHINE",
                  "method": "DISCOVERY"
                }
              },
              "attributes": {
                "type": "object",
                "nullable": true,
                "additionalProperties": true,
                "description": "The account attributes that are aggregated",
                "example": {
                  "firstName": "SailPoint",
                  "lastName": "Support",
                  "displayName": "SailPoint Support"
                }
              },
              "authoritative": {
                "type": "boolean",
                "description": "Indicates if this account is from an authoritative source",
                "example": false
              },
              "description": {
                "type": "string",
                "description": "A description of the account",
                "nullable": true,
                "example": null
              },
              "disabled": {
                "type": "boolean",
                "description": "Indicates if the account is currently disabled",
                "example": false
              },
              "locked": {
                "type": "boolean",
                "description": "Indicates if the account is currently locked",
                "example": false
              },
              "nativeIdentity": {
                "type": "string",
                "description": "The unique ID of the account generated by the source system",
                "example": "552775"
              },
              "systemAccount": {
                "type": "boolean",
                "example": false,
                "description": "If true, this is a user account within IdentityNow.  If false, this is an account from a source system."
              },
              "uncorrelated": {
                "type": "boolean",
                "description": "Indicates if this account is not correlated to an identity",
                "example": false
              },
              "uuid": {
                "type": "string",
                "description": "The unique ID of the account as determined by the account schema",
                "example": "{b0dce506-d6d4-44d2-8a32-d9a5b21fb175}",
                "nullable": true
              },
              "manuallyCorrelated": {
                "type": "boolean",
                "description": "Indicates if the account has been manually correlated to an identity",
                "example": false
              },
              "hasEntitlements": {
                "type": "boolean",
                "description": "Indicates if the account has entitlements",
                "example": true
              },
              "identity": {
                "$ref": "#/components/schemas/BaseReferenceDto",
                "description": "The identity this account is correlated to",
                "example": {
                  "id": "2c918084660f45d6016617daa9210584",
                  "type": "IDENTITY",
                  "name": "Adam Kennedy"
                }
              },
              "sourceOwner": {
                "$ref": "#/components/schemas/BaseReferenceDto",
                "nullable": true,
                "description": "The owner of the source this account belongs to.",
                "example": {
                  "id": "2c918084660f45d6016617daa9210584",
                  "type": "IDENTITY",
                  "name": "Adam Kennedy"
                }
              },
              "features": {
                "type": "string",
                "description": "A string list containing the owning source's features",
                "example": "ENABLE",
                "nullable": true
              },
              "origin": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "AGGREGATED",
                  "PROVISIONED",
                  null
                ],
                "description": "The origin of the account either aggregated or provisioned",
                "example": "AGGREGATED"
              },
              "ownerIdentity": {
                "$ref": "#/components/schemas/BaseReferenceDto",
                "nullable": true,
                "description": "The identity who owns this account, used only for machine accounts",
                "example": {
                  "id": "2c918084660f45d6016617daa9210584",
                  "type": "IDENTITY",
                  "name": "Adam Kennedy"
                }
              }
            }
          }
        ]
      },
      "AccountAttributesCreate": {
        "type": "object",
        "title": "Account Attributes Create",
        "required": [
          "attributes"
        ],
        "properties": {
          "attributes": {
            "description": "The schema attribute values for the account",
            "type": "object",
            "required": [
              "sourceId"
            ],
            "properties": {
              "sourceId": {
                "type": "string",
                "description": "Target source to create an account",
                "example": "34bfcbe116c9407464af37acbaf7a4dc"
              }
            },
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "sourceId": "34bfcbe116c9407464af37acbaf7a4dc",
              "city": "Austin",
              "displayName": "John Doe",
              "userName": "jdoe",
              "sAMAccountName": "jDoe",
              "mail": "john.doe@sailpoint.com"
            }
          }
        }
      },
      "AccountsAsyncResult": {
        "description": "Accounts async response containing details on started async process",
        "required": [
          "id"
        ],
        "type": "object",
        "title": "Accounts Async Result",
        "properties": {
          "id": {
            "description": "id of the task",
            "type": "string",
            "example": "2c91808474683da6017468693c260195"
          }
        }
      },
      "AccountAttributes": {
        "type": "object",
        "title": "Account Attributes",
        "required": [
          "attributes"
        ],
        "properties": {
          "attributes": {
            "description": "The schema attribute values for the account",
            "type": "object",
            "example": {
              "city": "Austin",
              "displayName": "John Doe",
              "userName": "jdoe",
              "sAMAccountName": "jDoe",
              "mail": "john.doe@sailpoint.com"
            }
          }
        }
      },
      "AccountToggleRequest": {
        "description": "Request used for account enable/disable",
        "type": "object",
        "title": "Account Toggle Request",
        "properties": {
          "externalVerificationId": {
            "description": "If set, an external process validates that the user wants to proceed with this request.",
            "type": "string",
            "example": "3f9180835d2e5168015d32f890ca1581"
          },
          "forceProvisioning": {
            "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "AccountUnlockRequest": {
        "description": "Request used for account unlock",
        "type": "object",
        "title": "Account Unlock Request",
        "properties": {
          "externalVerificationId": {
            "description": "If set, an external process validates that the user wants to proceed with this request.",
            "type": "string",
            "example": "3f9180835d2e5168015d32f890ca1581"
          },
          "unlockIDNAccount": {
            "description": "If set, the IDN account is unlocked after the workflow completes.",
            "type": "boolean",
            "example": false
          },
          "forceProvisioning": {
            "description": "If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "TaskResultDto": {
        "type": "object",
        "title": "Task Result Dto",
        "description": "Task result.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Task result DTO type.",
            "enum": [
              "TASK_RESULT"
            ],
            "example": "TASK_RESULT"
          },
          "id": {
            "type": "string",
            "description": "Task result ID.",
            "example": "464ae7bf791e49fdb74606a2e4a89635"
          },
          "name": {
            "type": "string",
            "description": "Task result display name.",
            "nullable": true,
            "example": null
          }
        }
      },
      "IdentitiesAccountsBulkRequest": {
        "type": "object",
        "title": "Identities Accounts Bulk Request",
        "properties": {
          "identityIds": {
            "description": "The ids of the identities for which enable/disable accounts.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c91808384203c2d018437e631158308",
              "2c9180858082150f0180893dbaf553fe"
            ]
          }
        }
      },
      "BulkIdentitiesAccountsResponse": {
        "type": "object",
        "title": "Bulk Identities Accounts Response",
        "description": "Bulk response object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of bulk request item.",
            "example": "2c9180858082150f0180893dbaf553fe"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "description": "Response status value.",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Status containing additional context information about failures.",
            "example": "Referenced identity \"2c9180858082150f0180893dbaf553fe\" was not found."
          }
        }
      },
      "CompletionStatus": {
        "nullable": true,
        "type": "string",
        "description": "The status after completion.",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "INCOMPLETE",
          "PENDING",
          null
        ],
        "example": "SUCCESS"
      },
      "IdentitySummary": {
        "type": "object",
        "title": "Identity Summary",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of this identity summary",
            "example": "ff80818155fe8c080155fe8d925b0316"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity",
            "example": "SailPoint Services"
          },
          "identityId": {
            "type": "string",
            "description": "ID of the identity that this summary represents",
            "example": "c15b9f5cca5a4e9599eaa0e64fa921bd"
          },
          "completed": {
            "type": "boolean",
            "description": "Indicates if all access items for this summary have been decided on",
            "example": true,
            "default": false
          }
        }
      },
      "AccountActivityApprovalStatus": {
        "type": "string",
        "nullable": true,
        "enum": [
          "FINISHED",
          "REJECTED",
          "RETURNED",
          "EXPIRED",
          "PENDING",
          "CANCELED",
          null
        ],
        "example": "PENDING",
        "description": "The state of an approval status"
      },
      "ProvisioningState": {
        "type": "string",
        "enum": [
          "PENDING",
          "FINISHED",
          "UNVERIFIABLE",
          "COMMITED",
          "FAILED",
          "RETRY"
        ],
        "description": "Provisioning state of an account activity item",
        "example": "PENDING"
      },
      "Comment": {
        "type": "object",
        "title": "Comment",
        "nullable": true,
        "properties": {
          "commenterId": {
            "type": "string",
            "description": "Id of the identity making the comment",
            "example": "2c918084660f45d6016617daa9210584"
          },
          "commenterName": {
            "type": "string",
            "description": "Human-readable display name of the identity making the comment",
            "example": "Adam Kennedy"
          },
          "body": {
            "type": "string",
            "description": "Content of the comment",
            "example": "Et quam massa maximus vivamus nisi ut urna tincidunt metus elementum erat."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time comment was made",
            "example": "2017-07-11T18:45:37.098Z"
          }
        }
      },
      "AccountActivityItemOperation": {
        "type": "string",
        "nullable": true,
        "enum": [
          "ADD",
          "CREATE",
          "MODIFY",
          "DELETE",
          "DISABLE",
          "ENABLE",
          "UNLOCK",
          "LOCK",
          "REMOVE",
          "SET",
          null
        ],
        "description": "Represents an operation in an account activity item",
        "example": "ADD"
      },
      "RequestableObjectType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE",
          "ROLE",
          "ENTITLEMENT"
        ],
        "description": "Currently supported requestable object types.",
        "example": "ACCESS_PROFILE"
      },
      "AccountRequestInfo": {
        "type": "object",
        "title": "Account Request Info",
        "nullable": true,
        "properties": {
          "requestedObjectId": {
            "type": "string",
            "description": "Id of requested object",
            "example": "2c91808563ef85690164001c31140c0c"
          },
          "requestedObjectName": {
            "type": "string",
            "description": "Human-readable name of requested object",
            "example": "Treasury Analyst"
          },
          "requestedObjectType": {
            "$ref": "#/components/schemas/RequestableObjectType"
          }
        },
        "description": "If an account activity item is associated with an access request, captures details of that request."
      },
      "AccountActivityItem": {
        "type": "object",
        "title": "Account Activity Item",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item id",
            "example": "48c545831b264409a81befcabb0e3c5a"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of item",
            "example": "48c545831b264409a81befcabb0e3c5a"
          },
          "requested": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time item was requested",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/AccountActivityApprovalStatus"
          },
          "provisioningStatus": {
            "$ref": "#/components/schemas/ProvisioningState"
          },
          "requesterComment": {
            "$ref": "#/components/schemas/Comment"
          },
          "reviewerIdentitySummary": {
            "$ref": "#/components/schemas/IdentitySummary"
          },
          "reviewerComment": {
            "$ref": "#/components/schemas/Comment"
          },
          "operation": {
            "$ref": "#/components/schemas/AccountActivityItemOperation"
          },
          "attribute": {
            "type": "string",
            "description": "Attribute to which account activity applies",
            "nullable": true,
            "example": "detectedRoles"
          },
          "value": {
            "type": "string",
            "description": "Value of attribute",
            "nullable": true,
            "example": "Treasury Analyst [AccessProfile-1529010191212]"
          },
          "nativeIdentity": {
            "nullable": true,
            "type": "string",
            "description": "Native identity in the target system to which the account activity applies",
            "example": "Sandie.Camero"
          },
          "sourceId": {
            "type": "string",
            "description": "Id of Source to which account activity applies",
            "example": "2c91808363ef85290164000587130c0c"
          },
          "accountRequestInfo": {
            "$ref": "#/components/schemas/AccountRequestInfo"
          },
          "clientMetadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request item",
            "example": {
              "customKey1": "custom value 1",
              "customKey2": "custom value 2"
            }
          },
          "removeDate": {
            "nullable": true,
            "type": "string",
            "description": "The date the role or access profile or entitlement is no longer assigned to the specified identity.",
            "format": "date-time",
            "example": "2020-07-11T00:00:00Z"
          }
        }
      },
      "ExecutionStatus": {
        "type": "string",
        "description": "The current state of execution.",
        "enum": [
          "EXECUTING",
          "VERIFYING",
          "TERMINATED",
          "COMPLETED"
        ],
        "example": "COMPLETED"
      },
      "CancelableAccountActivity": {
        "type": "object",
        "title": "Cancelable Account Activity",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the account activity itself",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "completed": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "completionStatus": {
            "$ref": "#/components/schemas/CompletionStatus"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "example": "appRequest"
          },
          "requesterIdentitySummary": {
            "$ref": "#/components/schemas/IdentitySummary"
          },
          "targetIdentitySummary": {
            "$ref": "#/components/schemas/IdentitySummary"
          },
          "errors": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "sailpoint.connector.ConnectorException: java.lang.InterruptedException: Timeout waiting for response to message 0 from client 57a4ab97-ab3f-4aef-9fe2-0eaf15c73d26 after 60 seconds."
            ]
          },
          "warnings": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": null
          },
          "items": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AccountActivityItem"
            }
          },
          "executionStatus": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "clientMetadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary key-value pairs, if any were included in the corresponding access request"
          },
          "cancelable": {
            "type": "boolean",
            "description": "Whether the account activity can be canceled before completion"
          },
          "cancelComment": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "AccountAggregationStatus": {
        "type": "object",
        "title": "Account Aggregation Status",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "example": "2021-01-31T14:30:05.104Z",
            "description": "When the aggregation started."
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "ACCOUNTS_COLLECTED",
              "COMPLETED",
              "CANCELLED",
              "RETRIED",
              "TERMINATED"
            ],
            "example": "ACCOUNTS_COLLECTED",
            "description": "STARTED - Aggregation started, but source account iteration has not completed.\n\nACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.\n\nCOMPLETED - Aggregation completed (*possibly with errors*).\n\nCANCELLED - Aggregation cancelled by user.\n\nRETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.\n\nTERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance.\n"
          },
          "totalAccounts": {
            "type": "integer",
            "example": 520,
            "description": "The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
          },
          "processedAccounts": {
            "type": "integer",
            "example": 150,
            "description": "The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*"
          }
        }
      },
      "AuthProfileSummary": {
        "type": "object",
        "title": "Auth Profile Summary",
        "properties": {
          "tenant": {
            "type": "string",
            "description": "Tenant name.",
            "example": "test-tenant"
          },
          "id": {
            "type": "string",
            "description": "Identity ID.",
            "example": "2c91808458ae7a4f0158b1bbf8af0628"
          }
        }
      },
      "AuthProfile": {
        "type": "object",
        "title": "Auth Profile",
        "properties": {
          "name": {
            "type": "string",
            "description": "Authentication Profile name.",
            "example": "EndToEnd-Profile"
          },
          "offNetwork": {
            "type": "boolean",
            "description": "Use it to block access from off network.",
            "default": false,
            "example": true
          },
          "untrustedGeography": {
            "type": "boolean",
            "description": "Use it to block access from untrusted geoographies.",
            "default": false,
            "example": true
          },
          "applicationId": {
            "type": "string",
            "description": "Application ID.",
            "example": "2c91808458ae7a4f0158b1bbf8af0628"
          },
          "applicationName": {
            "type": "string",
            "description": "Application name.",
            "example": "EndToEnd-Source"
          },
          "type": {
            "type": "string",
            "enum": [
              "BLOCK",
              "MFA",
              "NON_PTA",
              "PTA"
            ],
            "description": "Type of the Authentication Profile.",
            "example": "PTA"
          },
          "strongAuthLogin": {
            "type": "boolean",
            "description": "Use it to enable strong authentication.",
            "default": false,
            "example": true
          }
        }
      },
      "CampaignAlert": {
        "type": "object",
        "title": "Campaign Alert",
        "properties": {
          "level": {
            "type": "string",
            "enum": [
              "ERROR",
              "WARN",
              "INFO"
            ],
            "description": "Denotes the level of the message",
            "example": "ERROR"
          },
          "localizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessageDto"
            }
          }
        }
      },
      "SlimCampaign": {
        "type": "object",
        "title": "Slim Campaign",
        "required": [
          "name",
          "description",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Id of the campaign",
            "example": "2c9079b270a266a60170a2779fcb0007"
          },
          "name": {
            "description": "The campaign name. If this object is part of a template, special formatting applies; see the\n`/campaign-templates/{id}/generate` endpoint documentation for details.\n",
            "type": "string",
            "example": "Manager Campaign"
          },
          "description": {
            "type": "string",
            "description": "The campaign description. If this object is part of a template, special formatting applies; see the\n`/campaign-templates/{id}/generate` endpoint documentation for details.\n",
            "example": "Everyone needs to be reviewed by their manager"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "The campaign's completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.",
            "example": "2020-03-15T10:00:01.456Z"
          },
          "type": {
            "type": "string",
            "description": "The type of campaign. Could be extended in the future.",
            "enum": [
              "MANAGER",
              "SOURCE_OWNER",
              "SEARCH",
              "ROLE_COMPOSITION",
              "MACHINE_ACCOUNT"
            ],
            "example": "MANAGER"
          },
          "emailNotificationEnabled": {
            "type": "boolean",
            "description": "Enables email notification for this campaign",
            "default": false,
            "example": false
          },
          "autoRevokeAllowed": {
            "type": "boolean",
            "description": "Allows auto revoke for this campaign",
            "default": false,
            "example": false
          },
          "recommendationsEnabled": {
            "type": "boolean",
            "description": "Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off\nthen campaigns generated from this template will indicate false. The real value will then be returned if\nIAI is ever enabled for the org in the future.\n",
            "default": false,
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The campaign's current status.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "STAGED",
              "CANCELING",
              "ACTIVATING",
              "ACTIVE",
              "COMPLETING",
              "COMPLETED",
              "ERROR",
              "ARCHIVED"
            ],
            "example": "ACTIVE"
          },
          "correlatedStatus": {
            "type": "string",
            "description": "The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated.\nAn Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).\n",
            "enum": [
              "CORRELATED",
              "UNCORRELATED"
            ],
            "example": "CORRELATED"
          },
          "created": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Created time of the campaign",
            "example": "2020-03-03T22:15:13.611Z"
          },
          "totalCertifications": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of certifications in this campaign.",
            "readOnly": true,
            "example": 100
          },
          "completedCertifications": {
            "type": "integer",
            "format": "int32",
            "description": "The number of completed certifications in this campaign.",
            "readOnly": true,
            "example": 10
          },
          "alerts": {
            "type": "array",
            "description": "A list of errors and warnings that have accumulated.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/CampaignAlert"
            }
          }
        }
      },
      "AccessConstraint": {
        "type": "object",
        "title": "Access Constraint",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ENTITLEMENT",
              "ACCESS_PROFILE",
              "ROLE"
            ],
            "description": "Type of Access",
            "example": "ENTITLEMENT"
          },
          "ids": {
            "description": "Must be set only if operator is SELECTED.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c90ad2a70ace7d50170acf22ca90010"
            ]
          },
          "operator": {
            "type": "string",
            "enum": [
              "ALL",
              "SELECTED"
            ],
            "description": "Used to determine whether the scope of the campaign should be reduced for selected ids or all.",
            "example": "SELECTED"
          }
        },
        "required": [
          "type",
          "operator"
        ]
      },
      "Campaign": {
        "type": "object",
        "title": "Campaign",
        "allOf": [
          {
            "$ref": "#/components/schemas/SlimCampaign"
          },
          {
            "type": "object",
            "properties": {
              "modified": {
                "type": "string",
                "readOnly": true,
                "format": "date-time",
                "description": "Modified time of the campaign",
                "example": "2020-03-03T22:20:12.674Z"
              },
              "correlatedStatus": {
                "type": "string",
                "description": "The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).",
                "enum": [
                  "CORRELATED",
                  "UNCORRELATED"
                ],
                "example": "CORRELATED"
              },
              "filter": {
                "type": "object",
                "description": "Determines which items will be included in this campaign. The default campaign filter is used if this field is left blank.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of whatever type of filter is being used.",
                    "example": "0fbe863c063c4c88a35fd7f17e8a3df5"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the filter",
                    "enum": [
                      "CAMPAIGN_FILTER"
                    ],
                    "example": "CAMPAIGN_FILTER"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the filter",
                    "example": "Test Filter"
                  }
                }
              },
              "sunsetCommentsRequired": {
                "type": "boolean",
                "description": "Determines if comments on sunset date changes are required.",
                "default": true,
                "example": true
              },
              "sourceOwnerCampaignInfo": {
                "type": "object",
                "description": "Must be set only if the campaign type is SOURCE_OWNER.",
                "properties": {
                  "sourceIds": {
                    "type": "array",
                    "description": "The list of sources to be included in the campaign.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "0fbe863c063c4c88a35fd7f17e8a3df5"
                    ]
                  }
                }
              },
              "searchCampaignInfo": {
                "type": "object",
                "description": "Must be set only if the campaign type is SEARCH.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of search campaign represented.",
                    "enum": [
                      "IDENTITY",
                      "ACCESS"
                    ],
                    "example": "ACCESS"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describes this search campaign. Intended for storing the query used, and possibly the number of identities selected/available.",
                    "example": "Search Campaign description"
                  },
                  "reviewer": {
                    "type": "object",
                    "description": "If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The reviewer's DTO type.",
                        "enum": [
                          "GOVERNANCE_GROUP",
                          "IDENTITY"
                        ],
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "The reviewer's ID.",
                        "example": "2c91808568c529c60168cca6f90c1313"
                      },
                      "name": {
                        "type": "string",
                        "description": "The reviewer's name.",
                        "example": "William Wilson"
                      }
                    }
                  },
                  "query": {
                    "type": "string",
                    "description": "The scope for the campaign. The campaign will cover identities returned by the query and identities that have access items returned by the query. One of `query` or `identityIds` must be set.",
                    "example": "Search Campaign query description"
                  },
                  "identityIds": {
                    "type": "array",
                    "description": "A direct list of identities to include in this campaign. One of `identityIds` or `query` must be set.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "0fbe863c063c4c88a35fd7f17e8a3df5"
                    ]
                  },
                  "accessConstraints": {
                    "type": "array",
                    "description": "Further reduces the scope of the campaign by excluding identities (from `query` or `identityIds`) that do not have this access.",
                    "items": {
                      "$ref": "#/components/schemas/AccessConstraint"
                    },
                    "maxItems": 1000
                  }
                },
                "required": [
                  "type"
                ]
              },
              "roleCompositionCampaignInfo": {
                "type": "object",
                "description": "Optional configuration options for role composition campaigns.",
                "properties": {
                  "reviewer": {
                    "type": "object",
                    "description": "If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The reviewer's DTO type.",
                        "enum": [
                          "GOVERNANCE_GROUP",
                          "IDENTITY"
                        ],
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "The reviewer's ID.",
                        "example": "2c91808568c529c60168cca6f90c1313"
                      },
                      "name": {
                        "type": "string",
                        "description": "The reviewer's name.",
                        "example": "William Wilson"
                      }
                    }
                  },
                  "roleIds": {
                    "type": "array",
                    "description": "Optional list of roles to include in this campaign. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "2c90ad2a70ace7d50170acf22ca90010"
                    ]
                  },
                  "remediatorRef": {
                    "type": "object",
                    "description": "This determines who remediation tasks will be assigned to. Remediation tasks are created for each revoke decision on items in the campaign. The only legal remediator type is 'IDENTITY', and the chosen identity must be a Role Admin or Org Admin.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "IDENTITY"
                        ],
                        "description": "Legal Remediator Type",
                        "example": "IDENTITY"
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the remediator.",
                        "example": "2c90ad2a70ace7d50170acf22ca90010"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the remediator.",
                        "readOnly": true,
                        "example": "Role Admin"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  },
                  "query": {
                    "type": "string",
                    "description": "Optional search query to scope this campaign to a set of roles. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.",
                    "example": "Search Query"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describes this role composition campaign. Intended for storing the query used, and possibly the number of roles selected/available.",
                    "example": "Role Composition Description"
                  }
                },
                "required": [
                  "remediatorRef"
                ]
              },
              "machineAccountCampaignInfo": {
                "type": "object",
                "description": "Must be set only if the campaign type is MACHINE_ACCOUNT.",
                "properties": {
                  "sourceIds": {
                    "type": "array",
                    "description": "The list of sources to be included in the campaign.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "0fbe863c063c4c88a35fd7f17e8a3df5"
                    ]
                  },
                  "reviewerType": {
                    "type": "string",
                    "description": "The reviewer's type.",
                    "enum": [
                      "ACCOUNT_OWNER"
                    ],
                    "example": "ACCOUNT_OWNER"
                  }
                }
              },
              "sourcesWithOrphanEntitlements": {
                "type": "array",
                "description": "A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the source",
                      "example": "2c90ad2a70ace7d50170acf22ca90010"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "SOURCE"
                      ],
                      "description": "Type",
                      "example": "SOURCE"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the source",
                      "example": "Source with orphan entitlements"
                    }
                  }
                }
              },
              "mandatoryCommentRequirement": {
                "type": "string",
                "description": "Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.",
                "enum": [
                  "ALL_DECISIONS",
                  "REVOKE_ONLY_DECISIONS",
                  "NO_DECISIONS"
                ],
                "example": "NO_DECISIONS"
              }
            }
          }
        ]
      },
      "DeleteCampaignsRequest": {
        "type": "object",
        "title": "Delete Campaigns Request",
        "properties": {
          "ids": {
            "description": "The ids of the campaigns to delete",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c9180887335cee10173490db1776c26",
              "2c9180836a712436016a7125a90c0021"
            ]
          }
        }
      },
      "ActivateCampaignOptions": {
        "type": "object",
        "title": "Activate Campaign Options",
        "properties": {
          "timeZone": {
            "type": "string",
            "description": "The timezone must be in a valid ISO 8601 format. Timezones in ISO 8601 are represented as UTC (represented as 'Z') or as an offset from UTC. The offset format can be +/-hh:mm, +/-hhmm, or +/-hh.",
            "default": "Z",
            "example": "-05:00"
          }
        }
      },
      "CompleteCampaignOptions": {
        "type": "object",
        "title": "Complete Campaign Options",
        "properties": {
          "autoCompleteAction": {
            "description": "Determines whether to auto-approve(APPROVE) or auto-revoke(REVOKE) upon campaign completion.",
            "type": "string",
            "enum": [
              "APPROVE",
              "REVOKE"
            ],
            "default": "APPROVE",
            "example": "REVOKE"
          }
        }
      },
      "AdminReviewReassign": {
        "type": "object",
        "title": "Admin Review Reassign",
        "properties": {
          "certificationIds": {
            "description": "List of certification IDs to reassign",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 250,
            "example": [
              "af3859464779471211bb8424a563abc1",
              "af3859464779471211bb8424a563abc2",
              "af3859464779471211bb8424a563abc3"
            ]
          },
          "reassignTo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identity ID to which the review is being assigned.",
                "example": "ef38f94347e94562b5bb8424a56397d8"
              },
              "type": {
                "type": "string",
                "description": "The type of the ID provided.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              }
            }
          },
          "reason": {
            "type": "string",
            "description": "Comment to explain why the certification was reassigned",
            "example": "reassigned for some reason"
          }
        }
      },
      "CertificationTask": {
        "type": "object",
        "title": "Certification Task",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certification task.",
            "example": "2c918086719eec070171a7e3355a360a"
          },
          "type": {
            "type": "string",
            "description": "The type of the certification task. More values may be added in the future.",
            "enum": [
              "REASSIGN",
              "ADMIN_REASSIGN",
              "COMPLETE_CERTIFICATION",
              "FINISH_CERTIFICATION",
              "COMPLETE_CAMPAIGN",
              "ACTIVATE_CAMPAIGN",
              "CAMPAIGN_CREATE",
              "CAMPAIGN_DELETE"
            ],
            "example": "ADMIN_REASSIGN"
          },
          "targetType": {
            "type": "string",
            "description": "The type of item that is being operated on by this task whose ID is stored in the targetId field.",
            "enum": [
              "CERTIFICATION",
              "CAMPAIGN"
            ],
            "example": "CAMPAIGN"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the item being operated on by this task.",
            "example": "2c918086719eec070171a7e3355a834c"
          },
          "status": {
            "type": "string",
            "description": "The status of the task.",
            "enum": [
              "QUEUED",
              "IN_PROGRESS",
              "SUCCESS",
              "ERROR"
            ]
          },
          "errors": {
            "$ref": "#/components/schemas/ErrorMessageDtoList",
            "description": "A list of errors that have been encountered by the task."
          },
          "created": {
            "type": "string",
            "description": "The date and time on which this task was created.",
            "format": "date-time",
            "example": "2020-09-24T18:10:47.693Z"
          }
        }
      },
      "SodReportResultDto": {
        "type": "object",
        "title": "Sod Report Result Dto",
        "description": "SOD policy violation report result.",
        "properties": {
          "type": {
            "type": "string",
            "description": "SOD policy violation report result DTO type.",
            "enum": [
              "REPORT_RESULT"
            ],
            "example": "REPORT_RESULT"
          },
          "id": {
            "type": "string",
            "description": "SOD policy violation report result ID.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the SOD policy violation report result.",
            "example": "SOD Policy 1 Violation"
          }
        }
      },
      "ReportResultReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SodReportResultDto"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of a SOD policy violation report.",
                "enum": [
                  "SUCCESS",
                  "WARNING",
                  "ERROR",
                  "TERMINATED",
                  "TEMP_ERROR",
                  "PENDING"
                ],
                "example": "PENDING"
              }
            }
          }
        ]
      },
      "ReportType": {
        "type": "string",
        "description": "type of a Report",
        "enum": [
          "CAMPAIGN_COMPOSITION_REPORT",
          "CAMPAIGN_REMEDIATION_STATUS_REPORT",
          "CAMPAIGN_STATUS_REPORT",
          "CERTIFICATION_SIGNOFF_REPORT"
        ],
        "example": "CAMPAIGN_COMPOSITION_REPORT"
      },
      "CampaignReport": {
        "type": "object",
        "title": "Campaign Report",
        "required": [
          "reportType"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportResultReference"
          },
          {
            "type": "object",
            "properties": {
              "reportType": {
                "$ref": "#/components/schemas/ReportType"
              },
              "lastRunAt": {
                "type": "string",
                "readOnly": true,
                "format": "date-time",
                "description": "The most recent date and time this report was run"
              }
            }
          }
        ],
        "example": {
          "type": "REPORT_RESULT",
          "id": "2c91808568c529c60168cca6f90c1313",
          "name": "Campaign Composition Report",
          "status": "SUCCESS",
          "reportType": "CAMPAIGN_COMPOSITION_REPORT",
          "lastRunAt": "2019-12-19T13:49:37.385Z"
        }
      },
      "CampaignReportsConfig": {
        "type": "object",
        "title": "Campaign Reports Configuration",
        "properties": {
          "identityAttributeColumns": {
            "type": "array",
            "nullable": true,
            "description": "list of identity attribute columns",
            "items": {
              "type": "string"
            },
            "example": [
              "firstname",
              "lastname"
            ]
          }
        }
      },
      "CampaignTemplate": {
        "type": "object",
        "title": "Campaign Template",
        "description": "Campaign Template",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the campaign template",
            "example": "2c9079b270a266a60170a277bb960008"
          },
          "name": {
            "type": "string",
            "description": "This template's name. Has no bearing on generated campaigns' names.",
            "example": "Manager Campaign Template"
          },
          "description": {
            "type": "string",
            "description": "This template's description. Has no bearing on generated campaigns' descriptions.",
            "example": "Template for the annual manager campaign."
          },
          "created": {
            "type": "string",
            "description": "Creation date of Campaign Template",
            "readOnly": true,
            "format": "date-time",
            "example": "2020-03-05T22:44:00.364Z"
          },
          "modified": {
            "type": "string",
            "nullable": true,
            "description": "Modification date of Campaign Template",
            "readOnly": true,
            "format": "date-time",
            "example": "2020-03-05T22:52:09.969Z"
          },
          "scheduled": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if this campaign template has been scheduled.",
            "example": false,
            "default": false
          },
          "ownerRef": {
            "type": "object",
            "readOnly": true,
            "description": "The owner of this template, and the owner of campaigns generated from this template via a schedule. This field is automatically populated at creation time with the current user.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the owner",
                "example": "2c918086676d3e0601677611dbde220f"
              },
              "type": {
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "description": "Type of the owner",
                "example": "IDENTITY"
              },
              "name": {
                "type": "string",
                "description": "Name of the owner",
                "example": "Mister Manager"
              },
              "email": {
                "type": "string",
                "description": "Email of the owner",
                "example": "mr.manager@example.com"
              }
            }
          },
          "deadlineDuration": {
            "type": "string",
            "description": "The time period during which the campaign should be completed, formatted as an ISO-8601 Duration. When this template generates a campaign, the campaign's deadline will be the current date plus this duration. For example, if generation occurred on 2020-01-01 and this field was \"P2W\" (two weeks), the resulting campaign's deadline would be 2020-01-15 (the current date plus 14 days).",
            "example": "P2W"
          },
          "campaign": {
            "$ref": "#/components/schemas/Campaign"
          }
        },
        "required": [
          "name",
          "description",
          "created",
          "modified",
          "campaign"
        ]
      },
      "CampaignReference": {
        "type": "object",
        "title": "Campaign Reference",
        "required": [
          "id",
          "name",
          "type",
          "campaignType",
          "description",
          "correlatedStatus",
          "mandatoryCommentRequirement"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the campaign.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign.",
            "example": "Campaign Name"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAMPAIGN"
            ],
            "description": "The type of object that is being referenced.",
            "example": "CAMPAIGN"
          },
          "campaignType": {
            "type": "string",
            "enum": [
              "MANAGER",
              "SOURCE_OWNER",
              "SEARCH"
            ],
            "description": "The type of the campaign.",
            "example": "MANAGER"
          },
          "description": {
            "type": "string",
            "description": "The description of the campaign set by the admin who created it.",
            "nullable": true,
            "example": "A description of the campaign"
          },
          "correlatedStatus": {
            "type": "string",
            "description": "The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).",
            "enum": [
              "CORRELATED",
              "UNCORRELATED"
            ],
            "example": "CORRELATED"
          },
          "mandatoryCommentRequirement": {
            "type": "string",
            "description": "Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.",
            "enum": [
              "ALL_DECISIONS",
              "REVOKE_ONLY_DECISIONS",
              "NO_DECISIONS"
            ],
            "example": "NO_DECISIONS"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "title": "Schedule",
        "properties": {
          "type": {
            "type": "string",
            "description": "Determines the overall schedule cadence. In general, all time period fields smaller than the chosen type can be configured. For example, a DAILY schedule can have 'hours' set, but not 'days'; a WEEKLY schedule can have both 'hours' and 'days' set.",
            "enum": [
              "WEEKLY",
              "MONTHLY",
              "ANNUALLY",
              "CALENDAR"
            ],
            "example": "WEEKLY"
          },
          "months": {
            "type": "object",
            "description": "Specifies which months of a schedule are active. Only valid for ANNUALLY schedule types. Examples:\n\nOn February and March:\n* type LIST\n* values \"2\", \"3\"\n\nEvery 3 months, starting in January (quarterly):\n* type LIST\n* values \"1\"\n* interval 3\n\nEvery two months between July and December:\n* type RANGE\n* values \"7\", \"12\"\n* interval 2\n",
            "properties": {
              "type": {
                "type": "string",
                "description": "Enum type to specify months value",
                "enum": [
                  "LIST",
                  "RANGE"
                ],
                "example": "LIST"
              },
              "values": {
                "type": "array",
                "description": "Values of the months based on the enum type mentioned above",
                "items": {
                  "type": "string"
                },
                "example": [
                  "1"
                ]
              },
              "interval": {
                "type": "integer",
                "example": 2,
                "format": "int64",
                "description": "Interval between the cert generations"
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "days": {
            "type": "object",
            "description": "Specifies which day(s) a schedule is active for. This is required for all schedule types.\nThe \"values\" field holds different data depending on the type of schedule:\n* WEEKLY: days of the week (1-7)\n* MONTHLY: days of the month (1-31, L, L-1...)\n* ANNUALLY: if the \"months\" field is also set: days of the month (1-31, L, L-1...); otherwise: ISO-8601 dates without year (\"--12-31\")\n* CALENDAR: ISO-8601 dates (\"2020-12-31\")\n\nNote that CALENDAR only supports the LIST type, and ANNUALLY does not support the RANGE type when provided\nwith ISO-8601 dates without year.\n\nExamples:\n\nOn Sundays:\n* type LIST\n* values \"1\"\n\nThe second to last day of the month:\n* type LIST\n* values \"L-1\"\n\nFrom the 20th to the last day of the month:\n* type RANGE\n* values \"20\", \"L\"\n\nEvery March 2nd:\n* type LIST\n* values \"--03-02\"\n\nOn March 2nd, 2021:\n* type: LIST\n* values \"2021-03-02\"\n",
            "properties": {
              "type": {
                "type": "string",
                "description": "Enum type to specify days value",
                "enum": [
                  "LIST",
                  "RANGE"
                ],
                "example": "LIST"
              },
              "values": {
                "type": "array",
                "description": "Values of the days based on the enum type mentioned above",
                "items": {
                  "type": "string"
                },
                "example": [
                  "1"
                ]
              },
              "interval": {
                "type": "integer",
                "example": 2,
                "format": "int64",
                "description": "Interval between the cert generations"
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "hours": {
            "type": "object",
            "description": "Specifies which hour(s) a schedule is active for. Examples:\n\nEvery three hours starting from 8AM, inclusive:\n* type LIST\n* values \"8\"\n* interval 3\n\nDuring business hours:\n* type RANGE\n* values \"9\", \"5\"\n\nAt 5AM, noon, and 5PM:\n* type LIST\n* values \"5\", \"12\", \"17\"\n",
            "properties": {
              "type": {
                "type": "string",
                "description": "Enum type to specify hours value",
                "enum": [
                  "LIST",
                  "RANGE"
                ],
                "example": "LIST"
              },
              "values": {
                "type": "array",
                "description": "Values of the days based on the enum type mentioned above",
                "items": {
                  "type": "string"
                },
                "example": [
                  "1"
                ]
              },
              "interval": {
                "type": "integer",
                "format": "int64",
                "example": 2,
                "description": "Interval between the cert generations"
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "Specifies the time after which this schedule will no longer occur.",
            "example": "2022-09-19 13:55:26"
          },
          "timeZoneId": {
            "type": "string",
            "description": "The time zone to use when running the schedule. For instance, if the schedule is scheduled to run at 1AM, and this field is set to \"CST\", the schedule will run at 1AM CST.",
            "example": "CST"
          }
        },
        "required": [
          "type",
          "hours"
        ]
      },
      "ReassignReference": {
        "type": "object",
        "title": "Reassign Reference",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of item or identity being reassigned.",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "type": {
            "type": "string",
            "description": "The type of item or identity being reassigned.",
            "enum": [
              "TARGET_SUMMARY",
              "ITEM",
              "IDENTITY_SUMMARY"
            ],
            "example": "ITEM"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "ReviewReassign": {
        "type": "object",
        "title": "Review Reassign",
        "properties": {
          "reassign": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignReference"
            }
          },
          "reassignTo": {
            "type": "string",
            "description": "The ID of the identity to which the certification is reassigned",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "reason": {
            "type": "string",
            "description": "The reason comment for why the reassign was made",
            "example": "reassigned for some reason"
          }
        },
        "required": [
          "reassign",
          "reassignTo",
          "reason"
        ]
      },
      "IdentityCertificationTask": {
        "type": "object",
        "title": "Identity Certification Task",
        "properties": {
          "id": {
            "type": "string",
            "description": "The task id",
            "example": "abcd-ef12-3456"
          },
          "certificationId": {
            "type": "string",
            "description": "The certification id",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "type": {
            "type": "string",
            "enum": [
              "REASSIGN"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "IN_PROGRESS",
              "SUCCESS",
              "ERROR"
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any errors executing the task (Optional).",
            "example": []
          }
        }
      },
      "CertificationPhase": {
        "type": "string",
        "description": "The current phase of the campaign.\n* `STAGED`: The campaign is waiting to be activated.\n* `ACTIVE`: The campaign is active.\n* `SIGNED`: The reviewer has signed off on the campaign, and it is considered complete.\n",
        "enum": [
          "STAGED",
          "ACTIVE",
          "SIGNED"
        ],
        "example": "ACTIVE"
      },
      "Reviewer": {
        "description": "Details of the reviewer for a certification.",
        "type": "object",
        "title": "Reviewer",
        "required": [
          "type",
          "id",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Reviewer's DTO type.",
            "enum": [
              "IDENTITY",
              "GOVERNANCE_GROUP"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Reviewer's ID.",
            "example": "2c7180a46faadee4016fb4e018c20642"
          },
          "name": {
            "type": "string",
            "description": "Reviewer's display name.",
            "example": "Michael Michaels"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Reviewing identity's email. This is only applicable to reviewers of the `IDENTITY` type.",
            "example": "reviewer@test.com"
          }
        }
      },
      "CertificationReferenceDto": {
        "type": "object",
        "title": "Certification Reference Dto",
        "description": "Certification for review.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of certification for review.",
            "enum": [
              "CERTIFICATION"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "ID of certification for review.",
            "example": "7589a83cec4b4f138ce56c1a5ef0756d"
          },
          "name": {
            "type": "string",
            "description": "Display name of certification for review.",
            "example": "Manager Access for Michael Michaels"
          }
        }
      },
      "CertificationReference": {
        "description": "Previous certification.",
        "type": "object",
        "title": "Certification Reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/CertificationReferenceDto"
          },
          {
            "type": "object",
            "properties": {
              "reviewer": {
                "$ref": "#/components/schemas/Reviewer",
                "description": "Certification reviewer."
              }
            }
          }
        ]
      },
      "Reassignment": {
        "type": "object",
        "title": "Reassignment",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/CertificationReference"
          },
          "comment": {
            "type": "string",
            "description": "Comments from the previous reviewer.",
            "example": "Please review"
          }
        }
      },
      "CertificationDto": {
        "type": "object",
        "title": "Certification Dto",
        "required": [
          "campaignRef",
          "completed",
          "decisionsMade",
          "decisionsTotal",
          "due",
          "signed",
          "reviewer",
          "campaignOwner",
          "hasErrors",
          "phase",
          "entitiesCompleted",
          "entitiesTotal"
        ],
        "properties": {
          "campaignRef": {
            "$ref": "#/components/schemas/CampaignReference"
          },
          "phase": {
            "$ref": "#/components/schemas/CertificationPhase"
          },
          "due": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the certification is due.",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "signed": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the reviewer signed off on the certification.",
            "example": "2018-10-19T13:49:37.385Z"
          },
          "reviewer": {
            "$ref": "#/components/schemas/Reviewer",
            "description": "Reference to the reviewer for the campaign."
          },
          "reassignment": {
            "$ref": "#/components/schemas/Reassignment",
            "nullable": true,
            "description": "Reference to the reviewer whom this campaign has been reassigned to."
          },
          "hasErrors": {
            "type": "boolean",
            "example": false,
            "description": "Indicates whether the certification has any errors."
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "example": "The certification has an error",
            "description": "Message indicating what the error is."
          },
          "completed": {
            "type": "boolean",
            "description": "Indicates whether all certification decisions have been made.",
            "example": false
          },
          "decisionsMade": {
            "type": "integer",
            "description": "Number of approve/revoke/acknowledge decisions the reviewer has made.",
            "example": 20,
            "format": "int32"
          },
          "decisionsTotal": {
            "type": "integer",
            "description": "Total number of approve/revoke/acknowledge decisions for the certification.",
            "example": 40,
            "format": "int32"
          },
          "entitiesCompleted": {
            "type": "integer",
            "description": "Number of entities (identities, access profiles, roles, etc.) that are complete and all decisions have been made for.",
            "example": 5,
            "format": "int32"
          },
          "entitiesTotal": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of entities (identities, access profiles, roles, etc.) in the certification, both complete and incomplete.",
            "example": 10
          }
        }
      },
      "Argument": {
        "type": "object",
        "title": "Argument",
        "nullable": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the argument",
            "example": "firstName"
          },
          "description": {
            "type": "string",
            "description": "the description of the argument",
            "example": "the first name of the identity"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "description": "the programmatic type of the argument",
            "example": "String"
          }
        },
        "required": [
          "name"
        ]
      },
      "SourceCode": {
        "description": "SourceCode",
        "type": "object",
        "title": "Source Code",
        "required": [
          "version",
          "script"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "the version of the code",
            "example": "1.0"
          },
          "script": {
            "type": "string",
            "description": "The code",
            "example": "return \"Mr. \" + firstName;"
          }
        }
      },
      "ConnectorRuleCreateRequest": {
        "description": "ConnectorRuleCreateRequest",
        "type": "object",
        "title": "Connector Rule Create Request",
        "required": [
          "name",
          "type",
          "sourceCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the rule",
            "example": "WebServiceBeforeOperationRule",
            "minLength": 1,
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "description": "a description of the rule's purpose",
            "example": "This rule does that"
          },
          "type": {
            "type": "string",
            "enum": [
              "BuildMap",
              "ConnectorAfterCreate",
              "ConnectorAfterDelete",
              "ConnectorAfterModify",
              "ConnectorBeforeCreate",
              "ConnectorBeforeDelete",
              "ConnectorBeforeModify",
              "JDBCBuildMap",
              "JDBCOperationProvisioning",
              "JDBCProvision",
              "PeopleSoftHRMSBuildMap",
              "PeopleSoftHRMSOperationProvisioning",
              "PeopleSoftHRMSProvision",
              "RACFPermissionCustomization",
              "SAPBuildMap",
              "SapHrManagerRule",
              "SapHrOperationProvisioning",
              "SapHrProvision",
              "SuccessFactorsOperationProvisioning",
              "WebServiceAfterOperationRule",
              "WebServiceBeforeOperationRule",
              "ResourceObjectCustomization"
            ],
            "description": "the type of rule",
            "example": "BuildMap"
          },
          "signature": {
            "description": "The rule's function signature. Describes the rule's input arguments and output (if any)",
            "type": "object",
            "required": [
              "input"
            ],
            "properties": {
              "input": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Argument"
                }
              },
              "output": {
                "$ref": "#/components/schemas/Argument"
              }
            }
          },
          "sourceCode": {
            "$ref": "#/components/schemas/SourceCode"
          },
          "attributes": {
            "type": "object",
            "nullable": true,
            "description": "a map of string to objects",
            "example": {}
          }
        }
      },
      "ConnectorRuleResponse": {
        "description": "ConnectorRuleResponse",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorRuleCreateRequest"
          },
          {
            "type": "object",
            "nullable": true,
            "required": [
              "id",
              "created"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "the ID of the rule",
                "example": "8113d48c0b914f17b4c6072d4dcb9dfe"
              },
              "created": {
                "type": "string",
                "description": "an ISO 8601 UTC timestamp when this rule was created",
                "example": "021-07-22T15:59:23Z"
              },
              "modified": {
                "type": "string",
                "nullable": true,
                "description": "an ISO 8601 UTC timestamp when this rule was last modified",
                "example": "021-07-22T15:59:23Z"
              }
            }
          }
        ]
      },
      "ConnectorRuleUpdateRequest": {
        "description": "ConnectorRuleUpdateRequest",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "the ID of the rule to update",
                "example": "8113d48c0b914f17b4c6072d4dcb9dfe"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ConnectorRuleCreateRequest"
          }
        ]
      },
      "ConnectorRuleValidationResponse": {
        "description": "ConnectorRuleValidationResponse",
        "type": "object",
        "title": "Connector Rule Validation Response",
        "required": [
          "state",
          "details"
        ],
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "OK",
              "ERROR"
            ],
            "example": "ERROR"
          },
          "details": {
            "type": "array",
            "items": {
              "description": "CodeErrorDetail",
              "type": "object",
              "required": [
                "line",
                "column",
                "message"
              ],
              "properties": {
                "line": {
                  "type": "integer",
                  "description": "The line number where the issue occurred",
                  "example": 2
                },
                "column": {
                  "type": "integer",
                  "description": "the column number where the issue occurred",
                  "example": 5
                },
                "messsage": {
                  "type": "string",
                  "description": "a description of the issue in the code",
                  "example": "Remove reference to .decrypt("
                }
              }
            }
          }
        }
      },
      "V3ConnectorDto": {
        "type": "object",
        "title": "V 3 Connector Dto",
        "properties": {
          "name": {
            "type": "string",
            "description": "The connector name",
            "example": "name"
          },
          "type": {
            "type": "string",
            "description": "The connector type",
            "example": "ServiceNow"
          },
          "scriptName": {
            "type": "string",
            "description": "The connector script name",
            "example": "servicenow"
          },
          "className": {
            "type": "string",
            "description": "The connector class name.",
            "nullable": true,
            "example": "sailpoint.connector.OpenConnectorAdapter"
          },
          "features": {
            "type": "array",
            "description": "The list of features supported by the connector",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "PROVISIONING",
              "SYNC_PROVISIONING",
              "SEARCH",
              "UNSTRUCTURED_TARGETS"
            ]
          },
          "directConnect": {
            "type": "boolean",
            "description": "true if the source is a direct connect source",
            "example": true,
            "default": false
          },
          "connectorMetadata": {
            "type": "object",
            "description": "Object containing metadata pertinent to the UI to be used",
            "example": {
              "supportedUI": "EXTJS",
              "platform": "ccg",
              "shortDesc": "connector description"
            }
          },
          "status": {
            "type": "string",
            "description": "The connector status",
            "example": "RELEASED"
          }
        }
      },
      "CustomPasswordInstruction": {
        "type": "object",
        "title": "Custom Password Instruction",
        "properties": {
          "pageId": {
            "type": "string",
            "example": "change-password:enter-password",
            "description": "The page ID that represents the page for forget user name, reset password and unlock account flow.",
            "enum": [
              "change-password:enter-password",
              "change-password:finish",
              "flow-selection:select",
              "forget-username:user-email",
              "mfa:enter-code",
              "mfa:enter-kba",
              "mfa:select",
              "reset-password:enter-password",
              "reset-password:enter-username",
              "reset-password:finish",
              "unlock-account:enter-username",
              "unlock-account:finish"
            ]
          },
          "pageContent": {
            "type": "string",
            "example": "Please enter a new password. Your password must be at least 8 characters long and contain at least one number and one letter.",
            "description": "The custom instructions for the specified page. Allow basic HTML format and maximum length is 1000 characters. The custom instructions will be sanitized to avoid attacks.\nIf the customization text includes a link, like `<A HREF=\\\"URL\\\">...</A>` clicking on this will open the link on the current browser page.\nIf you want your link to be redirected to a different page, please redirect it to \"_blank\" like this: `<a href=\\\"URL\" target=\\\"_blank\\\" >link</a>`. This will open a new tab when the link is clicked. Notice we're only supporting _blank as the redirection target.\n"
          },
          "locale": {
            "type": "string",
            "example": "en",
            "description": "The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\"."
          }
        }
      },
      "EntitlementBulkUpdateRequest": {
        "type": "object",
        "title": "Entitlement Bulk Update Request",
        "description": "Object for specifying the bulk update request",
        "properties": {
          "entitlementIds": {
            "type": "array",
            "description": "List of entitlement ids to update",
            "maxItems": 50,
            "items": {
              "type": "string"
            },
            "example": [
              "2c91808a7624751a01762f19d665220d",
              "2c91808a7624751a01762f19d67c220e",
              "2c91808a7624751a01762f19d692220f"
            ]
          },
          "jsonPatch": {
            "type": "array",
            "description": "List of entitlement ids to update",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            },
            "example": [
              {
                "op": "replace",
                "path": "/privileged",
                "value": false
              },
              {
                "op": "replace",
                "path": "/requestable",
                "value": false
              }
            ]
          }
        },
        "required": [
          "entitlementIds",
          "jsonPatch"
        ]
      },
      "EntitlementApprovalScheme": {
        "type": "object",
        "title": "Entitlement Approval Scheme",
        "properties": {
          "approverType": {
            "type": "string",
            "enum": [
              "ENTITLEMENT_OWNER",
              "SOURCE_OWNER",
              "MANAGER",
              "GOVERNANCE_GROUP",
              "WORKFLOW"
            ],
            "description": "Describes the individual or group that is responsible for an approval step. Values are as follows.\n\n**ENTITLEMENT_OWNER**: Owner of the associated Entitlement\n\n**SOURCE_OWNER**: Owner of the associated Source\n\n**MANAGER**: Manager of the Identity for whom the request is being made\n\n**GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field\n\n**WORKFLOW**: A Workflow, the ID of which is specified by the **approverId** field, Workflows are exclusive to other types of approvals and License required.     ",
            "example": "GOVERNANCE_GROUP"
          },
          "approverId": {
            "type": "string",
            "nullable": true,
            "description": "Id of the specific approver, used only when approverType is GOVERNANCE_GROUP or WORKFLOW",
            "example": "e3eab852-8315-467f-9de7-70eda97f63c8"
          }
        }
      },
      "EntitlementAccessRequestConfig": {
        "type": "object",
        "title": "Entitlement Access Request Config",
        "properties": {
          "approvalSchemes": {
            "type": "array",
            "description": "Ordered list of approval steps for the access request. Empty when no approval is required.",
            "items": {
              "$ref": "#/components/schemas/EntitlementApprovalScheme"
            }
          },
          "requestCommentRequired": {
            "type": "boolean",
            "description": "If the requester must provide a comment during access request.",
            "default": false,
            "example": true
          },
          "denialCommentRequired": {
            "type": "boolean",
            "description": "If the reviewer must provide a comment when denying the access request.",
            "default": false,
            "example": false
          },
          "reauthorizationRequired": {
            "type": "boolean",
            "description": "Is Reauthorization Required",
            "default": false,
            "example": false
          }
        }
      },
      "EntitlementRevocationRequestConfig": {
        "type": "object",
        "title": "Entitlement Revocation Request Config",
        "properties": {
          "approvalSchemes": {
            "type": "array",
            "description": "Ordered list of approval steps for the access request. Empty when no approval is required.",
            "items": {
              "$ref": "#/components/schemas/EntitlementApprovalScheme"
            }
          }
        }
      },
      "EntitlementRequestConfig-2": {
        "type": "object",
        "title": "Entitlement Request Config",
        "properties": {
          "accessRequestConfig": {
            "$ref": "#/components/schemas/EntitlementAccessRequestConfig"
          },
          "revocationRequestConfig": {
            "$ref": "#/components/schemas/EntitlementRevocationRequestConfig"
          }
        }
      },
      "EntitlementSourceResetBaseReferenceDto": {
        "type": "object",
        "title": "Entitlement Source Reset Base Reference Dto",
        "properties": {
          "type": {
            "type": "string",
            "description": "The DTO type",
            "example": "TASK_RESULT"
          },
          "id": {
            "type": "string",
            "description": "The task ID of the object to which this reference applies",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the object to which this reference applies",
            "example": "Entitlement Source Reset"
          }
        }
      },
      "LoadEntitlementTask": {
        "type": "object",
        "title": "Load Entitlement Task",
        "properties": {
          "id": {
            "description": "System-generated unique ID of the task this taskStatus represents",
            "type": "string",
            "example": "ef38f94347e94562b5bb8424a56397d8"
          },
          "type": {
            "description": "Type of task this task represents",
            "type": "string",
            "example": "QUARTZ"
          },
          "uniqueName": {
            "description": "The name of the task",
            "type": "string",
            "example": "Cloud Group Aggregation"
          },
          "description": {
            "description": "The description of the task",
            "type": "string",
            "example": "Aggregate from the specified application"
          },
          "launcher": {
            "description": "The user who initiated the task",
            "type": "string",
            "example": "John Doe"
          },
          "created": {
            "description": "The creation date of the task",
            "type": "string",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "returns": {
            "description": "Return values from the task",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "displayLabel": {
                  "description": "The display label for the return value",
                  "type": "string",
                  "example": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_APPLICATIONS"
                },
                "attributeName": {
                  "description": "The attribute name for the return value",
                  "type": "string",
                  "example": "applications"
                }
              }
            },
            "example": [
              {
                "displayLabel": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_APPLICATIONS",
                "attributeName": "applications"
              },
              {
                "displayLabel": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_TOTAL",
                "attributeName": "total"
              },
              {
                "displayLabel": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_CREATED",
                "attributeName": "groupsCreated"
              },
              {
                "displayLabel": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_UPDATED",
                "attributeName": "groupsUpdated"
              },
              {
                "displayLabel": "TASK_OUT_ACCOUNT_GROUP_AGGREGATION_DELETED",
                "attributeName": "groupsDeleted"
              }
            ]
          }
        }
      },
      "PasswordDigitTokenReset": {
        "type": "object",
        "title": "Password Digit Token Reset",
        "required": [
          "userId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "The uid of the user requested for digit token",
            "example": "Abby.Smith"
          },
          "length": {
            "type": "integer",
            "description": "The length of digit token. It should be from 6 to 18, inclusive. The default value is 6.",
            "example": 8
          },
          "durationMinutes": {
            "type": "integer",
            "description": "The time to live for the digit token in minutes. The default value is 5 minutes.",
            "example": 5
          }
        }
      },
      "PasswordDigitToken": {
        "type": "object",
        "title": "Password Digit Token",
        "properties": {
          "digitToken": {
            "type": "string",
            "description": "The digit token for password management",
            "example": 9087713
          },
          "requestId": {
            "type": "string",
            "description": "The reference ID of the digit token generation request",
            "example": "e1267ecd-fcd9-4c73-9c55-12555efad136"
          }
        }
      },
      "IdentityListItem": {
        "type": "object",
        "title": "Identity List Item",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identity ID",
            "example": "bc693f07e7b645539626c25954c58554"
          },
          "displayName": {
            "type": "string",
            "description": "the display name of the identity",
            "example": "Adam Zampa"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "description": "the first name of the identity",
            "example": "Adam"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "description": "the last name of the identity",
            "example": "Zampa"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "indicates if an identity is active or not",
            "example": true
          },
          "deletedDate": {
            "type": "string",
            "nullable": true,
            "description": "the date when the identity was deleted",
            "example": "2007-03-01T13:00:00.000Z"
          }
        }
      },
      "IdentityHistoryResponse": {
        "type": "object",
        "title": "Identity History Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identity ID",
            "example": "bc693f07e7b645539626c25954c58554"
          },
          "displayName": {
            "type": "string",
            "description": "the display name of the identity",
            "example": "Adam Zampa"
          },
          "snapshot": {
            "type": "string",
            "description": "the date when the identity record was created",
            "example": "2007-03-01T13:00:00.000Z"
          },
          "deletedDate": {
            "type": "string",
            "description": "the date when the identity was deleted",
            "example": "2007-03-01T13:00:00.000Z"
          },
          "accessItemCount": {
            "type": "object",
            "description": "A map containing the count of each access item",
            "example": {
              "app": 0,
              "role": 2,
              "entitlement": 4,
              "accessProfile": 3,
              "account": 1
            },
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "attributes": {
            "type": "object",
            "description": "A map containing the identity attributes",
            "additionalProperties": true,
            "example": {
              "jobTitle": "HR Manager",
              "location": "NYC",
              "firstname": "Adam",
              "lastname": "Zampa",
              "department": "HR"
            }
          }
        }
      },
      "AccessItemEntitlementResponse": {
        "type": "object",
        "title": "Access Item Entitlement Response",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the access item id"
          },
          "accessType": {
            "type": "string",
            "example": "entitlement",
            "description": "the access item type. entitlement in this case"
          },
          "displayName": {
            "type": "string",
            "example": "Dr. Arden Rogahn MD",
            "description": "the display name of the identity"
          },
          "sourceName": {
            "type": "string",
            "example": "DataScienceDataset",
            "description": "the name of the source"
          },
          "attribute": {
            "type": "string",
            "example": "groups",
            "description": "the entitlement attribute"
          },
          "value": {
            "type": "string",
            "example": "Upward mobility access",
            "description": "the associated value"
          },
          "type": {
            "type": "string",
            "example": "ENTITLEMENT",
            "description": "the type of entitlement"
          },
          "description": {
            "type": "string",
            "example": "Entitlement - Workday/Citizenship access",
            "description": "the description for the entitlment",
            "nullable": true
          },
          "sourceId": {
            "type": "string",
            "example": "2793o32dwd",
            "description": "the id of the source"
          },
          "standalone": {
            "type": "boolean",
            "example": true,
            "description": "indicates whether the entitlement is standalone",
            "nullable": true
          },
          "privileged": {
            "type": "boolean",
            "example": false,
            "description": "indicates whether the entitlement is privileged",
            "nullable": true
          },
          "cloudGoverned": {
            "type": "boolean",
            "example": true,
            "description": "indicates whether the entitlement is cloud governed",
            "nullable": true
          }
        },
        "required": [
          "attribute",
          "value",
          "type",
          "standalone",
          "privileged",
          "cloudGoverned"
        ]
      },
      "AccessItemAccessProfileResponse": {
        "type": "object",
        "title": "Access Item Access Profile Response",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the access item id"
          },
          "accessType": {
            "type": "string",
            "example": "accessProfile",
            "description": "the access item type. accessProfile in this case"
          },
          "displayName": {
            "type": "string",
            "example": "Dr. Arden Rogahn MD",
            "description": "the display name of the identity"
          },
          "sourceName": {
            "type": "string",
            "example": "DataScienceDataset",
            "description": "the name of the source"
          },
          "entitlementCount": {
            "type": "integer",
            "format": "int32",
            "example": 12,
            "description": "the number of entitlements the access profile will create"
          },
          "description": {
            "type": "string",
            "example": "AccessProfile - Workday/Citizenship access",
            "description": "the description for the access profile",
            "nullable": true
          },
          "sourceId": {
            "type": "string",
            "example": "2793o32dwd",
            "description": "the id of the source"
          },
          "appRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cloudAppId": {
                  "type": "string",
                  "example": "8c190e6787aa4ed9a90bd9d5344523fb",
                  "description": "the cloud app id associated with the access profile"
                },
                "cloudAppName": {
                  "type": "string",
                  "example": "Sample App",
                  "description": "the cloud app name associated with the access profile"
                }
              }
            },
            "example": [
              {
                "cloudAppId": "8c190e6787aa4ed9a90bd9d5344523fb",
                "cloudAppName": "Sample App"
              },
              {
                "cloudAppId": "2c91808a77ff216301782327a50f09bf",
                "cloudAppName": "Another App"
              }
            ],
            "description": "the list of app ids associated with the access profile"
          },
          "removeDate": {
            "type": "string",
            "example": "2024-07-01T06:00:00.00Z",
            "description": "the date the access profile is no longer assigned to the specified identity",
            "nullable": true
          },
          "standalone": {
            "type": "boolean",
            "example": false,
            "description": "indicates whether the access profile is standalone",
            "nullable": true
          },
          "revocable": {
            "type": "boolean",
            "example": true,
            "description": "indicates whether the access profile is revocable",
            "nullable": true
          }
        },
        "required": [
          "appRefs",
          "standalone",
          "revocable",
          "entitlementCount"
        ]
      },
      "AccessItemAccountResponse": {
        "type": "object",
        "title": "Access Item Account Response",
        "required": [
          "nativeIdentity"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the access item id"
          },
          "accessType": {
            "type": "string",
            "example": "account",
            "description": "the access item type. account in this case"
          },
          "displayName": {
            "type": "string",
            "example": "Dr. Arden Rogahn MD",
            "description": "the display name of the identity"
          },
          "sourceName": {
            "type": "string",
            "example": "DataScienceDataset",
            "description": "the name of the source"
          },
          "nativeIdentity": {
            "type": "string",
            "example": "dr.arden.ogahn.d",
            "description": "the native identifier used to uniquely identify an acccount"
          },
          "sourceId": {
            "type": "string",
            "example": "2793o32dwd",
            "description": "the id of the source"
          },
          "entitlementCount": {
            "type": "integer",
            "format": "int32",
            "example": 12,
            "description": "the number of entitlements the account will create"
          }
        }
      },
      "AccessItemRoleResponse": {
        "type": "object",
        "title": "Access Item Role Response",
        "properties": {
          "id": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the access item id"
          },
          "accessType": {
            "type": "string",
            "example": "role",
            "description": "the access item type. role in this case"
          },
          "displayName": {
            "type": "string",
            "example": "sample",
            "description": "the role display name"
          },
          "sourceName": {
            "type": "string",
            "example": "Source Name",
            "description": "the associated source name if it exists",
            "nullable": true
          },
          "description": {
            "type": "string",
            "example": "Role - Workday/Citizenship access",
            "description": "the description for the role"
          },
          "removeDate": {
            "type": "string",
            "example": "2024-07-01T06:00:00.00Z",
            "description": "the date the role is no longer assigned to the specified identity"
          },
          "revocable": {
            "type": "boolean",
            "example": true,
            "description": "indicates whether the role is revocable"
          }
        },
        "required": [
          "revocable"
        ]
      },
      "AccessItemAppResponse": {
        "type": "object",
        "title": "Access Item App Response",
        "required": [
          "appRoleId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the access item id"
          },
          "accessType": {
            "type": "string",
            "example": "app",
            "description": "the access item type. entitlement in this case"
          },
          "displayName": {
            "type": "string",
            "example": "Display Name",
            "description": "the access item display name"
          },
          "sourceName": {
            "type": "string",
            "example": "appName",
            "description": "the associated source name if it exists",
            "nullable": true
          },
          "appRoleId": {
            "type": "string",
            "example": "2c918087763e69d901763e72e97f006f",
            "description": "the app role id",
            "nullable": true
          }
        }
      },
      "IdentitySnapshotSummaryResponse": {
        "type": "object",
        "title": "Identity Snapshot Summary Response",
        "properties": {
          "snapshot": {
            "type": "string",
            "description": "the date when the identity record was created",
            "example": "2007-03-01T13:00:00.000Z"
          }
        }
      },
      "MetricResponse": {
        "type": "object",
        "title": "Metric Response",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of metric"
          },
          "value": {
            "type": "number",
            "description": "the value associated to the metric"
          }
        },
        "example": {
          "name": "2021-04-01T00:00:00.000Z",
          "value": 2
        }
      },
      "CommonAccessType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE",
          "ROLE"
        ],
        "description": "The type of access item."
      },
      "CommonAccessItemAccess": {
        "type": "object",
        "title": "Common Access Item Access",
        "properties": {
          "id": {
            "type": "string",
            "description": "Common access ID"
          },
          "type": {
            "$ref": "#/components/schemas/CommonAccessType",
            "description": "Common access type (ROLE or ACCESS_PROFILE)"
          },
          "name": {
            "type": "string",
            "description": "Common access name"
          },
          "description": {
            "type": "string",
            "description": "Common access description",
            "nullable": true
          },
          "ownerName": {
            "type": "string",
            "description": "Common access owner name"
          },
          "ownerId": {
            "type": "string",
            "description": "Common access owner ID"
          }
        }
      },
      "CommonAccessResponse": {
        "type": "object",
        "title": "Common Access Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the common access item",
            "example": "555ab47a-0d32-4813-906f-adf3567de6a4"
          },
          "access": {
            "$ref": "#/components/schemas/CommonAccessItemAccess",
            "description": "common access item"
          },
          "status": {
            "type": "string",
            "description": "CONFIRMED or DENIED"
          },
          "commonAccessType": {
            "type": "string",
            "example": "UNSET"
          },
          "lastUpdated": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "reviewedByUser": {
            "type": "boolean",
            "description": "true if user has confirmed or denied status"
          },
          "lastReviewed": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "nullable": true
          },
          "createdByUser": {
            "type": "boolean",
            "default": false,
            "example": false
          }
        }
      },
      "CommonAccessItemState": {
        "type": "string",
        "enum": [
          "CONFIRMED",
          "DENIED"
        ],
        "description": "State of common access item."
      },
      "CommonAccessItemRequest": {
        "type": "object",
        "title": "Common Access Item Request",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/CommonAccessItemAccess"
          },
          "status": {
            "$ref": "#/components/schemas/CommonAccessItemState"
          }
        }
      },
      "CommonAccessItemResponse": {
        "type": "object",
        "title": "Common Access Item Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "Common Access Item ID"
          },
          "access": {
            "$ref": "#/components/schemas/CommonAccessItemAccess"
          },
          "status": {
            "$ref": "#/components/schemas/CommonAccessItemState"
          },
          "lastUpdated": {
            "type": "string"
          },
          "reviewedByUser": {
            "type": "boolean"
          },
          "lastReviewed": {
            "type": "string"
          },
          "createdByUser": {
            "type": "string"
          }
        }
      },
      "CommonAccessIDStatus": {
        "type": "object",
        "title": "Common Access ID Status",
        "properties": {
          "confirmedIds": {
            "description": "List of confirmed common access ids.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "deniedIds": {
            "description": "List of denied common access ids.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "CertifierResponse": {
        "type": "object",
        "title": "Certifier Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "the id of the certifier",
            "example": "8a80828f643d484f01643e14202e206f"
          },
          "displayName": {
            "type": "string",
            "description": "the name of the certifier",
            "example": "John Snow"
          }
        }
      },
      "IdentityCertified": {
        "type": "object",
        "title": "Identity Certified",
        "required": [
          "certificationId",
          "certificationName"
        ],
        "properties": {
          "certificationId": {
            "type": "string",
            "description": "the id of the certification item",
            "example": "2c91808a77ff216301782327a50f09bf"
          },
          "certificationName": {
            "type": "string",
            "description": "the certification item name",
            "example": "Cert name"
          },
          "signedDate": {
            "type": "string",
            "description": "the date ceritification was signed",
            "example": "2019-03-08T22:37:33.901Z"
          },
          "certifiers": {
            "type": "array",
            "description": "this field is deprecated and may go away",
            "items": {
              "$ref": "#/components/schemas/CertifierResponse"
            },
            "example": [
              {
                "id": "8a80828f643d484f01643e14202e206f",
                "displayName": "John Snow"
              }
            ]
          },
          "reviewers": {
            "type": "array",
            "description": "The list of identities who review this certification",
            "items": {
              "$ref": "#/components/schemas/CertifierResponse"
            },
            "example": [
              {
                "id": "8a80828f643d484f01643e14202e206f",
                "displayName": "John Snow"
              }
            ]
          },
          "signer": {
            "$ref": "#/components/schemas/CertifierResponse",
            "description": "Identity who signed off on the certification",
            "example": {
              "id": "8a80828f643d484f01643e14202e206f",
              "displayName": "John Snow"
            }
          },
          "eventType": {
            "type": "string",
            "description": "the event type",
            "example": "IdentityCertified"
          },
          "dateTime": {
            "type": "string",
            "description": "the date of event",
            "example": "2019-03-08T22:37:33.901Z"
          }
        }
      },
      "CorrelatedGovernanceEvent": {
        "type": "object",
        "title": "Correlated Governance Event",
        "nullable": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the governance event, such as the certification name or access request ID.",
            "example": "Manager Certification for Jon Snow"
          },
          "dateTime": {
            "type": "string",
            "description": "The date that the certification or access request was completed.",
            "example": "2019-03-08T22:37:33.901Z"
          },
          "type": {
            "type": "string",
            "enum": [
              "certification",
              "accessRequest"
            ],
            "description": "The type of governance event.",
            "example": "certification"
          },
          "governanceId": {
            "type": "string",
            "description": "The ID of the instance that caused the event - either the certification ID or access request ID.",
            "example": "2c91808a77ff216301782327a50f09bf"
          },
          "owners": {
            "type": "array",
            "description": "The owners of the governance event (the certifiers or approvers)",
            "items": {
              "$ref": "#/components/schemas/CertifierResponse"
            },
            "example": [
              {
                "id": "8a80828f643d484f01643e14202e206f",
                "displayName": "John Snow"
              }
            ]
          },
          "reviewers": {
            "type": "array",
            "description": "The owners of the governance event (the certifiers or approvers), this field should be preferred over owners",
            "items": {
              "$ref": "#/components/schemas/CertifierResponse"
            },
            "example": [
              {
                "id": "8a80828f643d484f01643e14202e206f",
                "displayName": "John Snow"
              }
            ]
          },
          "decisionMaker": {
            "description": "The decision maker",
            "$ref": "#/components/schemas/CertifierResponse",
            "example": {
              "id": "8a80828f643d484f01643e14202e206f",
              "displayName": "John Snow"
            }
          }
        }
      },
      "AccessItemAssociated": {
        "type": "object",
        "title": "Access Item Associated",
        "required": [
          "accessItem",
          "governanceEvent"
        ],
        "properties": {
          "eventType": {
            "type": "string",
            "description": "the event type",
            "example": "AccessItemAssociated"
          },
          "dateTime": {
            "type": "string",
            "description": "the date of event",
            "example": "2019-03-08T22:37:33.901Z"
          },
          "identityId": {
            "type": "string",
            "description": "the identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          "accessItem": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AccessItemEntitlementResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAccessProfileResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAccountResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemRoleResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAppResponse"
              }
            ],
            "example": {
              "id": "8c190e6787aa4ed9a90bd9d5344523fb",
              "accessType": "account",
              "nativeIdentity": 127999,
              "sourceName": "JDBC Entitlements Source",
              "entitlementCount": 0,
              "displayName": "Sample Name"
            }
          },
          "governanceEvent": {
            "$ref": "#/components/schemas/CorrelatedGovernanceEvent",
            "example": {
              "name": "Manager Certification for Jon Snow",
              "dateTime": "2019-03-08T22:37:33.901Z",
              "type": "certification",
              "governanceId": "2c91808a77ff216301782327a50f09bf",
              "owners": [
                {
                  "id": "bc693f07e7b645539626c25954c58554",
                  "displayName": "Jon Snow"
                }
              ],
              "reviewers": [
                {
                  "id": "bc693f07e7b645539626c25954c58554",
                  "displayName": "Jon Snow"
                }
              ],
              "decisionMaker": {
                "id": "bc693f07e7b645539626c25954c58554",
                "displayName": "Jon Snow"
              }
            }
          },
          "accessItemType": {
            "type": "string",
            "enum": [
              "account",
              "app",
              "entitlement",
              "role",
              "accessProfile"
            ],
            "description": "the access item type",
            "example": "account"
          }
        }
      },
      "AccessItemRemoved": {
        "type": "object",
        "title": "Access Item Removed",
        "required": [
          "accessItem"
        ],
        "properties": {
          "accessItem": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AccessItemEntitlementResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAccessProfileResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAccountResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemRoleResponse"
              },
              {
                "$ref": "#/components/schemas/AccessItemAppResponse"
              }
            ],
            "example": {
              "id": "8c190e6787aa4ed9a90bd9d5344523fb",
              "accessType": "account",
              "nativeIdentity": 127999,
              "sourceName": "JDBC Entitlements Source",
              "entitlementCount": 0,
              "displayName": "Sample Name"
            }
          },
          "identityId": {
            "type": "string",
            "description": "the identity id",
            "example": "8c190e6787aa4ed9a90bd9d5344523fb"
          },
          "eventType": {
            "type": "string",
            "description": "the event type",
            "example": "AccessItemRemoved"
          },
          "dateTime": {
            "type": "string",
            "description": "the date of event",
            "example": "2019-03-08T22:37:33.901Z"
          },
          "accessItemType": {
            "type": "string",
            "enum": [
              "account",
              "app",
              "entitlement",
              "role",
              "accessProfile"
            ],
            "description": "the access item type",
            "example": "account"
          },
          "governanceEvent": {
            "$ref": "#/components/schemas/CorrelatedGovernanceEvent",
            "example": {
              "name": "Manager Certification for Jon Snow",
              "dt": "2019-03-08T22:37:33.901Z",
              "type": "certification",
              "governanceId": "2c91808a77ff216301782327a50f09bf",
              "owners": [
                {
                  "id": "bc693f07e7b645539626c25954c58554",
                  "displayName": "Jon Snow"
                }
              ],
              "reviewers": [
                {
                  "id": "bc693f07e7b645539626c25954c58554",
                  "displayName": "Jon Snow"
                }
              ],
              "decisionMaker": {
                "id": "bc693f07e7b645539626c25954c58554",
                "displayName": "Jon Snow"
              }
            }
          }
        }
      },
      "AttributeChange": {
        "type": "object",
        "title": "Attribute Change",
        "properties": {
          "name": {
            "type": "string",
            "description": "the attribute name",
            "example": "firstname"
          },
          "previousValue": {
            "type": "string",
            "description": "the old value of attribute",
            "example": "adam"
          },
          "newValue": {
            "type": "string",
            "description": "the new value of attribute",
            "example": "zampa"
          }
        }
      },
      "AttributesChanged": {
        "type": "object",
        "title": "Attributes Changed",
        "required": [
          "attributeChanges"
        ],
        "properties": {
          "attributeChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeChange"
            }
          },
          "eventType": {
            "type": "string",
            "description": "the event type",
            "example": "AttributesChanged"
          },
          "identityId": {
            "type": "string",
            "description": "the identity id",
            "example": "8a80828f643d484f01643e14202e206f"
          },
          "dateTime": {
            "type": "string",
            "description": "the date of event",
            "example": "2019-03-08T22:37:33.901Z"
          }
        }
      },
      "ApprovalInfoResponse": {
        "type": "object",
        "title": "Approval Info Response",
        "properties": {
          "id": {
            "type": "string",
            "example": "8a80828f643d484f01643e14202e2000",
            "description": "the id of approver"
          },
          "name": {
            "type": "string",
            "example": "John Snow",
            "description": "the name of approver"
          },
          "status": {
            "type": "string",
            "example": "Approved",
            "description": "the status of the approval request"
          }
        }
      },
      "AccessRequestItemResponse": {
        "type": "object",
        "title": "Access Request Item Response",
        "properties": {
          "operation": {
            "type": "string",
            "example": "Add",
            "description": "the access request item operation"
          },
          "accessItemType": {
            "type": "string",
            "example": "role",
            "description": "the access item type"
          },
          "name": {
            "type": "string",
            "example": "Role-1",
            "description": "the name of access request item"
          },
          "decision": {
            "type": "string",
            "example": "APPROVED",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "description": "the final decision for the access request"
          },
          "description": {
            "type": "string",
            "example": "The role descrition",
            "description": "the description of access request item"
          },
          "sourceId": {
            "type": "string",
            "example": "8a80828f643d484f01643e14202e206f",
            "description": "the source id"
          },
          "sourceName": {
            "type": "string",
            "example": "Source1",
            "description": "the source Name"
          },
          "approvalInfos": {
            "type": "array",
            "example": [
              {
                "name": "John Snow",
                "id": "8a80828f643d484f01643e14202e2000",
                "status": "Approved"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ApprovalInfoResponse"
            }
          }
        }
      },
      "AccessRequestResponse-2": {
        "type": "object",
        "title": "Access Request Response",
        "properties": {
          "requesterId": {
            "type": "string",
            "example": "2c91808a77ff216301782327a50f09bf",
            "description": "the requester Id"
          },
          "requesterName": {
            "type": "string",
            "example": "Bing C",
            "description": "the requesterName"
          },
          "items": {
            "type": "array",
            "example": [
              {
                "operation": "Add",
                "accessItemType": "role",
                "name": "Role-1",
                "decision": "APPROVED",
                "description": "The role descrition",
                "sourceId": "8a80828f643d484f01643e14202e206f",
                "sourceName": "Source1",
                "approvalInfos": [
                  {
                    "name": "John Snow",
                    "id": "8a80828f643d484f01643e14202e2000",
                    "status": "Approved"
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccessRequestItemResponse"
            }
          }
        }
      },
      "AccessRequested": {
        "type": "object",
        "title": "Access Requested",
        "required": [
          "accessRequest"
        ],
        "properties": {
          "accessRequest": {
            "$ref": "#/components/schemas/AccessRequestResponse-2",
            "description": "the access request details"
          },
          "identityId": {
            "type": "string",
            "example": "8a80828f643d484f01643e14202e206f",
            "description": "the identity id"
          },
          "eventType": {
            "type": "string",
            "example": "AccessRequested",
            "description": "the event type"
          },
          "dateTime": {
            "type": "string",
            "example": "2019-03-08T22:37:33.901Z",
            "description": "the date of event"
          }
        }
      },
      "AccountStatusChanged": {
        "type": "object",
        "title": "Account Status Changed",
        "required": [
          "account",
          "statusChange"
        ],
        "properties": {
          "eventType": {
            "type": "string",
            "example": "AccountStatusChanged",
            "description": "the event type"
          },
          "identityId": {
            "type": "string",
            "description": "the identity id",
            "example": "8a80828f643d484f01643e14202e206f"
          },
          "dateTime": {
            "type": "string",
            "description": "the date of event",
            "example": "2019-03-08T22:37:33.901Z"
          },
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "the ID of the account in the database",
                "example": "2c91808a77ff216301782327a50f09bf"
              },
              "nativeIdentity": {
                "type": "string",
                "description": "the native identifier of the account",
                "example": "dr.arden.ogahn.d"
              },
              "displayName": {
                "type": "string",
                "description": "the display name of the account",
                "example": "Adam Archer"
              },
              "sourceId": {
                "type": "string",
                "description": "the ID of the source for this account",
                "example": "8a80828f643d484f01643e14202e206f"
              },
              "sourceName": {
                "type": "string",
                "description": "the name of the source for this account",
                "example": "JDBC Entitlements Source"
              },
              "entitlementCount": {
                "type": "integer",
                "format": "int32",
                "description": "the number of entitlements on this account",
                "example": 2
              },
              "accessType": {
                "type": "string",
                "description": "this value is always \"account\"",
                "example": "account"
              }
            }
          },
          "statusChange": {
            "type": "object",
            "properties": {
              "previousStatus": {
                "type": "string",
                "description": "the previous status of the account",
                "enum": [
                  "enabled",
                  "disabled",
                  "locked"
                ],
                "example": "enabled"
              },
              "newStatus": {
                "type": "string",
                "description": "the new status of the account",
                "enum": [
                  "enabled",
                  "disabled",
                  "locked"
                ],
                "example": "disabled"
              }
            }
          }
        }
      },
      "IdentityCompareResponse": {
        "type": "object",
        "title": "Identity Compare Response",
        "properties": {
          "accessItemDiff": {
            "type": "object",
            "description": "Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "example": {
          "accessItemDiff": {
            "role": {
              "accessAdded": 2,
              "accessRemoved": 3
            },
            "entitlement": {
              "accessAdded": 4,
              "accessRemoved": 0
            },
            "accessProfile": {
              "accessAdded": 0,
              "accessRemoved": 1
            }
          }
        }
      },
      "AccessItemDiff": {
        "type": "object",
        "title": "Access Item Diff",
        "properties": {
          "id": {
            "type": "string",
            "description": "the id of the access item"
          },
          "eventType": {
            "type": "string",
            "enum": [
              "ADD",
              "REMOVE"
            ]
          },
          "displayName": {
            "type": "string",
            "description": "the display name of the access item"
          },
          "sourceName": {
            "type": "string",
            "description": "the source name of the access item"
          }
        },
        "example": {
          "id": "2c91808c7726345b017726a0a2fb013b",
          "eventType": "ADD",
          "displayName": "Test",
          "sourceName": "Source"
        }
      },
      "IdentitySyncPayload": {
        "type": "object",
        "title": "Identity Sync Payload",
        "properties": {
          "type": {
            "type": "string",
            "description": "Payload type.",
            "example": "SYNCHRONIZE_IDENTITY_ATTRIBUTES"
          },
          "dataJson": {
            "type": "string",
            "description": "Payload type.",
            "example": "{\"identityId\":\"2c918083746f642c01746f990884012a\"}"
          }
        },
        "required": [
          "type",
          "dataJson"
        ]
      },
      "IdentitySyncJob": {
        "type": "object",
        "title": "Identity Sync Job",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "status": {
            "type": "string",
            "description": "The job status.",
            "enum": [
              "QUEUED",
              "IN_PROGRESS",
              "SUCCESS",
              "ERROR"
            ],
            "example": "IN_PROGRESS"
          },
          "payload": {
            "description": "Job payload.",
            "$ref": "#/components/schemas/IdentitySyncPayload",
            "example": {
              "type": "SYNCHRONIZE_IDENTITY_ATTRIBUTES",
              "dataJson": "{\"identityId\":\"2c918083746f642c01746f990884012a\"}"
            }
          }
        },
        "required": [
          "id",
          "status",
          "payload"
        ]
      },
      "IdentityEntities": {
        "type": "object",
        "title": "Identity Entities",
        "properties": {
          "identityEntity": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id of the resource to which the identity is associated",
                "example": "031034e97f094a4096c1be53f75f6b91"
              },
              "name": {
                "type": "string",
                "description": "name of the resource to which the identity is associated",
                "example": "Gaston.800ddf9640a"
              },
              "type": {
                "type": "string",
                "description": "type of the resource to which the identity is associated",
                "example": "CAMPAIGN_CAMPAIGNER"
              }
            }
          }
        }
      },
      "IdentityOwnershipAssociationDetails": {
        "type": "object",
        "title": "Identity Ownership Association Details",
        "properties": {
          "associationDetails": {
            "type": "array",
            "description": "list of all the resource associations for the identity",
            "items": {
              "type": "object",
              "properties": {
                "associationType": {
                  "type": "string",
                  "description": "association type with the identity",
                  "example": "ROLE_OWNER"
                },
                "entities": {
                  "type": "array",
                  "description": "the specific resource this identity has ownership on",
                  "items": {
                    "$ref": "#/components/schemas/IdentityEntities"
                  },
                  "example": {
                    "id": "b660a232f05b4e04812ca974b3011e0f",
                    "name": "Gaston.800ddf9640a",
                    "type": "ROLE"
                  }
                }
              }
            }
          }
        }
      },
      "LifecycleStateDto": {
        "type": "object",
        "title": "Lifecycle State Dto",
        "properties": {
          "stateName": {
            "type": "string",
            "description": "The name of the lifecycle state",
            "example": "active"
          },
          "manuallyUpdated": {
            "type": "boolean",
            "description": "Whether the lifecycle state has been manually or automatically set",
            "example": true
          }
        },
        "required": [
          "stateName",
          "manuallyUpdated"
        ]
      },
      "Identity": {
        "type": "object",
        "title": "IdentityDto",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "System-generated unique ID of the identity",
            "type": "string",
            "example": "01f04e428c484542a241dc89c303b178",
            "readOnly": true
          },
          "name": {
            "description": "The identity's name is equivalent to its Display Name attribute.",
            "type": "string",
            "example": "Walter White"
          },
          "created": {
            "description": "Creation date of the identity",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-01-03T21:16:22.432Z"
          },
          "modified": {
            "description": "Last modification date of the identity",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-01-03T21:16:22.432Z"
          },
          "alias": {
            "type": "string",
            "description": "The identity's alternate unique identifier is equivalent to its Account Name on the authoritative source account schema.",
            "example": "walter.white"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the identity",
            "example": "walter.white@example.com",
            "nullable": true
          },
          "processingState": {
            "type": "string",
            "nullable": true,
            "description": "The processing state of the identity",
            "enum": [
              "ERROR",
              "OK",
              null
            ],
            "example": "ERROR"
          },
          "identityStatus": {
            "type": "string",
            "description": "The identity's status in the system",
            "enum": [
              "UNREGISTERED",
              "REGISTERED",
              "PENDING",
              "WARNING",
              "DISABLED",
              "ACTIVE",
              "DEACTIVATED",
              "TERMINATED",
              "ERROR",
              "LOCKED"
            ],
            "example": "LOCKED"
          },
          "managerRef": {
            "type": "object",
            "description": "Identity's manager",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of identity's manager",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of identity's manager",
                "example": "2c4180a46faadee4016fb4e018c20626"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of identity's manager",
                "example": "Robert Robinson"
              }
            }
          },
          "isManager": {
            "type": "boolean",
            "description": "Whether this identity is a manager of another identity",
            "default": false,
            "example": true
          },
          "lastRefresh": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the identity was refreshed by the system",
            "example": "2020-11-22T15:42:31.123Z"
          },
          "attributes": {
            "type": "object",
            "description": "A map with the identity attributes for the identity",
            "example": {
              "uid": "86754",
              "firstname": "Walter",
              "cloudStatus": "UNREGISTERED",
              "displayName": "Walter White",
              "identificationNumber": "86754",
              "lastSyncDate": 1470348809380,
              "email": "walter.white@example.com",
              "lastname": "White"
            }
          },
          "lifecycleState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LifecycleStateDto"
              },
              {
                "nullable": true,
                "description": "Lifecycle state details that include lifecycle state name and whether this lifecycle state has been set manually"
              }
            ]
          }
        }
      },
      "IdentityAssociationDetails": {
        "type": "object",
        "title": "Identity Association Details",
        "properties": {
          "message": {
            "type": "string",
            "description": "any additional context information of the http call result",
            "example": "Identity cannot be deleted as it is owner of following resources"
          },
          "associationDetails": {
            "type": "array",
            "description": "list of all the resource associations for the identity",
            "items": {
              "type": "object",
              "properties": {
                "associationType": {
                  "type": "string",
                  "description": "association type with the identity",
                  "example": "CAMPAIGN_OWNER"
                },
                "entities": {
                  "type": "array",
                  "description": "the specific resource this identity has ownership on",
                  "items": {
                    "$ref": "#/components/schemas/IdentityEntities"
                  },
                  "example": {
                    "id": "b660a232f05b4e04812ca974b3011e0f",
                    "name": "Gaston.800ddf9640a",
                    "type": "CAMPAIGN_CAMPAIGNER"
                  }
                }
              }
            }
          }
        }
      },
      "InviteIdentitiesRequest": {
        "type": "object",
        "title": "Invite Identities Request",
        "properties": {
          "ids": {
            "description": "The list of Identities IDs to invite - required when 'uninvited' is false",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "2b568c65bc3c4c57a43bd97e3a8e55",
              "2c9180867769897d01776ed5f125512f"
            ]
          },
          "uninvited": {
            "description": "indicator (optional) to invite all unregistered identities in the system within a limit 1000. This parameter makes sense only when 'ids' is empty.",
            "type": "boolean",
            "default": false,
            "example": false
          }
        }
      },
      "Target": {
        "type": "object",
        "title": "Target",
        "nullable": true,
        "properties": {
          "id": {
            "description": "Target ID",
            "type": "string",
            "example": "c6dc37bf508149b28ce5b7d90ca4bbf9"
          },
          "type": {
            "description": "Target type",
            "type": "string",
            "nullable": true,
            "enum": [
              "APPLICATION",
              "IDENTITY",
              null
            ],
            "example": "APPLICATION"
          },
          "name": {
            "description": "Target name",
            "type": "string",
            "example": "Active Directory [source]"
          }
        }
      },
      "LocalizedMessage": {
        "type": "object",
        "title": "Localized Message",
        "nullable": true,
        "description": "Localized error message to indicate a failed invocation or error if any.",
        "required": [
          "locale",
          "message"
        ],
        "properties": {
          "locale": {
            "description": "Message locale",
            "type": "string",
            "example": "An error has occurred!"
          },
          "message": {
            "description": "Message text",
            "type": "string",
            "example": "Error has occurred!"
          }
        }
      },
      "TaskStatusMessage": {
        "description": "TaskStatus Message",
        "required": [
          "key",
          "localizedText",
          "type",
          "parameters"
        ],
        "type": "object",
        "title": "Task Status Message",
        "properties": {
          "type": {
            "description": "Type of the message",
            "type": "string",
            "enum": [
              "INFO",
              "WARN",
              "ERROR"
            ],
            "example": "INFO"
          },
          "localizedText": {
            "description": "Localized form of the message",
            "$ref": "#/components/schemas/LocalizedMessage"
          },
          "key": {
            "description": "Key of the message",
            "type": "string",
            "example": "akey"
          },
          "parameters": {
            "description": "Message parameters for internationalization",
            "nullable": true,
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            },
            "example": [
              {
                "name": "value"
              }
            ]
          }
        }
      },
      "TaskReturnDetails": {
        "description": "Task return details",
        "required": [
          "name",
          "attributeName"
        ],
        "type": "object",
        "title": "Task Return Details",
        "properties": {
          "name": {
            "description": "Display name of the TaskReturnDetails",
            "type": "string",
            "example": "label"
          },
          "attributeName": {
            "description": "Attribute the TaskReturnDetails is for",
            "type": "string",
            "example": "identityCount"
          }
        }
      },
      "TaskDefinitionSummary": {
        "description": "Definition of a type of task, used to invoke tasks",
        "required": [
          "arguments",
          "description",
          "executor",
          "id",
          "uniqueName",
          "parentName"
        ],
        "type": "object",
        "title": "Task Definition Summary",
        "properties": {
          "id": {
            "description": "System-generated unique ID of the TaskDefinition",
            "type": "string",
            "example": "2c91808475b4334b0175e1dff64b63c5"
          },
          "uniqueName": {
            "description": "Name of the TaskDefinition",
            "type": "string",
            "example": "Cloud Account Aggregation"
          },
          "description": {
            "nullable": true,
            "description": "Description of the TaskDefinition",
            "type": "string",
            "example": "Aggregates from the specified application."
          },
          "parentName": {
            "description": "Name of the parent of the TaskDefinition",
            "type": "string",
            "example": "Cloud Account Aggregation"
          },
          "executor": {
            "description": "Executor of the TaskDefinition",
            "nullable": true,
            "type": "string",
            "example": "sailpoint.task.ServiceTaskExecutor"
          },
          "arguments": {
            "description": "Formal parameters of the TaskDefinition, without values",
            "type": "object",
            "additionalProperties": true,
            "example": {
              "mantisExecutor": "com.sailpoint.mantis.sources.task.AccountAggregationTask",
              "eventClassesCsv": "sailpoint.thunderbolt.events.AggregationEvents",
              "serviceClass": "sailpoint.thunderbolt.service.AggregationService",
              "serviceMethod": "accountAggregationTask"
            }
          }
        }
      },
      "TaskStatus": {
        "description": "Details and current status of a specific task",
        "required": [
          "id",
          "type",
          "uniqueName",
          "description",
          "parentName",
          "attributes",
          "created",
          "modified",
          "launched",
          "launcher",
          "completed",
          "completionStatus",
          "messages",
          "progress",
          "percentComplete",
          "returns"
        ],
        "type": "object",
        "title": "Task Status",
        "properties": {
          "id": {
            "description": "System-generated unique ID of the task this TaskStatus represents",
            "type": "string",
            "example": "id12345"
          },
          "type": {
            "description": "Type of task this TaskStatus represents",
            "type": "string",
            "enum": [
              "QUARTZ",
              "QPOC",
              "QUEUED_TASK"
            ],
            "example": "QUARTZ"
          },
          "uniqueName": {
            "description": "Name of the task this TaskStatus represents",
            "type": "string",
            "example": "Big Task"
          },
          "description": {
            "description": "Description of the task this TaskStatus represents",
            "type": "string",
            "example": "A Really Big Task"
          },
          "parentName": {
            "description": "Name of the parent of the task this TaskStatus represents",
            "nullable": true,
            "type": "string",
            "example": "Parent Task"
          },
          "launcher": {
            "description": "Service to execute the task this TaskStatus represents",
            "type": "string",
            "example": "sweep"
          },
          "target": {
            "$ref": "#/components/schemas/Target"
          },
          "created": {
            "description": "Creation date of the task this TaskStatus represents",
            "type": "string",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "modified": {
            "description": "Last modification date of the task this TaskStatus represents",
            "type": "string",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "launched": {
            "description": "Launch date of the task this TaskStatus represents",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "completed": {
            "description": "Completion date of the task this TaskStatus represents",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2020-07-11T21:23:15.000Z"
          },
          "completionStatus": {
            "description": "Completion status of the task this TaskStatus represents",
            "type": "string",
            "nullable": true,
            "enum": [
              "SUCCESS",
              "WARNING",
              "ERROR",
              "TERMINATED",
              "TEMPERROR",
              null
            ],
            "example": "SUCCESS"
          },
          "messages": {
            "description": "Messages associated with the task this TaskStatus represents",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStatusMessage"
            }
          },
          "returns": {
            "description": "Return values from the task this TaskStatus represents",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskReturnDetails"
            }
          },
          "attributes": {
            "description": "Attributes of the task this TaskStatus represents",
            "type": "object",
            "additionalProperties": true,
            "example": {
              "identityCount": 0
            }
          },
          "progress": {
            "description": "Current progress of the task this TaskStatus represents",
            "nullable": true,
            "type": "string",
            "example": "Started"
          },
          "percentComplete": {
            "description": "Current percentage completion of the task this TaskStatus represents",
            "type": "integer",
            "example": 100
          },
          "taskDefinitionSummary": {
            "$ref": "#/components/schemas/TaskDefinitionSummary"
          }
        }
      },
      "SendAccountVerificationRequest": {
        "type": "object",
        "title": "Send Account Verification Request",
        "properties": {
          "sourceName": {
            "description": "The source name where identity account password should be reset",
            "type": "string",
            "nullable": true,
            "example": "Active Directory Source"
          },
          "via": {
            "description": "The method to send notification",
            "type": "string",
            "enum": [
              "EMAIL_WORK",
              "EMAIL_PERSONAL",
              "LINK_WORK",
              "LINK_PERSONAL"
            ],
            "example": "EMAIL_WORK"
          }
        },
        "required": [
          "via"
        ]
      },
      "ProcessIdentitiesRequest": {
        "type": "object",
        "title": "Process Identities Request",
        "properties": {
          "identityIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 250,
            "description": "List of up to 250 identity IDs to process.",
            "items": {
              "type": "string",
              "example": "ef38f94347e94562b5bb8424a56397d8"
            }
          }
        }
      },
      "TaskResultResponse": {
        "type": "object",
        "title": "Task Result Response",
        "properties": {
          "type": {
            "type": "string",
            "description": "the type of response reference",
            "example": "TASK_RESULT"
          },
          "id": {
            "type": "string",
            "description": "the task ID",
            "example": "78733556-9ea3-4f59-bf69-e5cd92b011b4"
          },
          "name": {
            "type": "string",
            "description": "the task name (not used in this endpoint, always null)",
            "example": "null"
          }
        }
      },
      "BaseReferenceDto-2": {
        "type": "object",
        "title": "Base Reference Dto",
        "properties": {
          "id": {
            "type": "string",
            "description": "the application ID",
            "example": "ff8081814d977c21014da056804a0af3"
          },
          "name": {
            "type": "string",
            "description": "the application name",
            "example": "Github"
          }
        }
      },
      "RoleAssignmentRef": {
        "type": "object",
        "title": "Role Assignment Ref",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment Id",
            "example": "1cbb0705b38c4226b1334eadd8874086"
          },
          "role": {
            "$ref": "#/components/schemas/BaseReferenceDto-2",
            "description": "Role Id and Name related to this assignment",
            "example": {
              "id": "e7697a1e96d04db1ac7b0f4544915d2c",
              "type": "ROLE",
              "name": "Engineer"
            }
          }
        }
      },
      "ContextAttributeDto": {
        "type": "object",
        "title": "Context Attribute Dto",
        "properties": {
          "attribute": {
            "type": "string",
            "description": "The name of the attribute",
            "example": "location"
          },
          "value": {
            "oneOf": [
              {
                "type": "string",
                "example": "Austin"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": [
                    "Austin",
                    "Houston",
                    "Dallas"
                  ]
                }
              }
            ],
            "description": "The value of the attribute.  This can be either a string or a multi-valued string",
            "example": "Austin"
          },
          "derived": {
            "type": "boolean",
            "description": "True if the attribute was derived.",
            "default": false,
            "example": false
          }
        }
      },
      "AccessRequestContext": {
        "type": "object",
        "title": "Access Request Context",
        "properties": {
          "contextAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextAttributeDto"
            }
          }
        }
      },
      "RoleMatchDto": {
        "type": "object",
        "title": "Role Match Dto",
        "properties": {
          "roleRef": {
            "$ref": "#/components/schemas/BaseReferenceDto-2",
            "description": "Role Id and Name related to this match",
            "example": {
              "id": "e7697a1e96d04db1ac7b0f4544915d2c",
              "type": "DIMENSION",
              "name": "Engineer"
            }
          },
          "matchedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextAttributeDto"
            }
          }
        }
      },
      "AssignmentContextDto": {
        "type": "object",
        "title": "Assignment Context Dto",
        "properties": {
          "requested": {
            "$ref": "#/components/schemas/AccessRequestContext"
          },
          "matched": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMatchDto"
            }
          },
          "computedDate": {
            "type": "string",
            "description": "Date that the assignment will was evaluated",
            "example": "Wed Feb 14 10:58:42"
          }
        }
      },
      "AccountInfoDto": {
        "type": "object",
        "title": "Account Info Dto",
        "properties": {
          "nativeIdentity": {
            "type": "string",
            "description": "The unique ID of the account generated by the source system",
            "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for this account",
            "example": "Abby.Smith"
          },
          "uuid": {
            "type": "string",
            "description": "UUID associated with this account",
            "example": "{ad9fc391-246d-40af-b248-b6556a2b7c01}"
          }
        }
      },
      "RoleTargetDto": {
        "type": "object",
        "title": "Role Target Dto",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/BaseReferenceDto-2",
            "description": "Source Id and Name related to this assignment",
            "example": {
              "id": "d18b74853739439986501ad180b27db6",
              "type": "SOURCE",
              "name": "Active Directory"
            }
          },
          "accountInfo": {
            "$ref": "#/components/schemas/AccountInfoDto"
          },
          "roleName": {
            "type": "string",
            "description": "Specific role name for this target if using multiple accounts",
            "example": "Marketing"
          }
        }
      },
      "RoleAssignmentDto": {
        "type": "object",
        "title": "Role Assignment Dto",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment Id",
            "example": "1cbb0705b38c4226b1334eadd8874086"
          },
          "role": {
            "$ref": "#/components/schemas/BaseReferenceDto-2",
            "description": "Role Id and Name related to this assignment",
            "example": {
              "id": "e7697a1e96d04db1ac7b0f4544915d2c",
              "type": "ROLE",
              "name": "Engineer"
            }
          },
          "comments": {
            "type": "string",
            "description": "Comments added by the user when the assignment was made",
            "example": "I'm a new Engineer and need this role to do my work"
          },
          "assignmentSource": {
            "type": "string",
            "description": "Source describing how this assignment was made",
            "example": "UI"
          },
          "assigner": {
            "$ref": "#/components/schemas/BaseReferenceDto-2",
            "description": "The identity that performed the assignment. This could be blank or system",
            "example": {
              "id": "2c9180867c184ff6017c2a2fbf031666",
              "type": "IDENTITY",
              "name": "Jeff Richardson"
            }
          },
          "assignedDimensions": {
            "type": "array",
            "description": "Dimensions assigned related to this role",
            "example": [
              {
                "id": "1acc8ffe5fcf457090de28bee2af36ee",
                "type": "DIMENSION",
                "name": "Northeast region"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/BaseReferenceDto-2"
            }
          },
          "assignmentContext": {
            "$ref": "#/components/schemas/AssignmentContextDto",
            "description": "The context around the role assignment",
            "example": {
              "requested": {
                "contextAttributes": [
                  {
                    "attribute": "department",
                    "value": "Engineering",
                    "derived": false
                  }
                ]
              },
              "matched": [
                {
                  "id": "e7697a1e96d04db1ac7b0f4544915d2c",
                  "type": "DIMENSION",
                  "name": "Engineer"
                }
              ],
              "computedDate": "Wed Feb 14 10:58:42"
            }
          },
          "accountTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleTargetDto"
            }
          },
          "removeDate": {
            "type": "string",
            "description": "Date that the assignment will be removed",
            "example": "Wed Feb 14 10:58:42"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Attribute mapping type.",
            "example": "rule"
          },
          "properties": {
            "type": "object",
            "description": "Attribute mapping properties.",
            "example": {
              "ruleType": "IdentityAttribute",
              "ruleName": "Cloud Promote Identity Attribute"
            }
          }
        }
      },
      "IdentityAttribute": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Identity attribute's technical name.",
            "example": "costCenter"
          },
          "displayName": {
            "type": "string",
            "description": "Identity attribute's business-friendly name.",
            "example": "Cost Center"
          },
          "standard": {
            "type": "boolean",
            "description": "Indicates whether the attribute is 'standard' or 'default'.",
            "default": false,
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Identity attribute's type.",
            "nullable": true,
            "example": "string"
          },
          "multi": {
            "type": "boolean",
            "description": "Indicates whether the identity attribute is multi-valued.",
            "default": false,
            "example": false
          },
          "searchable": {
            "type": "boolean",
            "description": "Indicates whether the identity attribute is searchable.",
            "default": false,
            "example": false
          },
          "system": {
            "type": "boolean",
            "description": "Indicates whether the identity attribute is 'system', meaning that it doesn't have a source and isn't configurable.",
            "default": false,
            "example": false
          },
          "sources": {
            "description": "Identity attribute's list of sources - this specifies how the rule's value is derived.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            }
          }
        }
      },
      "IdentityAttributeNames": {
        "type": "object",
        "description": "Identity attribute IDs.",
        "properties": {
          "ids": {
            "description": "List of identity attributes' technical names.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "name"
            },
            "example": [
              "name",
              "displayName"
            ]
          }
        }
      },
      "TransformDefinition": {
        "type": "object",
        "title": "Transform Definition",
        "properties": {
          "type": {
            "type": "string",
            "description": "Transform definition type.",
            "example": "accountAttribute"
          },
          "attributes": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Arbitrary key-value pairs to store any metadata for the object",
            "example": {
              "attributeName": "e-mail",
              "sourceName": "MySource",
              "sourceId": "2c9180877a826e68017a8c0b03da1a53"
            }
          }
        }
      },
      "IdentityAttributeTransform": {
        "type": "object",
        "title": "Identity Attribute Transform",
        "description": "Transform definition for an identity attribute.",
        "properties": {
          "identityAttributeName": {
            "type": "string",
            "description": "Identity attribute's name.",
            "example": "email"
          },
          "transformDefinition": {
            "$ref": "#/components/schemas/TransformDefinition",
            "description": "Seaspray transform definition."
          }
        }
      },
      "IdentityAttributeConfig": {
        "type": "object",
        "title": "Identity Attribute Config",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Backend will only promote values if the profile/mapping is enabled.",
            "example": true,
            "default": true
          },
          "attributeTransforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAttributeTransform"
            }
          }
        }
      },
      "IdentityExceptionReportReference": {
        "type": "object",
        "title": "Identity Exception Report Reference",
        "nullable": true,
        "properties": {
          "taskResultId": {
            "type": "string",
            "format": "uuid",
            "description": "Task result ID.",
            "example": "2c918086795cd09201795d5f7d7533df"
          },
          "reportName": {
            "type": "string",
            "example": "My annual report",
            "description": "Report name."
          }
        }
      },
      "IdentityProfileBulkDelete": {
        "description": "List of Identity Profile IDs to delete.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "2c9180867b2a34e0017b3078d60b0699",
          "2c9180867b2a34e0017b3078d60b0698"
        ]
      },
      "TaskResultSimplified": {
        "type": "object",
        "title": "Task Result Simplified",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task identifier",
            "example": "ff8081814d977c21014da056804a0af3"
          },
          "name": {
            "type": "string",
            "description": "Task name",
            "example": "Background Object Terminator c8f030f2-b1a6-4e33-99e8-6935bc18735d"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Generic task for terminating data in the overlay, used by the TerminationService."
          },
          "launcher": {
            "type": "string",
            "description": "User or process who launched the task",
            "example": "support"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "description": "Date time of completion",
            "example": "Mon Aug 21 14:57:39 CDT 2023"
          },
          "launched": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the task was launched",
            "example": "Mon Aug 21 14:55:39 CDT 2023"
          },
          "completionStatus": {
            "type": "string",
            "enum": [
              "Success",
              "Warning",
              "Error",
              "Terminated",
              "TempError"
            ],
            "description": "Task result status",
            "example": "Success"
          }
        }
      },
      "SelfImportExportDto": {
        "type": "object",
        "title": "Self Import Export Dto",
        "description": "Self block for imported/exported object.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Imported/exported object's DTO type. Import is currently only possible with the CONNECTOR_RULE, IDENTITY_OBJECT_CONFIG, IDENTITY_PROFILE, RULE, SOURCE, TRANSFORM, and TRIGGER_SUBSCRIPTION object types.",
            "enum": [
              "ACCESS_PROFILE",
              "ACCESS_REQUEST_CONFIG",
              "ATTR_SYNC_SOURCE_CONFIG",
              "AUTH_ORG",
              "CAMPAIGN_FILTER",
              "CONNECTOR_RULE",
              "FORM_DEFINITION",
              "GOVERNANCE_GROUP",
              "IDENTITY_OBJECT_CONFIG",
              "IDENTITY_PROFILE",
              "LIFECYCLE_STATE",
              "NOTIFICATION_TEMPLATE",
              "PASSWORD_POLICY",
              "PASSWORD_SYNC_GROUP",
              "PUBLIC_IDENTITIES_CONFIG",
              "ROLE",
              "RULE",
              "SEGMENT",
              "SERVICE_DESK_INTEGRATION",
              "SOD_POLICY",
              "SOURCE",
              "TAG",
              "TRANSFORM",
              "TRIGGER_SUBSCRIPTION",
              "WORKFLOW"
            ],
            "example": "SOURCE"
          },
          "id": {
            "type": "string",
            "description": "Imported/exported object's ID.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Imported/exported object's display name.",
            "example": "HR Active Directory"
          }
        }
      },
      "BaseCommonDto-2": {
        "type": "object",
        "title": "Base Common Dto",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "System-generated unique ID of the Object",
            "type": "string",
            "example": "id12345",
            "readOnly": true
          },
          "name": {
            "description": "Name of the Object",
            "type": "string",
            "example": "aName",
            "nullable": true
          },
          "created": {
            "description": "Creation date of the Object",
            "type": "string",
            "example": "2015-05-28T14:07:17Z",
            "format": "date-time",
            "readOnly": true
          },
          "modified": {
            "description": "Last modification date of the Object",
            "type": "string",
            "example": "2015-05-28T14:07:17Z",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "TransformDefinition-2": {
        "type": "object",
        "title": "Transform Definition",
        "properties": {
          "type": {
            "type": "string",
            "description": "Transform definition type.",
            "example": "accountAttribute"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Arbitrary key-value pairs to store any metadata for the object",
            "example": {
              "attributeName": "e-mail",
              "sourceName": "MySource",
              "sourceId": "2c9180877a826e68017a8c0b03da1a53"
            }
          }
        }
      },
      "IdentityAttributeTransform-2": {
        "type": "object",
        "title": "Identity Attribute Transform",
        "description": "Transform definition for an identity attribute.",
        "properties": {
          "identityAttributeName": {
            "type": "string",
            "description": "Identity attribute's name.",
            "example": "email"
          },
          "transformDefinition": {
            "$ref": "#/components/schemas/TransformDefinition-2",
            "description": "Seaspray transform definition."
          }
        }
      },
      "IdentityAttributeConfig-2": {
        "type": "object",
        "title": "Identity Attribute Config",
        "description": "Defines all the identity attribute mapping configurations. This defines how to generate or collect data for each identity attributes in identity refresh process.",
        "properties": {
          "enabled": {
            "description": "Backend will only promote values if the profile/mapping is enabled.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "attributeTransforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAttributeTransform-2"
            }
          }
        }
      },
      "IdentityExceptionReportReference-2": {
        "type": "object",
        "title": "Identity Exception Report Reference",
        "nullable": true,
        "properties": {
          "taskResultId": {
            "type": "string",
            "format": "uuid",
            "description": "Task result ID.",
            "example": "2b838de9-db9b-abcf-e646-d4f274ad4238"
          },
          "reportName": {
            "type": "string",
            "example": "My annual report",
            "description": "Report name."
          }
        }
      },
      "IdentityProfile-2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommonDto-2"
          },
          {
            "type": "object",
            "required": [
              "authoritativeSource"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "Identity profile's description.",
                "example": "My custom flat file profile",
                "nullable": true
              },
              "owner": {
                "type": "object",
                "description": "Identity profile's owner.",
                "nullable": true,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "IDENTITY"
                    ],
                    "description": "Owner's object type.",
                    "example": "IDENTITY"
                  },
                  "id": {
                    "type": "string",
                    "description": "Owner's ID.",
                    "example": "2c9180835d191a86015d28455b4b232a"
                  },
                  "name": {
                    "type": "string",
                    "description": "Owner's name.",
                    "example": "William Wilson"
                  }
                }
              },
              "priority": {
                "type": "integer",
                "format": "int64",
                "description": "Identity profile's priority.",
                "example": 10
              },
              "authoritativeSource": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "SOURCE"
                    ],
                    "description": "Authoritative source's object type.",
                    "example": "SOURCE"
                  },
                  "id": {
                    "type": "string",
                    "description": "Authoritative source's ID.",
                    "example": "2c9180835d191a86015d28455b4b232a"
                  },
                  "name": {
                    "type": "string",
                    "description": "Authoritative source's name.",
                    "example": "HR Active Directory"
                  }
                }
              },
              "identityRefreshRequired": {
                "type": "boolean",
                "default": false,
                "description": "Set this value to 'True' if an identity refresh is necessary. You would typically want to trigger an identity refresh when a change has been made on the source.",
                "example": true
              },
              "identityCount": {
                "type": "integer",
                "description": "Number of identities belonging to the identity profile.",
                "format": "int32",
                "example": 8
              },
              "identityAttributeConfig": {
                "$ref": "#/components/schemas/IdentityAttributeConfig-2"
              },
              "identityExceptionReportReference": {
                "$ref": "#/components/schemas/IdentityExceptionReportReference-2"
              },
              "hasTimeBasedAttr": {
                "description": "Indicates the value of `requiresPeriodicRefresh` attribute for the identity profile.",
                "type": "boolean",
                "default": false,
                "example": true
              }
            }
          }
        ]
      },
      "IdentityProfileExportedObject": {
        "type": "object",
        "title": "Identity Profile Exported Object",
        "description": "Identity Profile exported object",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1,
            "description": "Version or object from the target service."
          },
          "self": {
            "$ref": "#/components/schemas/SelfImportExportDto"
          },
          "object": {
            "$ref": "#/components/schemas/IdentityProfile-2"
          }
        }
      },
      "SpConfigMessage": {
        "type": "object",
        "title": "Config Import/Export Message",
        "description": "Message model for Config Import/Export.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Message key.",
            "example": "UNKNOWN_REFERENCE_RESOLVER"
          },
          "text": {
            "type": "string",
            "description": "Message text.",
            "example": "Unable to resolve reference for object [type: IDENTITY, id: 2c91808c746e9c9601747d6507332ecz, name: random identity]"
          },
          "details": {
            "type": "object",
            "description": "Message details if any, in key:value pairs.",
            "additionalProperties": {
              "type": "object"
            },
            "example": {
              "details": "message details"
            }
          }
        },
        "required": [
          "key",
          "text",
          "details"
        ]
      },
      "ImportObject": {
        "type": "object",
        "title": "Import Object",
        "description": "Object created or updated by import.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of object created or updated by import.",
            "enum": [
              "CONNECTOR_RULE",
              "IDENTITY_OBJECT_CONFIG",
              "IDENTITY_PROFILE",
              "RULE",
              "SOURCE",
              "TRANSFORM",
              "TRIGGER_SUBSCRIPTION"
            ],
            "example": "SOURCE"
          },
          "id": {
            "type": "string",
            "description": "ID of object created or updated by import.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Display name of object created or updated by import.",
            "example": "HR Active Directory"
          }
        }
      },
      "ObjectImportResult": {
        "type": "object",
        "title": "Import Object Response Body",
        "description": "Response model for import of a single object.",
        "properties": {
          "infos": {
            "description": "Informational messages returned from the target service on import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpConfigMessage"
            }
          },
          "warnings": {
            "description": "Warning messages returned from the target service on import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpConfigMessage"
            }
          },
          "errors": {
            "description": "Error messages returned from the target service on import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpConfigMessage"
            }
          },
          "importedObjects": {
            "description": "References to objects that were created or updated by the import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObject"
            }
          }
        },
        "required": [
          "infos",
          "warnings",
          "errors",
          "importedObjects"
        ]
      },
      "IdentityPreviewRequest": {
        "type": "object",
        "title": "Identity Preview Request",
        "properties": {
          "identityId": {
            "type": "string",
            "format": "uuid",
            "example": "2c9180857893f12901789445619b0366"
          },
          "identityAttributeConfig": {
            "$ref": "#/components/schemas/IdentityAttributeConfig"
          }
        }
      },
      "IdentityAttributePreview": {
        "type": "object",
        "title": "Identity Attribute Preview",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the attribute that is being previewed.",
            "example": "email"
          },
          "value": {
            "type": "string",
            "description": "Value that was derived during the preview.",
            "example": "email@mail.com"
          },
          "previousValue": {
            "type": "string",
            "description": "The value of the attribute before the preview.",
            "example": "oldEmail@mail.com"
          },
          "errorMessages": {
            "$ref": "#/components/schemas/ErrorMessageDtoList",
            "description": "A list of errors that may have been encountered"
          }
        }
      },
      "IdentityPreviewResponse": {
        "type": "object",
        "title": "Identity Preview Response",
        "properties": {
          "identity": {
            "type": "object",
            "description": "Identity's manager.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of identity's manager.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of identity's manager.",
                "example": "2c4180a46faadee4016fb4e018c20626"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of identity's manager.",
                "example": "Robert Robinson"
              }
            }
          },
          "previewAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAttributePreview"
            }
          }
        }
      },
      "EmailNotificationOption": {
        "type": "object",
        "title": "Email Notification Option",
        "properties": {
          "notifyManagers": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If true, then the manager is notified of the lifecycle state change."
          },
          "notifyAllAdmins": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If true, then all the admins are notified of the lifecycle state change."
          },
          "notifySpecificUsers": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "If true, then the users specified in \"emailAddressList\" below are notified of lifecycle state change."
          },
          "emailAddressList": {
            "type": "array",
            "example": [
              "test@test.com",
              "test2@test.com"
            ],
            "items": {
              "type": "string"
            },
            "description": "List of user email addresses. If \"notifySpecificUsers\" option is true, then these users are notified of lifecycle state change."
          }
        }
      },
      "AccountAction": {
        "type": "object",
        "title": "Account Action",
        "properties": {
          "action": {
            "type": "string",
            "example": "ENABLE",
            "description": "Describes if action will be enabled or disabled",
            "enum": [
              "ENABLE",
              "DISABLE"
            ]
          },
          "sourceIds": {
            "type": "array",
            "items": {
              "example": "2c918084660f45d6016617daa9210584",
              "description": "Source Id",
              "type": "string"
            },
            "example": [
              "2c918084660f45d6016617daa9210584",
              "2c918084660f45d6016617daa9210500"
            ],
            "description": "List of source IDs. The sources must have the ENABLE feature or flat file source. See \"/sources\" endpoint for source features."
          }
        }
      },
      "LifecycleState": {
        "type": "object",
        "title": "Lifecycle State",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "2c9180835d2e5168015d32f890ca1581",
            "description": "Lifecycle state ID."
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Lifecycle Name",
            "description": "Lifecycle state name."
          },
          "technicalName": {
            "type": "string",
            "readOnly": true,
            "example": "lifecycleTechnicalName",
            "description": "Lifecycle state technical name. This is for internal use."
          },
          "description": {
            "type": "string",
            "example": "LifecycleDescription",
            "description": "Lifecycle state description."
          },
          "created": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "example": "2015-05-28T14:07:17Z",
            "description": "Lifecycle state created date."
          },
          "modified": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "example": "2015-05-28T14:07:17Z",
            "description": "Lifecycle state modified date."
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "Indicates whether the lifecycle state is enabled or disabled."
          },
          "identityCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 12,
            "description": "Number of identities that have the lifecycle state."
          },
          "emailNotificationOption": {
            "$ref": "#/components/schemas/EmailNotificationOption"
          },
          "accountActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountAction"
            }
          },
          "accessProfileIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c918084660f45d6016617daa9210584",
              "2c918084660f45d6016617daa9210500"
            ],
            "description": "List of access-profile IDs that are associated with the lifecycle state."
          }
        }
      },
      "MultiHostIntegrations": {
        "type": "object",
        "title": "Multi Host Integrations",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Multi-Host Integration ID.",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "name": {
            "type": "string",
            "description": "Multi-Host Integration's human-readable name.",
            "example": "My Multi-Host Integration"
          },
          "description": {
            "type": "string",
            "description": "Multi-Host Integration's human-readable description.",
            "example": "This is a Multi-Host Integration."
          },
          "owner": {
            "description": "Reference to identity object who owns the source.",
            "type": "object",
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner identity's ID.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Owner identity's human-readable display name.",
                "example": "MyName"
              }
            }
          },
          "cluster": {
            "description": "Reference to the source's associated cluster.",
            "type": "object",
            "nullable": true,
            "required": [
              "name",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "CLUSTER"
                ],
                "example": "CLUSTER"
              },
              "id": {
                "type": "string",
                "description": "Cluster ID.",
                "example": "2c9180866166b5b0016167c32ef31a66"
              },
              "name": {
                "type": "string",
                "description": "Cluster's human-readable display name.",
                "example": "Corporate Cluster"
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of system being managed e.g. Workday, Multi-Host - Microsoft SQL Server, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`. ",
            "example": "Multi-Host - Microsoft SQL Server"
          },
          "connector": {
            "type": "string",
            "description": "Connector script name.",
            "example": "multihost-microsoft-sql-server"
          },
          "lastSourceUploadSuccessCount": {
            "type": "integer",
            "format": "int32",
            "description": "Last successfully uploaded source count of given Multi-Host Integration.",
            "example": 50
          },
          "maxSourcesPerAggGroup": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum sources that can contain in a aggregation group of Multi-Host Integration.",
            "example": 10
          },
          "connectorClass": {
            "type": "string",
            "description": "Fully qualified name of the Java class that implements the connector interface.",
            "example": "sailpoint.connector.OpenConnectorAdapter"
          },
          "connectorAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Connector specific configuration. This configuration will differ for Multi-Host Integration type.",
            "properties": {
              "maxAllowedSources": {
                "type": "integer",
                "format": "int32",
                "description": "Maximum sources allowed count of a Multi-Host Integration",
                "example": 250
              },
              "lastSourceUploadCount": {
                "type": "integer",
                "format": "int32",
                "description": "Last upload sources count of a Multi-Host Integration",
                "example": 40
              },
              "connectorFileUploadHistory": {
                "type": "object",
                "properties": {
                  "connectorFileNameUploadedDate": {
                    "description": "File name of the connector JAR",
                    "type": "string",
                    "example": "2024-08-29T10:20:38.896479Z"
                  }
                }
              },
              "multihost_status": {
                "type": "string",
                "enum": [
                  "ready",
                  "processing",
                  "fileUploadInProgress",
                  "sourceCreationInProgress",
                  "aggregationGroupingInProgress",
                  "aggregationScheduleInProgress",
                  "deleteInProgress",
                  "deleteFailed"
                ],
                "description": "Multi-Host integration status.",
                "example": "ready"
              },
              "showAccountSchema": {
                "description": "Show account schema",
                "type": "boolean",
                "example": true,
                "default": true
              },
              "showEntitlementSchema": {
                "description": "Show entitlement schema",
                "type": "boolean",
                "example": true,
                "default": true
              },
              "multiHostAttributes": {
                "type": "object",
                "description": "Attributes of Multi-Host Integration",
                "properties": {
                  "password": {
                    "description": "Password.",
                    "type": "string",
                    "example": "Password"
                  },
                  "connector_files": {
                    "type": "string",
                    "description": "Connector file.",
                    "example": "mssql-jdbc-8.4.1.jre8.jar"
                  },
                  "authType": {
                    "type": "string",
                    "description": "Authentication type.",
                    "example": "SQLAuthentication"
                  },
                  "user": {
                    "type": "string",
                    "description": "Username.",
                    "example": "My Username"
                  }
                }
              }
            },
            "example": {
              "multiHostAttributes": {
                "password": "Password",
                "user": "Username",
                "connector_files": "mssql-jdbc-8.4.1.jre8.jar",
                "authType": "SQLAuthentication"
              },
              "connectorFileUploadHistory": {
                "connectorFileNameUploadedDate": "2024-08-29T10:20:38.896479Z"
              },
              "maxAllowedSources": 30,
              "lastSourceUploadCount": 50,
              "showEntitlementSchema": true,
              "showAccountSchema": true,
              "multihost_status": "ready"
            }
          },
          "deleteThreshold": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "description": "Number from 0 to 100 that specifies when to skip the delete phase.",
            "example": 10
          },
          "authoritative": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is referenced by an identity profile.",
            "default": false,
            "example": false
          },
          "managementWorkgroup": {
            "description": "Reference to management workgroup for the source.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "GOVERNANCE_GROUP"
                ],
                "example": "GOVERNANCE_GROUP"
              },
              "id": {
                "type": "string",
                "description": "Management workgroup ID.",
                "example": "2c91808568c529c60168cca6f90c2222"
              },
              "name": {
                "type": "string",
                "description": "Management workgroup's human-readable display name.",
                "example": "My Management Workgroup"
              }
            }
          },
          "healthy": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is healthy.",
            "default": false,
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT",
              "SOURCE_STATE_ERROR_CLUSTER",
              "SOURCE_STATE_ERROR_SOURCE",
              "SOURCE_STATE_ERROR_VA",
              "SOURCE_STATE_FAILURE_CLUSTER",
              "SOURCE_STATE_FAILURE_SOURCE",
              "SOURCE_STATE_HEALTHY",
              "SOURCE_STATE_UNCHECKED_CLUSTER",
              "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES",
              "SOURCE_STATE_UNCHECKED_SOURCE",
              "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS"
            ],
            "description": "Status identifier that gives specific information about why a source is or isn't healthy. ",
            "example": "SOURCE_STATE_HEALTHY"
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows when a source health check was last performed.",
            "example": "2021-09-28T15:48:29.3801666300Z"
          },
          "connectorId": {
            "type": "string",
            "description": "Connector ID",
            "example": "multihost-microsoft-sql-server"
          },
          "connectorName": {
            "type": "string",
            "description": "Name of the connector that was chosen during source creation.",
            "example": "Multi-Host Microsoft SQL Server"
          },
          "connectionType": {
            "type": "string",
            "enum": [
              "direct",
              "file"
            ],
            "description": "Type of connection (direct or file).",
            "example": "direct"
          },
          "connectorImplementationId": {
            "type": "string",
            "description": "Connector implementation ID.",
            "example": "multihost-microsoft-sql-server"
          },
          "created": {
            "type": "string",
            "description": "Date-time when the source was created",
            "format": "date-time",
            "example": "2022-02-08T14:50:03.827Z"
          },
          "modified": {
            "type": "string",
            "description": "Date-time when the source was last modified.",
            "format": "date-time",
            "example": "2024-01-23T18:08:50.897Z"
          },
          "credentialProviderEnabled": {
            "type": "boolean",
            "description": "If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.",
            "default": false,
            "example": false
          },
          "category": {
            "type": "string",
            "nullable": true,
            "default": null,
            "description": "Source category (e.g. null, CredentialProvider).",
            "example": "CredentialProvider"
          }
        },
        "required": [
          "name",
          "owner",
          "connector",
          "description",
          "id"
        ]
      },
      "MultiHostIntegrationsCreate": {
        "type": "object",
        "title": "Multi Host Integrations Create",
        "properties": {
          "name": {
            "type": "string",
            "description": "Multi-Host Integration's human-readable name.",
            "example": "My Multi-Host Integration"
          },
          "description": {
            "type": "string",
            "description": "Multi-Host Integration's human-readable description.",
            "example": "This is the Multi-Host Integration."
          },
          "owner": {
            "description": "Reference to identity object who owns the source.",
            "type": "object",
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner identity's ID.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Owner identity's human-readable display name.",
                "example": "MyName"
              }
            }
          },
          "cluster": {
            "description": "Reference to the source's associated cluster.",
            "type": "object",
            "nullable": true,
            "required": [
              "name",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "CLUSTER"
                ],
                "example": "CLUSTER"
              },
              "id": {
                "type": "string",
                "description": "Cluster ID.",
                "example": "2c9180866166b5b0016167c32ef31a66"
              },
              "name": {
                "type": "string",
                "description": "Cluster's human-readable display name.",
                "example": "Corporate Cluster"
              }
            }
          },
          "connector": {
            "type": "string",
            "description": "Connector script name.",
            "example": "multihost-microsoft-sql-server"
          },
          "connectorAttributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Multi-Host Integration specific configuration. User can add any number of additional attributes. e.g. maxSourcesPerAggGroup, maxAllowedSources etc.",
            "example": {
              "maxSourcesPerAggGroup": 10,
              "maxAllowedSources": 300
            }
          },
          "managementWorkgroup": {
            "description": "Reference to management workgroup for the source.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "GOVERNANCE_GROUP"
                ],
                "example": "GOVERNANCE_GROUP"
              },
              "id": {
                "type": "string",
                "description": "Management workgroup ID.",
                "example": "2c91808568c529c60168cca6f90c2222"
              },
              "name": {
                "type": "string",
                "description": "Management workgroup's human-readable display name.",
                "example": "My Management Workgroup"
              }
            }
          },
          "created": {
            "type": "string",
            "description": "Date-time when the source was created",
            "format": "date-time",
            "example": "2022-02-08T14:50:03.827Z"
          },
          "modified": {
            "type": "string",
            "description": "Date-time when the source was last modified.",
            "format": "date-time",
            "example": "2024-01-23T18:08:50.897Z"
          }
        },
        "required": [
          "name",
          "owner",
          "connector",
          "description"
        ]
      },
      "MultiHostIntegrationTemplateType": {
        "description": "This represents a Multi-Host Integration template type.",
        "required": [
          "type",
          "scriptName"
        ],
        "type": "object",
        "title": "Multi Host Integration Template Type",
        "properties": {
          "name": {
            "description": "This is the name of the type.",
            "example": "aName",
            "type": "string"
          },
          "type": {
            "description": "This is the type value for the type.",
            "example": "aType",
            "type": "string"
          },
          "scriptName": {
            "description": "This is the scriptName attribute value for the type.",
            "example": "aScriptName",
            "type": "string"
          }
        }
      },
      "MultiHostIntegrationsCreateSources": {
        "description": "This represents sources to be created of same type.",
        "required": [
          "name"
        ],
        "type": "object",
        "title": "Multi Host Integrations Create Sources",
        "properties": {
          "name": {
            "type": "string",
            "description": "Source's human-readable name.",
            "example": "My Source"
          },
          "description": {
            "type": "string",
            "description": "Source's human-readable description.",
            "example": "This is the corporate directory."
          },
          "connectorAttributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Connector specific configuration. This configuration will differ from type to type.",
            "example": {
              "authType": "SQLAuthentication",
              "url": "jdbc:sqlserver://178.18.41.118:1433",
              "user": "username",
              "driverClass": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
              "maxSourcesPerAggGroup": 10,
              "maxAllowedSources": 300
            }
          }
        }
      },
      "ManagerCorrelationMapping": {
        "type": "object",
        "title": "Manager Correlation Mapping",
        "nullable": true,
        "properties": {
          "accountAttributeName": {
            "type": "string",
            "description": "Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager's identity.",
            "example": "manager"
          },
          "identityAttributeName": {
            "type": "string",
            "description": "Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.",
            "example": "manager"
          }
        }
      },
      "SourceFeature": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "AUTHENTICATE",
            "COMPOSITE",
            "DIRECT_PERMISSIONS",
            "DISCOVER_SCHEMA",
            "ENABLE",
            "MANAGER_LOOKUP",
            "NO_RANDOM_ACCESS",
            "PROXY",
            "SEARCH",
            "TEMPLATE",
            "UNLOCK",
            "UNSTRUCTURED_TARGETS",
            "SHAREPOINT_TARGET",
            "PROVISIONING",
            "GROUP_PROVISIONING",
            "SYNC_PROVISIONING",
            "PASSWORD",
            "CURRENT_PASSWORD",
            "ACCOUNT_ONLY_REQUEST",
            "ADDITIONAL_ACCOUNT_REQUEST",
            "NO_AGGREGATION",
            "GROUPS_HAVE_MEMBERS",
            "NO_PERMISSIONS_PROVISIONING",
            "NO_GROUP_PERMISSIONS_PROVISIONING",
            "NO_UNSTRUCTURED_TARGETS_PROVISIONING",
            "NO_DIRECT_PERMISSIONS_PROVISIONING",
            "PREFER_UUID",
            "ARM_SECURITY_EXTRACT",
            "ARM_UTILIZATION_EXTRACT",
            "ARM_CHANGELOG_EXTRACT",
            "USES_UUID",
            "APPLICATION_DISCOVERY"
          ],
          "example": "AUTHENTICATE"
        },
        "description": "Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors.\n* AUTHENTICATE: The source supports pass-through authentication.\n* COMPOSITE: The source supports composite source creation.\n* DIRECT_PERMISSIONS: The source supports returning DirectPermissions.\n* DISCOVER_SCHEMA: The source supports discovering schemas for users and groups.\n* ENABLE The source supports reading if an account is enabled or disabled.\n* MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS.\n* NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform.\n* PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source.\n* SEARCH\n* TEMPLATE\n* UNLOCK: The source supports reading if an account is locked or unlocked.\n* UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets.\n* SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources.\n* PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation.\n* GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented.\n* SYNC_PROVISIONING: The source can provision accounts synchronously.\n* PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature.\n* CURRENT_PASSWORD: Some source types support verification of the current password\n* ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements.\n* ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts.\n* NO_AGGREGATION: A source that does not support aggregation.\n* GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation.\n* NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts.\n* NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups.\n* NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING.\n* NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING.\n* USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure.\n* PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning.\n* ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM\n* ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM\n* ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM",
        "example": [
          "PROVISIONING",
          "NO_PERMISSIONS_PROVISIONING",
          "GROUPS_HAVE_MEMBERS"
        ]
      },
      "MultiHostSources": {
        "type": "object",
        "title": "Multi Host Sources",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Source ID.",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "name": {
            "type": "string",
            "description": "Source's human-readable name.",
            "example": "My Source"
          },
          "description": {
            "type": "string",
            "description": "Source's human-readable description.",
            "example": "This is the Source."
          },
          "owner": {
            "description": "Reference to identity object who owns the source.",
            "type": "object",
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner identity's ID.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Owner identity's human-readable display name.",
                "example": "MyName"
              }
            }
          },
          "cluster": {
            "description": "Reference to the source's associated cluster.",
            "type": "object",
            "nullable": true,
            "required": [
              "name",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "CLUSTER"
                ],
                "example": "CLUSTER"
              },
              "id": {
                "type": "string",
                "description": "Cluster ID.",
                "example": "2c9180866166b5b0016167c32ef31a66"
              },
              "name": {
                "type": "string",
                "description": "Cluster's human-readable display name.",
                "example": "Corporate Cluster"
              }
            }
          },
          "accountCorrelationConfig": {
            "description": "Reference to account correlation config object.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "ACCOUNT_CORRELATION_CONFIG"
                ],
                "example": "ACCOUNT_CORRELATION_CONFIG"
              },
              "id": {
                "type": "string",
                "description": "Account correlation config ID.",
                "example": "2c9180855d191c59015d28583727245a"
              },
              "name": {
                "type": "string",
                "description": "Account correlation config's human-readable display name.",
                "example": "Directory [source-62867] Account Correlation"
              }
            }
          },
          "accountCorrelationRule": {
            "description": "Reference to a rule that can do COMPLEX correlation. Only use this rule when you can't use accountCorrelationConfig.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "managerCorrelationMapping": {
            "$ref": "#/components/schemas/ManagerCorrelationMapping"
          },
          "managerCorrelationRule": {
            "description": "Reference to the ManagerCorrelationRule. Only use this rule when a simple filter isn't sufficient.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "beforeProvisioningRule": {
            "description": "Rule that runs on the CCG and allows for customization of provisioning plans before the API calls the connector. ",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of object being referenced.",
                  "type": "string",
                  "enum": [
                    "CONNECTOR_SCHEMA"
                  ],
                  "example": "CONNECTOR_SCHEMA"
                },
                "id": {
                  "type": "string",
                  "description": "Schema ID.",
                  "example": "2c91808568c529c60168cca6f90c1777"
                },
                "name": {
                  "type": "string",
                  "description": "Schema's human-readable display name.",
                  "example": "MySchema"
                }
              }
            },
            "description": "List of references to schema objects.",
            "example": [
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232a",
                "name": "account"
              },
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232b",
                "name": "group"
              }
            ]
          },
          "passwordPolicies": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of object being referenced.",
                  "type": "string",
                  "enum": [
                    "PASSWORD_POLICY"
                  ],
                  "example": "PASSWORD_POLICY"
                },
                "id": {
                  "type": "string",
                  "description": "Policy ID.",
                  "example": "2c91808568c529c60168cca6f90c1777"
                },
                "name": {
                  "type": "string",
                  "description": "Policy's human-readable display name.",
                  "example": "My Password Policy"
                }
              }
            },
            "description": "List of references to the associated PasswordPolicy objects.",
            "example": [
              {
                "type": "PASSWORD_POLICY",
                "id": "2c9180855d191c59015d291ceb053980",
                "name": "Corporate Password Policy"
              },
              {
                "type": "PASSWORD_POLICY",
                "id": "2c9180855d191c59015d291ceb057777",
                "name": "Vendor Password Policy"
              }
            ]
          },
          "features": {
            "$ref": "#/components/schemas/SourceFeature"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of system being managed e.g. Multi-Host - Microsoft SQL Server, Workday, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`. ",
            "example": "Multi-Host - Microsoft SQL Server"
          },
          "connector": {
            "type": "string",
            "description": "Connector script name.",
            "example": "multihost-microsoft-sql-server"
          },
          "connectorClass": {
            "type": "string",
            "description": "Fully qualified name of the Java class that implements the connector interface.",
            "example": "sailpoint.connector.OpenConnectorAdapter"
          },
          "connectorAttributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Connector specific configuration. This configuration will differ from type to type.",
            "example": {
              "healthCheckTimeout": 30,
              "authSearchAttributes": [
                "cn",
                "uid",
                "mail"
              ]
            }
          },
          "deleteThreshold": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "description": "Number from 0 to 100 that specifies when to skip the delete phase.",
            "example": 10
          },
          "authoritative": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is referenced by an identity profile.",
            "default": false,
            "example": false
          },
          "managementWorkgroup": {
            "description": "Reference to management workgroup for the source.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "GOVERNANCE_GROUP"
                ],
                "example": "GOVERNANCE_GROUP"
              },
              "id": {
                "type": "string",
                "description": "Management workgroup ID.",
                "example": "2c91808568c529c60168cca6f90c2222"
              },
              "name": {
                "type": "string",
                "description": "Management workgroup's human-readable display name.",
                "example": "My Management Workgroup"
              }
            }
          },
          "healthy": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is healthy.",
            "default": false,
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT",
              "SOURCE_STATE_ERROR_CLUSTER",
              "SOURCE_STATE_ERROR_SOURCE",
              "SOURCE_STATE_ERROR_VA",
              "SOURCE_STATE_FAILURE_CLUSTER",
              "SOURCE_STATE_FAILURE_SOURCE",
              "SOURCE_STATE_HEALTHY",
              "SOURCE_STATE_UNCHECKED_CLUSTER",
              "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES",
              "SOURCE_STATE_UNCHECKED_SOURCE",
              "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS"
            ],
            "description": "Status identifier that gives specific information about why a source is or isn't healthy. ",
            "example": "SOURCE_STATE_HEALTHY"
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows when a source health check was last performed.",
            "example": "2021-09-28T15:48:29.3801666300Z"
          },
          "connectorId": {
            "type": "string",
            "description": "Connector ID",
            "example": "multihost-microsoft-sql-server"
          },
          "connectorName": {
            "type": "string",
            "description": "Name of the connector that was chosen during source creation.",
            "example": "Multi-Host Microsoft SQL Server"
          },
          "connectionType": {
            "type": "string",
            "description": "Type of connection (direct or file).",
            "example": "file"
          },
          "connectorImplementationId": {
            "type": "string",
            "description": "Connector implementation ID.",
            "example": "multihost-microsoft-sql-server"
          },
          "created": {
            "type": "string",
            "description": "Date-time when the source was created",
            "format": "date-time",
            "example": "2022-02-08T14:50:03.827Z"
          },
          "modified": {
            "type": "string",
            "description": "Date-time when the source was last modified.",
            "format": "date-time",
            "example": "2024-01-23T18:08:50.897Z"
          },
          "credentialProviderEnabled": {
            "type": "boolean",
            "description": "If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.",
            "default": false,
            "example": false
          },
          "category": {
            "type": "string",
            "nullable": true,
            "default": null,
            "description": "Source category (e.g. null, CredentialProvider).",
            "example": "CredentialProvider"
          }
        },
        "required": [
          "name",
          "owner",
          "connector",
          "id",
          "connectorName"
        ]
      },
      "SourceCreationErrors": {
        "type": "object",
        "title": "Source Creation Errors",
        "properties": {
          "multihostId": {
            "type": "string",
            "readOnly": true,
            "description": "Multi-Host Integration ID.",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "source_name": {
            "type": "string",
            "description": "Source's human-readable name.",
            "example": "My Source"
          },
          "source_error": {
            "type": "string",
            "description": "Source's human-readable description.",
            "example": "Source with internal name \"My Source [source]\" already exists."
          },
          "created": {
            "type": "string",
            "description": "Date-time when the source was created",
            "format": "date-time",
            "example": "2022-02-08T14:50:03.827Z"
          },
          "modified": {
            "type": "string",
            "description": "Date-time when the source was last modified.",
            "format": "date-time",
            "example": "2024-01-23T18:08:50.897Z"
          },
          "operation": {
            "type": "string",
            "nullable": true,
            "default": null,
            "description": "operation category (e.g. DELETE).",
            "example": "DELETE"
          }
        }
      },
      "MultiHostIntegrationsAggScheduleUpdate": {
        "allOf": [
          {
            "type": "object",
            "description": "Multi-Host Integration's aggregation schedule specification.",
            "required": [
              "multihostId",
              "aggregation_grp_id",
              "aggregation_grp_name",
              "aggregation_cron_schedule",
              "enableSchedule",
              "source_id_list"
            ],
            "properties": {
              "multihostId": {
                "description": "Multi-Host Integration ID. The ID must be unique",
                "type": "string",
                "example": "004091cb79b04636b88662afa50a4456"
              },
              "aggregation_grp_id": {
                "description": "Multi-Host Integration aggregation group ID",
                "type": "string",
                "example": "004091cb79b04636b88662afa50a4448"
              },
              "aggregation_grp_name": {
                "description": "Multi-Host Integration name",
                "type": "string",
                "example": "Multi-Host Integration aggregation group name"
              },
              "aggregation_cron_schedule": {
                "description": "Cron expression to schedule aggregation",
                "type": "string",
                "example": "0 0 0 * * ?"
              },
              "enableSchedule": {
                "description": "Boolean value for Multi-Host Integration aggregation schedule.\n\nThis specifies if scheduled aggregation is enabled or disabled.",
                "type": "boolean",
                "default": false,
                "example": false
              },
              "source_id_list": {
                "description": "Source IDs of the Multi-Host Integration",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "004091cb79b04636b88662afa50a4440",
                  "00af6d0d562a49b591c47be908740542"
                ]
              },
              "created": {
                "description": "Created date of Multi-Host Integration aggregation schedule",
                "type": "string",
                "format": "date-time",
                "example": "2024-01-23T18:08:50.897Z"
              },
              "modified": {
                "description": "Modified date of Multi-Host Integration aggregation schedule",
                "type": "string",
                "format": "date-time",
                "example": "2024-01-23T18:08:50.897Z"
              }
            }
          }
        ]
      },
      "NonEmployeeRecord": {
        "type": "object",
        "title": "Non Employee Record",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Non-Employee record id.",
            "example": "ac10e21c-931c-1ef2-8193-1c51e7ff0003"
          },
          "accountName": {
            "type": "string",
            "description": "Requested identity account name.",
            "example": "william.smith"
          },
          "firstName": {
            "type": "string",
            "description": "Non-Employee's first name.",
            "example": "William"
          },
          "lastName": {
            "type": "string",
            "description": "Non-Employee's last name.",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "Non-Employee's email.",
            "example": "william.smith@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Non-Employee's phone.",
            "example": "5125555555"
          },
          "manager": {
            "type": "string",
            "description": "The account ID of a valid identity to serve as this non-employee's manager.",
            "example": "jane.doe"
          },
          "sourceId": {
            "type": "string",
            "description": "Non-Employee's source id.",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional attributes for a non-employee. Up to 10 custom attributes can be added.",
            "example": {
              "description": "Auditing"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Non-Employee employment start date.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Non-Employee employment end date.",
            "example": "2020-08-23T18:52:59.162Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was last modified.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was created.",
            "example": "2019-08-23T18:40:35.772Z"
          }
        }
      },
      "NonEmployeeRequestBody": {
        "type": "object",
        "title": "Non Employee Request Body",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Requested identity account name.",
            "example": "william.smith"
          },
          "firstName": {
            "type": "string",
            "description": "Non-Employee's first name.",
            "example": "William"
          },
          "lastName": {
            "type": "string",
            "description": "Non-Employee's last name.",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "Non-Employee's email.",
            "example": "william.smith@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Non-Employee's phone.",
            "example": "5125555555"
          },
          "manager": {
            "type": "string",
            "description": "The account ID of a valid identity to serve as this non-employee's manager.",
            "example": "jane.doe"
          },
          "sourceId": {
            "type": "string",
            "description": "Non-Employee's source id.",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional attributes for a non-employee. Up to 10 custom attributes can be added.",
            "example": {
              "description": "Auditing"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Non-Employee employment start date.",
            "example": "2020-03-24T00:00:00-05:00"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Non-Employee employment end date.",
            "example": "2021-03-25T00:00:00-05:00"
          }
        },
        "required": [
          "accountName",
          "firstName",
          "lastName",
          "email",
          "phone",
          "manager",
          "sourceId",
          "startDate",
          "endDate"
        ]
      },
      "NonEmployeeSourceLite": {
        "type": "object",
        "title": "Non Employee Source Lite",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Non-Employee source id.",
            "example": "a0303682-5e4a-44f7-bdc2-6ce6112549c1"
          },
          "sourceId": {
            "type": "string",
            "description": "Source Id associated with this non-employee source.",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Source name associated with this non-employee source.",
            "example": "Retail"
          },
          "description": {
            "type": "string",
            "description": "Source description associated with this non-employee source.",
            "example": "Source description"
          }
        }
      },
      "IdentityReferenceWithId": {
        "type": "object",
        "title": "Identity Reference With Id",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DtoType"
          },
          "id": {
            "type": "string",
            "description": "Identity id",
            "example": "5168015d32f890ca15812c9180835d2e"
          }
        }
      },
      "ApprovalStatus": {
        "type": "string",
        "enum": [
          "APPROVED",
          "REJECTED",
          "PENDING",
          "NOT_READY",
          "CANCELLED"
        ],
        "description": "Enum representing the non-employee request approval status",
        "example": "APPROVED"
      },
      "NonEmployeeApprovalItemBase": {
        "type": "object",
        "title": "Non Employee Approval Item Base",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Non-Employee approval item id",
            "example": "2c1e388b-1e55-4b0a-ab5c-897f1204159c"
          },
          "approver": {
            "$ref": "#/components/schemas/IdentityReferenceWithId",
            "description": "Reference to the associated Identity"
          },
          "accountName": {
            "type": "string",
            "description": "Requested identity account name",
            "example": "test.account"
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/ApprovalStatus"
          },
          "approvalOrder": {
            "type": "number",
            "description": "Approval order",
            "example": 1,
            "format": "float"
          },
          "comment": {
            "type": "string",
            "description": "comment of approver",
            "example": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was last modified.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the request was created.",
            "example": "2019-08-23T18:40:35.772Z"
          }
        }
      },
      "NonEmployeeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeSourceLite"
          },
          {
            "type": "object",
            "properties": {
              "accountName": {
                "type": "string",
                "description": "Requested identity account name.",
                "example": "william.smith"
              },
              "firstName": {
                "type": "string",
                "description": "Non-Employee's first name.",
                "example": "William"
              },
              "lastName": {
                "type": "string",
                "description": "Non-Employee's last name.",
                "example": "Smith"
              },
              "email": {
                "type": "string",
                "description": "Non-Employee's email.",
                "example": "william.smith@example.com"
              },
              "phone": {
                "type": "string",
                "description": "Non-Employee's phone.",
                "example": "5125555555"
              },
              "manager": {
                "type": "string",
                "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                "example": "jane.doe"
              },
              "nonEmployeeSource": {
                "$ref": "#/components/schemas/NonEmployeeSourceLite"
              },
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional attributes for a non-employee. Up to 10 custom attributes can be added.",
                "example": {
                  "description": "Auditing"
                }
              },
              "approvalItems": {
                "description": "List of approval item for the request",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonEmployeeApprovalItemBase"
                }
              },
              "approvalStatus": {
                "$ref": "#/components/schemas/ApprovalStatus"
              },
              "comment": {
                "type": "string",
                "description": "Comment of requester",
                "example": "approved"
              },
              "completionDate": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was completely approved.",
                "example": "2020-03-24T11:11:41.139-05:00"
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Non-Employee employment start date.",
                "example": "2020-03-24T00:00:00-05:00"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "description": "Non-Employee employment end date.",
                "example": "2021-03-25T00:00:00-05:00"
              },
              "modified": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was last modified.",
                "example": "2020-03-24T11:11:41.139-05:00"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was created.",
                "example": "2020-03-24T11:11:41.139-05:00"
              }
            }
          }
        ]
      },
      "NonEmployeeRequestSummary": {
        "type": "object",
        "title": "Non Employee Request Summary",
        "properties": {
          "approved": {
            "type": "number",
            "description": "The number of approved non-employee requests on all sources that *requested-for* user manages."
          },
          "rejected": {
            "type": "number",
            "description": "The number of rejected non-employee requests on all sources that *requested-for* user manages."
          },
          "pending": {
            "type": "number",
            "description": "The number of pending non-employee requests on all sources that *requested-for* user manages."
          },
          "nonEmployeeCount": {
            "type": "number",
            "description": "The number of non-employee records on all sources that *requested-for* user manages."
          }
        }
      },
      "NonEmployeeSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeSourceLite"
          },
          {
            "type": "object",
            "properties": {
              "approvers": {
                "description": "List of approvers",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityReferenceWithId"
                }
              },
              "accountManagers": {
                "description": "List of account managers",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityReferenceWithId"
                }
              },
              "modified": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was last modified.",
                "example": "2019-08-23T18:52:59.162Z"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was created.",
                "example": "2019-08-23T18:40:35.772Z"
              },
              "nonEmployeeCount": {
                "nullable": true,
                "type": "integer",
                "description": "The number of non-employee records on all sources that *requested-for* user manages.",
                "example": 2,
                "format": "int32"
              }
            }
          }
        ]
      },
      "NonEmployeeSourceWithNECount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeSource"
          },
          {
            "type": "object",
            "properties": {
              "nonEmployeeCount": {
                "type": "integer",
                "example": 2,
                "format": "int32",
                "description": "Number of non-employee records associated with this source. This value is 'null' by default. To get the non-employee count, you must set the `non-employee-count` flag in your request to 'true'."
              }
            }
          }
        ]
      },
      "NonEmployeeIdnUserRequest": {
        "type": "object",
        "title": "Non Employee Idn User Request",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Identity id.",
            "example": "2c91808570313110017040b06f344ec9"
          }
        },
        "required": [
          "id"
        ]
      },
      "NonEmployeeSourceRequestBody": {
        "type": "object",
        "title": "Non Employee Source Request Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of non-employee source.",
            "example": "Retail"
          },
          "description": {
            "type": "string",
            "description": "Description of non-employee source.",
            "example": "Source description"
          },
          "owner": {
            "description": "Owner of non-employee source.",
            "$ref": "#/components/schemas/NonEmployeeIdnUserRequest"
          },
          "managementWorkgroup": {
            "type": "string",
            "description": "The ID for the management workgroup that contains source sub-admins",
            "example": "123299"
          },
          "approvers": {
            "description": "List of approvers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonEmployeeIdnUserRequest"
            },
            "maxItems": 3
          },
          "accountManagers": {
            "description": "List of account managers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonEmployeeIdnUserRequest"
            },
            "maxItems": 10
          }
        },
        "required": [
          "owner",
          "name",
          "description"
        ]
      },
      "NonEmployeeSourceWithCloudExternalId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeSource"
          },
          {
            "type": "object",
            "properties": {
              "cloudExternalId": {
                "type": "string",
                "description": "Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.",
                "example": "99999"
              }
            }
          }
        ]
      },
      "NonEmployeeBulkUploadJob": {
        "type": "object",
        "title": "Non Employee Bulk Upload Job",
        "properties": {
          "id": {
            "type": "string",
            "description": "The bulk upload job's ID. (UUID)",
            "example": "2c91808568c529c60168cca6f90cffff"
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the source to bulk-upload non-employees to. (UUID)",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time the job was submitted.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time that the job was last updated.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED",
              "ERROR"
            ],
            "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\n",
            "example": "PENDING"
          }
        }
      },
      "NonEmployeeBulkUploadStatus": {
        "type": "object",
        "title": "Non Employee Bulk Upload Status",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED",
              "ERROR",
              null
            ],
            "description": "Returns the following values indicating the progress or result of the bulk upload job.\n\"PENDING\" means the job is queued and waiting to be processed.\n\"IN_PROGRESS\" means the job is currently being processed.\n\"COMPLETED\" means the job has been completed without any errors.\n\"ERROR\" means the job failed to process with errors.\nnull means job has been submitted to the source.\n",
            "example": "PENDING"
          }
        }
      },
      "NonEmployeeRequestLite": {
        "type": "object",
        "title": "Non Employee Request Lite",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Non-Employee request id.",
            "example": "ac10e21c-931c-1ef2-8193-1c51e7ff0003"
          },
          "requester": {
            "$ref": "#/components/schemas/IdentityReferenceWithId",
            "example": {
              "type": "IDENTITY",
              "id": "2c9180866166b5b0016167c32ef31a66",
              "name": "William Smith"
            }
          }
        }
      },
      "NonEmployeeApprovalItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeApprovalItemBase"
          },
          {
            "type": "object",
            "properties": {
              "nonEmployeeRequest": {
                "$ref": "#/components/schemas/NonEmployeeRequestLite"
              }
            }
          }
        ]
      },
      "NonEmployeeSchemaAttributeType": {
        "type": "string",
        "enum": [
          "TEXT",
          "DATE",
          "IDENTITY",
          "PHONE",
          "EMAIL"
        ],
        "description": "Enum representing the type of data a schema attribute accepts.",
        "example": "TEXT"
      },
      "NonEmployeeSchemaAttribute": {
        "type": "object",
        "title": "Non Employee Schema Attribute",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "example": "ac110005-7156-1150-8171-5b292e3e0084",
            "description": "Schema Attribute Id"
          },
          "system": {
            "type": "boolean",
            "description": "True if this schema attribute is mandatory on all non-employees sources.",
            "default": false,
            "example": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "When the schema attribute was last modified.",
            "example": "2019-08-23T18:52:59.162Z"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the schema attribute was created.",
            "example": "2019-08-23T18:40:35.772Z"
          },
          "type": {
            "$ref": "#/components/schemas/NonEmployeeSchemaAttributeType"
          },
          "label": {
            "type": "string",
            "description": "Label displayed on the UI for this schema attribute.",
            "example": "Account Name"
          },
          "technicalName": {
            "type": "string",
            "description": "The technical name of the attribute. Must be unique per source.",
            "example": "account.name"
          },
          "helpText": {
            "type": "string",
            "description": "help text displayed by UI.",
            "example": "The unique identifier for the account",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "description": "Hint text that fills UI box.",
            "example": "Enter a unique user name for this account.",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "If true, the schema attribute is required for all non-employees in the source",
            "example": true,
            "default": false
          }
        },
        "required": [
          "type",
          "technicalName",
          "label"
        ]
      },
      "NonEmployeeSourceLiteWithSchemaAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeSourceLite"
          },
          {
            "type": "object",
            "properties": {
              "schemaAttributes": {
                "description": "List of schema attributes associated with this non-employee source.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonEmployeeSchemaAttribute"
                }
              }
            }
          }
        ]
      },
      "NonEmployeeRequestWithoutApprovalItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeRequestLite"
          },
          {
            "type": "object",
            "properties": {
              "accountName": {
                "type": "string",
                "description": "Requested identity account name.",
                "example": "william.smith"
              },
              "firstName": {
                "type": "string",
                "description": "Non-Employee's first name.",
                "example": "William"
              },
              "lastName": {
                "type": "string",
                "description": "Non-Employee's last name.",
                "example": "Smith"
              },
              "email": {
                "type": "string",
                "description": "Non-Employee's email.",
                "example": "william.smith@example.com"
              },
              "phone": {
                "type": "string",
                "description": "Non-Employee's phone.",
                "example": "5125555555"
              },
              "manager": {
                "type": "string",
                "description": "The account ID of a valid identity to serve as this non-employee's manager.",
                "example": "jane.doe"
              },
              "nonEmployeeSource": {
                "$ref": "#/components/schemas/NonEmployeeSourceLiteWithSchemaAttributes"
              },
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Additional attributes for a non-employee. Up to 10 custom attributes can be added.",
                "example": {
                  "description": "Auditing"
                }
              },
              "approvalStatus": {
                "$ref": "#/components/schemas/ApprovalStatus"
              },
              "comment": {
                "type": "string",
                "description": "Comment of requester",
                "example": "approved"
              },
              "completionDate": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was completely approved.",
                "example": "2020-03-24T11:11:41.139-05:00"
              },
              "startDate": {
                "type": "string",
                "format": "date",
                "description": "Non-Employee employment start date.",
                "example": "2020-03-24"
              },
              "endDate": {
                "type": "string",
                "format": "date",
                "description": "Non-Employee employment end date.",
                "example": "2021-03-25"
              },
              "modified": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was last modified.",
                "example": "2020-03-24T11:11:41.139-05:00"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "When the request was created.",
                "example": "2020-03-24T11:11:41.139-05:00"
              }
            }
          }
        ]
      },
      "NonEmployeeApprovalItemDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonEmployeeApprovalItemBase"
          },
          {
            "type": "object",
            "properties": {
              "nonEmployeeRequest": {
                "$ref": "#/components/schemas/NonEmployeeRequestWithoutApprovalItem",
                "description": "Non-Employee request associated to this approval"
              }
            }
          }
        ]
      },
      "NonEmployeeApprovalDecision": {
        "type": "object",
        "title": "Non Employee Approval Decision",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment on the approval item.",
            "maxLength": 4000
          }
        }
      },
      "NonEmployeeRejectApprovalDecision": {
        "type": "object",
        "title": "Non Employee Reject Approval Decision",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment on the approval item.",
            "maxLength": 4000
          }
        },
        "required": [
          "comment"
        ]
      },
      "NonEmployeeApprovalSummary": {
        "type": "object",
        "title": "Non Employee Approval Summary",
        "properties": {
          "approved": {
            "type": "number",
            "description": "The number of approved non-employee approval requests."
          },
          "pending": {
            "type": "number",
            "description": "The number of pending non-employee approval requests."
          },
          "rejected": {
            "type": "number",
            "description": "The number of rejected non-employee approval requests."
          }
        }
      },
      "NonEmployeeSchemaAttributeBody": {
        "type": "object",
        "title": "Non Employee Schema Attribute Body",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the attribute. Only type 'TEXT' is supported for custom attributes.",
            "example": "TEXT"
          },
          "label": {
            "type": "string",
            "description": "Label displayed on the UI for this schema attribute.",
            "example": "Account Name"
          },
          "technicalName": {
            "type": "string",
            "description": "The technical name of the attribute. Must be unique per source.",
            "example": "account.name"
          },
          "helpText": {
            "type": "string",
            "description": "help text displayed by UI.",
            "example": "The unique identifier for the account"
          },
          "placeholder": {
            "type": "string",
            "description": "Hint text that fills UI box.",
            "example": "Enter a unique user name for this account."
          },
          "required": {
            "type": "boolean",
            "description": "If true, the schema attribute is required for all non-employees in the source",
            "example": true
          }
        },
        "required": [
          "type",
          "technicalName",
          "label"
        ]
      },
      "ManagedClientType": {
        "description": "Managed Client type",
        "type": "string",
        "example": "CCG",
        "nullable": true,
        "enum": [
          "CCG",
          "VA",
          "INTERNAL",
          "IIQ_HARVESTER",
          null
        ]
      },
      "ManagedClientStatusEnum": {
        "type": "string",
        "enum": [
          "NORMAL",
          "UNDEFINED",
          "NOT_CONFIGURED",
          "CONFIGURING",
          "WARNING",
          "ERROR",
          "FAILED"
        ]
      },
      "ManagedClientStatusAggResponse": {
        "description": "Managed Client Status",
        "type": "object",
        "title": "Managed Client Status Agg Response",
        "required": [
          "body",
          "status",
          "type",
          "timestamp"
        ],
        "properties": {
          "body": {
            "description": "ManagedClientStatus body information",
            "type": "object",
            "example": {
              "body": {
                "id": "1528",
                "clientId": "1528",
                "clusterId": "1533",
                "orgType": "test",
                "vaDownloadUrl": "https://sptcbu-va-images.s3.amazonaws.com/va-latest.zip",
                "clusterJobCount": 1,
                "configuration": {
                  "clusterType": "sqsCluster",
                  "clusterExternalId": "2c91808876dd79120176f758af765c58",
                  "debug": "false",
                  "failureThreshold": "0",
                  "gmtOffset": "-6",
                  "scheduleUpgrade": "false",
                  "va_version": "va-megapod-useast1-595-1627543540",
                  "jobType": "VA_UPGRADE",
                  "cookbook": "va-megapod-useast1-595-1627543540"
                },
                "connectorServices": [
                  {
                    "id": "540696",
                    "name": "EndToEnd-ADSource",
                    "connector_host": "host.example.com",
                    "connector_port": "389",
                    "connector_(boolean)useSSL": false,
                    "connectorFileUploadHistory": null
                  },
                  {
                    "id": "540698",
                    "name": "EndToEnd-AzureADSource",
                    "connector_host": null,
                    "connector_port": null,
                    "connector_(boolean)useSSL": null,
                    "connectorFileUploadHistory": null
                  },
                  {
                    "id": "540710",
                    "name": "EndToEnd-OpenLDAP",
                    "connector_host": "10.0.2.64",
                    "connector_port": "389",
                    "connector_(boolean)useSSL": false,
                    "connectorFileUploadHistory": null
                  },
                  {
                    "id": "540713",
                    "name": "Dynamic-ADSource",
                    "connector_host": "host.example.com",
                    "connector_port": "389",
                    "connector_(boolean)useSSL": false,
                    "connectorFileUploadHistory": null
                  },
                  {
                    "id": "540716",
                    "name": "EndToEnd-JdbcADSource",
                    "connector_host": "10.0.5.187",
                    "connector_port": "389",
                    "connector_(boolean)useSSL": false,
                    "connectorFileUploadHistory": null
                  },
                  {
                    "id": "540717",
                    "name": "EndToEnd-JdbcSource",
                    "connector_host": null,
                    "connector_port": null,
                    "connector_(boolean)useSSL": null,
                    "connectorFileUploadHistory": [
                      {
                        "serviceId": "540717",
                        "date": "2021-02-05T22:58:15Z",
                        "file": "temp7081703651350031905mysql-connector-java-8.0.11.jar"
                      }
                    ]
                  }
                ],
                "jobs": [
                  {
                    "uuid": "872b622f-5ab5-4836-9172-e3bb77f05b2c",
                    "cookbook": "872b622f-5ab5-4836-9172-e3bb77f05b2c",
                    "state": "FINISHED",
                    "type": "VA_UPGRADE",
                    "targetId": "1528",
                    "managedProcessConfiguration": {
                      "charon": {
                        "version": "345",
                        "path": "sailpoint/charon",
                        "description": null,
                        "dependencies": null
                      },
                      "ccg": {
                        "version": "415_583_79.0.0",
                        "path": "sailpoint/ccg",
                        "description": null,
                        "dependencies": null
                      },
                      "toolbox": {
                        "version": "6",
                        "path": "sailpoint/toolbox",
                        "description": null,
                        "dependencies": null
                      },
                      "fluent": {
                        "version": "50",
                        "path": "fluent/va",
                        "description": null,
                        "dependencies": null
                      },
                      "va_agent": {
                        "version": "89",
                        "path": "sailpoint/va_agent",
                        "description": null,
                        "dependencies": null
                      }
                    }
                  }
                ],
                "queue": {
                  "name": "megapod-useast1-denali-lwt-cluster-1533",
                  "region": "us-east-1"
                },
                "maintenance": {
                  "window": "true",
                  "windowStartTime": "2021-07-29T00:00:00Z",
                  "windowClusterTime": "2021-07-29T01:35:24Z",
                  "windowFinishTime": "2021-07-29T04:00:00Z"
                }
              }
            }
          },
          "status": {
            "description": "status of the Managed Client",
            "$ref": "#/components/schemas/ManagedClientStatusEnum"
          },
          "type": {
            "description": "type of the Managed Client",
            "$ref": "#/components/schemas/ManagedClientType"
          },
          "timestamp": {
            "description": "timestamp on the Client Status update",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.000000Z"
          }
        }
      },
      "ManagedClusterTypes": {
        "type": "string",
        "description": "The Type of Cluster",
        "example": "idn",
        "enum": [
          "idn",
          "iai"
        ]
      },
      "ManagedClusterKeyPair": {
        "description": "Managed Cluster key pair for Cluster",
        "type": "object",
        "title": "Managed Cluster Key Pair",
        "properties": {
          "publicKey": {
            "nullable": true,
            "description": "ManagedCluster publicKey",
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----******-----END PUBLIC KEY-----"
          },
          "publicKeyThumbprint": {
            "nullable": true,
            "description": "ManagedCluster publicKeyThumbprint",
            "type": "string",
            "example": "6CMlaJIV44-xJxcB3CJBjDUUn54"
          },
          "publicKeyCertificate": {
            "nullable": true,
            "description": "ManagedCluster publicKeyCertificate",
            "type": "string",
            "example": "-----BEGIN CERTIFICATE-----****-----END CERTIFICATE-----"
          }
        }
      },
      "ManagedClusterQueue": {
        "description": "Managed Cluster key pair for Cluster",
        "type": "object",
        "title": "Managed Cluster Queue",
        "properties": {
          "name": {
            "description": "ManagedCluster queue name",
            "type": "string",
            "example": "megapod-useast1-denali-lwt-cluster-1533"
          },
          "region": {
            "description": "ManagedCluster queue aws region",
            "type": "string",
            "example": "us-east-1"
          }
        }
      },
      "ManagedClusterAttributes": {
        "description": "Managed Cluster Attributes for Cluster Configuration. Supported Cluster Types [sqsCluster, spConnectCluster]",
        "type": "object",
        "title": "Managed Cluster Attributes",
        "properties": {
          "queue": {
            "description": "ManagedCluster keystore for sqsCluster type",
            "$ref": "#/components/schemas/ManagedClusterQueue"
          },
          "keystore": {
            "nullable": true,
            "description": "ManagedCluster keystore for spConnectCluster type",
            "type": "string",
            "example": "/u3+7QAAAAIAAAABAAAAAQAvL3Byb3h5LWNsdXN0ZXIvMmM5MTgwODc3Yjg3MW"
          }
        }
      },
      "ManagedClusterRedis": {
        "description": "Managed Cluster Redis Configuration",
        "type": "object",
        "title": "Managed Cluster Redis",
        "properties": {
          "redisHost": {
            "description": "ManagedCluster redisHost",
            "type": "string",
            "example": "megapod-useast1-shared-redis.cloud.sailpoint.com"
          },
          "redisPort": {
            "description": "ManagedCluster redisPort",
            "type": "integer",
            "format": "int32",
            "example": 6379
          }
        }
      },
      "StandardLevel": {
        "description": "Standard Log4j log level",
        "type": "string",
        "example": "INFO",
        "enum": [
          "OFF",
          "FATAL",
          "ERROR",
          "WARN",
          "INFO",
          "DEBUG",
          "TRACE"
        ]
      },
      "LogLevelSpec": {
        "description": "Mapping of identifiers to Standard Log Level values",
        "type": "object",
        "title": "Log Level Spec",
        "example": "INFO",
        "additionalProperties": {
          "default": "INFO",
          "example": "TRACE",
          "$ref": "#/components/schemas/StandardLevel"
        }
      },
      "ClientLogConfiguration": {
        "description": "Client Runtime Logging Configuration",
        "nullable": true,
        "type": "object",
        "title": "Client Log Configuration",
        "required": [
          "durationMinutes",
          "rootLevel"
        ],
        "properties": {
          "clientId": {
            "description": "Log configuration's client ID",
            "type": "string",
            "example": "aClientId"
          },
          "durationMinutes": {
            "description": "Duration in minutes for log configuration to remain in effect before resetting to defaults",
            "type": "integer",
            "format": "int32",
            "example": 120,
            "minimum": 5,
            "maximum": 1440
          },
          "expiration": {
            "description": "Expiration date-time of the log configuration request",
            "example": "2020-12-15T19:13:36.079Z",
            "type": "string",
            "format": "date-time"
          },
          "rootLevel": {
            "description": "Root log level to apply, the default level for all logs. For more information about logging levels, refer to the \"Logging Levels\" table in [Enabling Connector Logging in IdentityNow](https://community.sailpoint.com/t5/IdentityNow-Articles/Enabling-Connector-Logging-in-IdentityNow/ta-p/188107).",
            "default": "INFO",
            "example": "INFO",
            "$ref": "#/components/schemas/StandardLevel"
          },
          "logLevels": {
            "description": "Map of log level by key. The keys are logging classes, and the values are logging levels. To see the available connectors and their logging classes, refer to the \"Logging Classes\" table in [Enabling Connector Logging in IdentityNow](https://community.sailpoint.com/t5/IdentityNow-Articles/Enabling-Connector-Logging-in-IdentityNow/ta-p/188107).",
            "example": {
              "sailpoint.connector.ADLDAPConnector": "INFO"
            },
            "$ref": "#/components/schemas/LogLevelSpec"
          }
        }
      },
      "ManagedCluster": {
        "description": "Managed Cluster",
        "type": "object",
        "title": "Managed Cluster",
        "required": [
          "id",
          "clientType",
          "ccgVersion"
        ],
        "properties": {
          "id": {
            "description": "ManagedCluster ID",
            "type": "string",
            "example": "aClusterId"
          },
          "name": {
            "description": "ManagedCluster name",
            "type": "string",
            "example": "Managed Cluster Name"
          },
          "pod": {
            "description": "ManagedCluster pod",
            "type": "string",
            "example": "megapod-useast1"
          },
          "org": {
            "description": "ManagedCluster org",
            "type": "string",
            "example": "denali"
          },
          "type": {
            "description": "The Type of Cluster",
            "example": "idn",
            "nullable": false,
            "$ref": "#/components/schemas/ManagedClusterTypes"
          },
          "configuration": {
            "description": "ManagedProcess configuration map",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "example": {
              "clusterExternalId": "externalId",
              "ccgVersion": "77.0.0"
            }
          },
          "keyPair": {
            "description": "key pair for the ManagedCluster",
            "$ref": "#/components/schemas/ManagedClusterKeyPair"
          },
          "attributes": {
            "description": "Specific Attributes for Configuring a ManagedCluster by Type",
            "$ref": "#/components/schemas/ManagedClusterAttributes"
          },
          "description": {
            "description": "ManagedCluster description",
            "type": "string",
            "example": "A short description of the managed cluster."
          },
          "redis": {
            "description": "Redis configuration for the ManagedCluster",
            "$ref": "#/components/schemas/ManagedClusterRedis"
          },
          "clientType": {
            "description": "type of client for the ManagedCluster",
            "$ref": "#/components/schemas/ManagedClientType"
          },
          "ccgVersion": {
            "description": "CCG version used by the ManagedCluster",
            "type": "string",
            "example": "v01"
          },
          "pinnedConfig": {
            "description": "boolean flag indiacting whether or not the cluster configuration is pinned",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "logConfiguration": {
            "description": "client log configuration for the cluster",
            "example": "{ \"rootLevel\": \"WARN\", \"logLevels\": { \"foobar\": \"WARN\" } }",
            "$ref": "#/components/schemas/ClientLogConfiguration"
          },
          "operational": {
            "description": "Whether or not the cluster is operational or not",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "status": {
            "description": "Cluster status",
            "type": "string",
            "example": "NORMAL"
          },
          "publicKeyCertificate": {
            "nullable": true,
            "description": "Public key certificate",
            "type": "string",
            "example": "-----BEGIN CERTIFICATE-----TCCAb2gAwIBAgIBADANBgkqhkiG9w0BAQsFADAuMQ0wCwYDVQQD-----END CERTIFICATE-----"
          },
          "publicKeyThumbprint": {
            "nullable": true,
            "description": "Public key thumbprint",
            "type": "string",
            "example": "obc6pLiulGbtZ"
          },
          "publicKey": {
            "nullable": true,
            "description": "Public key",
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----jANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3WgnsxP52MDgBTfHR+5n4-----END PUBLIC KEY-----"
          },
          "alertKey": {
            "description": "Key describing any immediate cluster alerts",
            "type": "string",
            "example": "LIMITED_RESOURCES"
          },
          "clientIds": {
            "type": "array",
            "description": "List of clients in a cluster",
            "items": {
              "type": "string"
            },
            "example": [
              "1244",
              "1245"
            ]
          },
          "serviceCount": {
            "description": "Number of services bound to a cluster",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "example": 6
          },
          "ccId": {
            "description": "CC ID only used in calling CC, will be removed without notice when Migration to CEGS is finished",
            "type": "string",
            "default": "0",
            "example": "1533"
          },
          "createdAt": {
            "description": "The date/time this cluster was created",
            "example": "2023-08-04T20:48:01.865Z",
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "The date/time this cluster was last updated",
            "example": "2023-08-04T20:48:01.865Z",
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MailFromAttributesDto": {
        "type": "object",
        "title": "Mail From Attributes Dto",
        "properties": {
          "identity": {
            "type": "string",
            "example": "BobSmith@sailpoint.com",
            "description": "The identity or domain address"
          },
          "mailFromDomain": {
            "type": "string",
            "example": "example.sailpoint.com",
            "description": "The new MAIL FROM domain of the identity. Must be a subdomain of the identity."
          }
        },
        "description": "MAIL FROM attributes for a domain / identity"
      },
      "MailFromAttributes": {
        "type": "object",
        "title": "Mail From Attributes",
        "properties": {
          "identity": {
            "type": "string",
            "example": "bob.smith@sailpoint.com",
            "description": "The email identity"
          },
          "mailFromDomain": {
            "type": "string",
            "example": "foo.sailpoint.com",
            "description": "The name of a domain that an email identity uses as a custom MAIL FROM domain"
          },
          "mxRecord": {
            "type": "string",
            "example": "10 feedback-smtp.us-east-1.amazonses.com",
            "description": "MX record that is required in customer's DNS to allow the domain to receive bounce and complaint notifications that email providers send you"
          },
          "txtRecord": {
            "type": "string",
            "example": "v=spf1 include:amazonses.com ~all",
            "description": "TXT record that is required in customer's DNS in order to prove that Amazon SES is authorized to send email from your domain"
          },
          "mailFromDomainStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED"
            ],
            "example": "PENDING",
            "description": "The current status of the MAIL FROM verification"
          }
        },
        "description": "MAIL FROM attributes for a domain / identity"
      },
      "MfaOktaConfig": {
        "type": "object",
        "title": "Mfa Okta Config",
        "properties": {
          "mfaMethod": {
            "type": "string",
            "nullable": true,
            "description": "Mfa method name",
            "example": "okta-verify"
          },
          "enabled": {
            "type": "boolean",
            "description": "If MFA method is enabled.",
            "default": false,
            "example": true
          },
          "host": {
            "type": "string",
            "nullable": true,
            "description": "The server host name or IP address of the MFA provider.",
            "example": "example.com"
          },
          "accessKey": {
            "type": "string",
            "nullable": true,
            "description": "The secret key for authenticating requests to the MFA provider.",
            "example": "qw123Y3QlA5UqocYpdU3rEkzrK2D497y"
          },
          "identityAttribute": {
            "type": "string",
            "nullable": true,
            "description": "Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.",
            "example": "email"
          }
        }
      },
      "MfaDuoConfig": {
        "type": "object",
        "title": "Mfa Duo Config",
        "properties": {
          "mfaMethod": {
            "type": "string",
            "nullable": true,
            "description": "Mfa method name",
            "example": "duo-web"
          },
          "enabled": {
            "type": "boolean",
            "description": "If MFA method is enabled.",
            "default": false,
            "example": true
          },
          "host": {
            "type": "string",
            "nullable": true,
            "description": "The server host name or IP address of the MFA provider.",
            "example": "example.com"
          },
          "accessKey": {
            "type": "string",
            "nullable": true,
            "description": "The secret key for authenticating requests to the MFA provider.",
            "example": "qw123Y3QlA5UqocYpdU3rEkzrK2D497y"
          },
          "identityAttribute": {
            "type": "string",
            "nullable": true,
            "description": "Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.",
            "example": "email"
          },
          "configProperties": {
            "description": "A map with additional config properties for the given MFA method - duo-web.",
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "example": {
              "skey": "qwERttyZx1CdlQye2Vwtbsjr3HKddy4BAiCXjc5x",
              "ikey": "Q123WE45R6TY7890ZXCV"
            }
          }
        }
      },
      "KbaQuestion": {
        "description": "KBA Configuration",
        "type": "object",
        "title": "Kba Question",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "description": "KBA Question Id",
            "example": "143cfd3b-c23f-426b-ae5f-d3db06fa5919"
          },
          "text": {
            "type": "string",
            "nullable": false,
            "description": "KBA Question description",
            "example": "[{\"text\":\"Nouvelle question MFA -1 ?\",\"locale\":\"fr\"},{\"text\":\"MFA new question -1 ?\",\"locale\":\"\"}]"
          },
          "hasAnswer": {
            "type": "boolean",
            "nullable": false,
            "description": "Denotes whether the KBA question has an answer configured for any user in the tenant",
            "example": true
          },
          "numAnswers": {
            "type": "integer",
            "format": "int32",
            "nullable": false,
            "description": "Denotes the number of KBA configurations for this question",
            "example": 5
          }
        },
        "required": [
          "id",
          "text",
          "hasAnswer",
          "numAnswers"
        ]
      },
      "KbaAnswerRequestItem": {
        "type": "object",
        "title": "Kba Answer Request Item",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "description": "Question Id",
            "example": "c54fee53-2d63-4fc5-9259-3e93b9994135"
          },
          "answer": {
            "type": "string",
            "nullable": false,
            "description": "An answer for the KBA question",
            "example": "Your answer"
          }
        },
        "required": [
          "id",
          "answer"
        ]
      },
      "KbaAnswerResponseItem": {
        "type": "object",
        "title": "Kba Answer Response Item",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "description": "Question Id",
            "example": "c54fee53-2d63-4fc5-9259-3e93b9994135"
          },
          "question": {
            "type": "string",
            "nullable": false,
            "description": "Question description",
            "example": "[{\"text\":\"Nouvelle question MFA -1 ?\",\"locale\":\"fr\"},{\"text\":\"MFA new question -1 ?\",\"locale\":\"\"}]"
          },
          "hasAnswer": {
            "type": "boolean",
            "nullable": false,
            "description": "Denotes whether the KBA question has an answer configured for the current user",
            "example": true
          }
        },
        "required": [
          "id",
          "question",
          "hasAnswer"
        ]
      },
      "MfaConfigTestResponse": {
        "description": "Response model for configuration test of a given MFA method",
        "type": "object",
        "title": "Mfa Config Test Response",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ],
            "description": "The configuration test result.",
            "example": "SUCCESS",
            "readOnly": true
          },
          "error": {
            "type": "string",
            "example": "MFA Method is disabled.",
            "description": "The error message to indicate the failure of configuration test.",
            "readOnly": true
          }
        }
      },
      "OktaVerificationRequest": {
        "type": "object",
        "title": "Okta Verification Request",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": false,
            "description": "User identifier for Verification request. The value of the user's attribute.",
            "example": "example@mail.com"
          }
        },
        "required": [
          "userId"
        ]
      },
      "VerificationResponse": {
        "type": "object",
        "title": "Verification Response",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "description": "The verificationPollRequest request ID",
            "example": "089899f13a8f4da7824996191587bab9"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED",
              "LOCKOUT",
              "NOT_ENOUGH_DATA"
            ],
            "description": "MFA Authentication status",
            "example": "SUCCESS"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error messages from MFA verification request",
            "example": "Unable to connect DUO Service during verification"
          }
        }
      },
      "DuoVerificationRequest": {
        "type": "object",
        "title": "Duo Verification Request",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": false,
            "description": "User id for Verification request.",
            "example": "2c9180947f0ef465017f215cbcfd004b"
          },
          "signedResponse": {
            "type": "string",
            "nullable": false,
            "description": "User id for Verification request.",
            "example": "AUTH|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjUzMDg5|f1f5f8ced5b340f3d303b05d0efa0e43b6a8f970:APP|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjU2NjE5|cb44cf44353f5127edcae31b1da0355f87357db2"
          }
        },
        "required": [
          "userId",
          "signedResponse"
        ]
      },
      "VerificationPollRequest": {
        "type": "object",
        "title": "Verification Poll Request",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": false,
            "description": "Verification request Id",
            "example": "089899f13a8f4da7824996191587bab9"
          }
        },
        "required": [
          "requestId"
        ]
      },
      "KbaAuthResponseItem": {
        "type": "object",
        "title": "Kba Auth Response Item",
        "properties": {
          "questionId": {
            "type": "string",
            "nullable": true,
            "description": "The KBA question id",
            "example": "089899f13a8f4da7824996191587bab9"
          },
          "isVerified": {
            "type": "boolean",
            "nullable": true,
            "default": null,
            "description": "Return true if verified",
            "example": true
          }
        }
      },
      "KbaAuthResponse": {
        "type": "object",
        "title": "Kba Auth Response",
        "properties": {
          "kbaAuthResponseItems": {
            "type": "array",
            "example": [
              {
                "questionId": "089899f13a8f4da7824996191587bab9",
                "isVerified": false
              }
            ],
            "items": {
              "$ref": "#/components/schemas/KbaAuthResponseItem"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED",
              "LOCKOUT",
              "NOT_ENOUGH_DATA"
            ],
            "description": "MFA Authentication status",
            "example": "PENDING"
          }
        }
      },
      "TokenAuthRequest": {
        "type": "object",
        "title": "Token Auth Request",
        "properties": {
          "token": {
            "nullable": false,
            "type": "string",
            "description": "Token value",
            "example": "12345"
          },
          "userAlias": {
            "nullable": false,
            "type": "string",
            "description": "User alias from table spt_identity field named 'name'",
            "example": "will.albin"
          },
          "deliveryType": {
            "nullable": false,
            "type": "string",
            "enum": [
              "SMS_PERSONAL",
              "VOICE_PERSONAL",
              "SMS_WORK",
              "VOICE_WORK",
              "EMAIL_WORK",
              "EMAIL_PERSONAL"
            ],
            "description": "Token delivery type",
            "example": "EMAIL_WORK"
          }
        },
        "required": [
          "token",
          "userAlias",
          "deliveryType"
        ]
      },
      "TokenAuthResponse": {
        "type": "object",
        "title": "Token Auth Response",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED",
              "LOCKOUT",
              "NOT_ENOUGH_DATA"
            ],
            "description": "MFA Authentication status",
            "example": "PENDING"
          }
        }
      },
      "SendTokenRequest": {
        "type": "object",
        "title": "Send Token Request",
        "properties": {
          "userAlias": {
            "nullable": false,
            "type": "string",
            "description": "User alias from table spt_identity field named 'name'",
            "example": "will.albin"
          },
          "deliveryType": {
            "nullable": false,
            "type": "string",
            "enum": [
              "SMS_PERSONAL",
              "VOICE_PERSONAL",
              "SMS_WORK",
              "VOICE_WORK",
              "EMAIL_WORK",
              "EMAIL_PERSONAL"
            ],
            "description": "Token delivery type",
            "example": "EMAIL_WORK"
          }
        },
        "required": [
          "userAlias",
          "deliveryType"
        ]
      },
      "SendTokenResponse": {
        "type": "object",
        "title": "Send Token Response",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "description": "The token request ID",
            "example": "089899f13a8f4da7824996191587bab9"
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ],
            "description": "Status of sending token",
            "example": "SUCCESS"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "description": "Error messages from token send request",
            "example": "Unable to sent text message"
          }
        }
      },
      "TemplateSlack": {
        "type": "object",
        "title": "Template Slack",
        "nullable": true,
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string"
          },
          "blocks": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "string"
          },
          "notificationType": {
            "type": "string",
            "nullable": true
          },
          "approvalId": {
            "type": "string",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "nullable": true
          },
          "requestedById": {
            "type": "string",
            "nullable": true
          },
          "isSubscription": {
            "type": "boolean",
            "nullable": true
          },
          "autoApprovalData": {
            "type": "object",
            "nullable": true,
            "properties": {
              "isAutoApproved": {
                "type": "string",
                "nullable": true
              },
              "itemId": {
                "type": "string",
                "nullable": true
              },
              "itemType": {
                "type": "string",
                "nullable": true
              },
              "autoApprovalMessageJSON": {
                "type": "string",
                "nullable": true
              },
              "autoApprovalTitle": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "customFields": {
            "type": "object",
            "nullable": true,
            "properties": {
              "requestType": {
                "type": "string",
                "nullable": true
              },
              "containsDeny": {
                "type": "string",
                "nullable": true
              },
              "campaignId": {
                "type": "string",
                "nullable": true
              },
              "campaignStatus": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "TemplateTeams": {
        "type": "object",
        "title": "Template Teams",
        "nullable": true,
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string"
          },
          "messageJSON": {
            "type": "string",
            "nullable": true
          },
          "isSubscription": {
            "type": "boolean",
            "nullable": true
          },
          "approvalId": {
            "type": "string",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "nullable": true
          },
          "requestedById": {
            "type": "string",
            "nullable": true
          },
          "notificationType": {
            "type": "string",
            "nullable": true
          },
          "autoApprovalData": {
            "type": "object",
            "nullable": true,
            "properties": {
              "isAutoApproved": {
                "type": "string",
                "nullable": true
              },
              "itemId": {
                "type": "string",
                "nullable": true
              },
              "itemType": {
                "type": "string",
                "nullable": true
              },
              "autoApprovalMessageJSON": {
                "type": "string",
                "nullable": true
              },
              "autoApprovalTitle": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "customFields": {
            "type": "object",
            "nullable": true,
            "properties": {
              "requestType": {
                "type": "string",
                "nullable": true
              },
              "containsDeny": {
                "type": "string",
                "nullable": true
              },
              "campaignId": {
                "type": "string",
                "nullable": true
              },
              "campaignStatus": {
                "type": "string",
                "nullable": true
              }
            }
          }
        }
      },
      "TemplateDtoDefault": {
        "type": "object",
        "title": "Template Dto Default",
        "properties": {
          "key": {
            "type": "string",
            "example": "cloud_manual_work_item_summary",
            "description": "The key of the default template"
          },
          "name": {
            "type": "string",
            "example": "Task Manager Subscription",
            "description": "The name of the default template"
          },
          "medium": {
            "type": "string",
            "description": "The message medium. More mediums may be added in the future.",
            "enum": [
              "EMAIL",
              "PHONE",
              "SMS",
              "SLACK",
              "TEAMS"
            ],
            "example": "EMAIL"
          },
          "locale": {
            "type": "string",
            "description": "The locale for the message text, a BCP 47 language tag.",
            "example": "en"
          },
          "subject": {
            "type": "string",
            "example": "You have $numberOfPendingTasks $taskTasks to complete in ${__global.productName}.",
            "description": "The subject of the default template",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true,
            "example": null,
            "deprecated": true,
            "description": "The header value is now located within the body field. If included with non-null values, will result in a 400."
          },
          "body": {
            "type": "string",
            "example": "Please go to the task manager",
            "description": "The body of the default template"
          },
          "footer": {
            "type": "string",
            "nullable": true,
            "example": null,
            "deprecated": true,
            "description": "The footer value is now located within the body field. If included with non-null values, will result in a 400."
          },
          "from": {
            "type": "string",
            "example": "$__global.emailFromAddress",
            "description": "The \"From:\" address of the default template",
            "nullable": true
          },
          "replyTo": {
            "type": "string",
            "example": "$__global.emailFromAddress",
            "description": "The \"Reply To\" field of the default template",
            "nullable": true
          },
          "description": {
            "type": "string",
            "example": "Daily digest - sent if number of outstanding tasks for task owner > 0",
            "description": "The description of the default template",
            "nullable": true
          },
          "slackTemplate": {
            "$ref": "#/components/schemas/TemplateSlack"
          },
          "teamsTemplate": {
            "$ref": "#/components/schemas/TemplateTeams"
          }
        }
      },
      "TemplateDto": {
        "type": "object",
        "title": "Template Dto",
        "properties": {
          "key": {
            "type": "string",
            "example": "cloud_manual_work_item_summary",
            "description": "The key of the template"
          },
          "name": {
            "type": "string",
            "example": "Task Manager Subscription",
            "description": "The name of the Task Manager Subscription"
          },
          "medium": {
            "type": "string",
            "description": "The message medium. More mediums may be added in the future.",
            "enum": [
              "EMAIL",
              "PHONE",
              "SMS",
              "SLACK",
              "TEAMS"
            ],
            "example": "EMAIL"
          },
          "locale": {
            "type": "string",
            "description": "The locale for the message text, a BCP 47 language tag.",
            "example": "en"
          },
          "subject": {
            "type": "string",
            "example": "You have $numberOfPendingTasks $taskTasks to complete in ${__global.productName}.",
            "description": "The subject line in the template"
          },
          "header": {
            "type": "string",
            "nullable": true,
            "example": null,
            "deprecated": true,
            "description": "The header value is now located within the body field. If included with non-null values, will result in a 400."
          },
          "body": {
            "type": "string",
            "example": "Please go to the task manager",
            "description": "The body in the template"
          },
          "footer": {
            "type": "string",
            "nullable": true,
            "example": null,
            "deprecated": true,
            "description": "The footer value is now located within the body field. If included with non-null values, will result in a 400."
          },
          "from": {
            "type": "string",
            "example": "$__global.emailFromAddress",
            "description": "The \"From:\" address in the template"
          },
          "replyTo": {
            "type": "string",
            "example": "$__global.emailFromAddress",
            "description": "The \"Reply To\" line in the template"
          },
          "description": {
            "type": "string",
            "example": "Daily digest - sent if number of outstanding tasks for task owner > 0",
            "description": "The description in the template"
          },
          "id": {
            "type": "string",
            "example": "c17bea3a-574d-453c-9e04-4365fbf5af0b",
            "description": "This is auto-generated."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this template is created. This is auto-generated.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this template was last modified. This is auto-generated.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "slackTemplate": {
            "type": "string",
            "nullable": true
          },
          "teamsTemplate": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "key",
          "medium",
          "locale"
        ]
      },
      "TemplateBulkDeleteDto": {
        "type": "object",
        "title": "Template Bulk Delete Dto",
        "properties": {
          "key": {
            "type": "string",
            "example": "cloud_manual_work_item_summary"
          },
          "medium": {
            "type": "string",
            "enum": [
              "EMAIL",
              "PHONE",
              "SMS"
            ],
            "example": "EMAIL"
          },
          "locale": {
            "type": "string",
            "description": "The locale for the message text, a BCP 47 language tag.",
            "example": "en"
          }
        },
        "required": [
          "key"
        ]
      },
      "GrantType": {
        "description": "OAuth2 Grant Type",
        "type": "string",
        "example": "CLIENT_CREDENTIALS",
        "enum": [
          "CLIENT_CREDENTIALS",
          "AUTHORIZATION_CODE",
          "REFRESH_TOKEN"
        ]
      },
      "AccessType": {
        "type": "string",
        "enum": [
          "ONLINE",
          "OFFLINE"
        ],
        "description": "Access type of API Client indicating online or offline use",
        "example": "OFFLINE"
      },
      "ClientType": {
        "type": "string",
        "enum": [
          "CONFIDENTIAL",
          "PUBLIC"
        ],
        "description": "Type of an API Client indicating public or confidentials use",
        "example": "CONFIDENTIAL"
      },
      "GetOAuthClientResponse": {
        "type": "object",
        "title": "Get O Auth Client Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the OAuth client",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "businessName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the business the API Client should belong to",
            "example": "Acme-Solar"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "The homepage URL associated with the owner of the API Client",
            "example": "http://localhost:12345"
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for the API Client",
            "example": "Demo API Client"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of the API Client",
            "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds an access token generated for this API Client is valid for",
            "example": 750
          },
          "refreshTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds a refresh token generated for this API Client is valid for",
            "example": 86400
          },
          "redirectUris": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "A list of the approved redirect URIs used with the authorization_code flow",
            "example": [
              "http://localhost:12345"
            ]
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            },
            "description": "A list of OAuth 2.0 grant types this API Client can be used with",
            "example": [
              "AUTHORIZATION_CODE",
              "CLIENT_CREDENTIALS",
              "REFRESH_TOKEN"
            ]
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType",
            "description": "The access type (online or offline) of this API Client",
            "example": "OFFLINE"
          },
          "type": {
            "$ref": "#/components/schemas/ClientType",
            "description": "The type of the API Client (public or confidential)",
            "example": "CONFIDENTIAL"
          },
          "internal": {
            "type": "boolean",
            "description": "An indicator of whether the API Client can be used for requests internal to IDN",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "An indicator of whether the API Client is enabled for use",
            "example": true
          },
          "strongAuthSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports strong authentication",
            "example": false
          },
          "claimsSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
            "example": false
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when the API Client was created",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when the API Client was last updated",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "lastUsed": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when this API Client was last used to generate an access token. This timestamp does not get updated on every API Client usage, but only once a day. This property can be useful for identifying which API Clients are no longer actively used and can be removed.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the API Client.",
            "example": [
              "demo:api-client-scope:first",
              "demo:api-client-scope:second"
            ]
          }
        },
        "required": [
          "id",
          "businessName",
          "homepageUrl",
          "name",
          "description",
          "accessTokenValiditySeconds",
          "refreshTokenValiditySeconds",
          "redirectUris",
          "grantTypes",
          "accessType",
          "type",
          "internal",
          "enabled",
          "strongAuthSupported",
          "claimsSupported",
          "created",
          "modified",
          "scope"
        ]
      },
      "CreateOAuthClientRequest": {
        "type": "object",
        "title": "Create O Auth Client Request",
        "properties": {
          "businessName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the business the API Client should belong to",
            "example": "Acme-Solar"
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true,
            "description": "The homepage URL associated with the owner of the API Client",
            "example": "http://localhost:12345"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable name for the API Client",
            "example": "Demo API Client"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of the API Client",
            "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds an access token generated for this API Client is valid for",
            "example": 750
          },
          "refreshTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds a refresh token generated for this API Client is valid for",
            "example": 86400
          },
          "redirectUris": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "A list of the approved redirect URIs. Provide one or more URIs when assigning the AUTHORIZATION_CODE grant type to a new OAuth Client.",
            "example": [
              "http://localhost:12345",
              "http://localhost:67890"
            ]
          },
          "grantTypes": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GrantType"
            },
            "description": "A list of OAuth 2.0 grant types this API Client can be used with",
            "example": [
              "AUTHORIZATION_CODE",
              "CLIENT_CREDENTIALS",
              "REFRESH_TOKEN"
            ]
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType",
            "description": "The access type (online or offline) of this API Client",
            "example": "OFFLINE"
          },
          "type": {
            "$ref": "#/components/schemas/ClientType",
            "description": "The type of the API Client (public or confidential)",
            "example": "CONFIDENTIAL"
          },
          "internal": {
            "type": "boolean",
            "description": "An indicator of whether the API Client can be used for requests internal within the product.",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "An indicator of whether the API Client is enabled for use",
            "example": true
          },
          "strongAuthSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports strong authentication",
            "example": false
          },
          "claimsSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
            "example": false
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the API Client. If no scope is specified, the client will be created with the default scope \"sp:scopes:all\". This means the API Client will have all the rights of the owner who created it.",
            "example": [
              "demo:api-client-scope:first",
              "demo:api-client-scope:second"
            ]
          }
        },
        "required": [
          "name",
          "description",
          "accessTokenValiditySeconds",
          "grantTypes",
          "accessType",
          "enabled"
        ]
      },
      "CreateOAuthClientResponse": {
        "type": "object",
        "title": "Create O Auth Client Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the OAuth client",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "secret": {
            "type": "string",
            "description": "Secret of the OAuth client (This field is only returned on the intial create call.)",
            "example": "5c32dd9b21adb51c77794d46e71de117a1d0ddb36a7ff941fa28014ab7de2cf3"
          },
          "businessName": {
            "type": "string",
            "description": "The name of the business the API Client should belong to",
            "example": "Acme-Solar"
          },
          "homepageUrl": {
            "type": "string",
            "description": "The homepage URL associated with the owner of the API Client",
            "example": "http://localhost:12345"
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for the API Client",
            "example": "Demo API Client"
          },
          "description": {
            "type": "string",
            "description": "A description of the API Client",
            "example": "An API client used for the authorization_code, refresh_token, and client_credentials flows"
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds an access token generated for this API Client is valid for",
            "example": 750
          },
          "refreshTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds a refresh token generated for this API Client is valid for",
            "example": 86400
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the approved redirect URIs used with the authorization_code flow",
            "example": [
              "http://localhost:12345"
            ]
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            },
            "description": "A list of OAuth 2.0 grant types this API Client can be used with",
            "example": [
              "AUTHORIZATION_CODE",
              "CLIENT_CREDENTIALS",
              "REFRESH_TOKEN"
            ]
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType",
            "description": "The access type (online or offline) of this API Client",
            "example": "OFFLINE"
          },
          "type": {
            "$ref": "#/components/schemas/ClientType",
            "description": "The type of the API Client (public or confidential)",
            "example": "CONFIDENTIAL"
          },
          "internal": {
            "type": "boolean",
            "description": "An indicator of whether the API Client can be used for requests internal to IDN",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "description": "An indicator of whether the API Client is enabled for use",
            "example": true
          },
          "strongAuthSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports strong authentication",
            "example": false
          },
          "claimsSupported": {
            "type": "boolean",
            "description": "An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow",
            "example": false
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when the API Client was created",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when the API Client was last updated",
            "example": "2018-06-25T20:22:28.104Z"
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the API Client.",
            "example": [
              "demo:api-client-scope:first",
              "demo:api-client-scope:second"
            ]
          }
        },
        "required": [
          "id",
          "secret",
          "businessName",
          "homepageUrl",
          "name",
          "description",
          "accessTokenValiditySeconds",
          "refreshTokenValiditySeconds",
          "redirectUris",
          "grantTypes",
          "accessType",
          "type",
          "internal",
          "enabled",
          "strongAuthSupported",
          "claimsSupported",
          "created",
          "modified",
          "scope"
        ]
      },
      "ReportConfigDTO": {
        "type": "object",
        "title": "Report Config DTO",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "Name of column in report",
            "example": "SOD Business Name"
          },
          "required": {
            "type": "boolean",
            "description": "If true, column is required in all reports, and this entry is immutable. A 400 error will result from any attempt to modify the column's definition.",
            "example": true,
            "default": false
          },
          "included": {
            "type": "boolean",
            "description": "If true, column is included in the report. A 400 error will be thrown if an attempt is made to set included=false if required==true.",
            "example": false,
            "default": false
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 2147483647,
            "description": "Relative sort order for the column. Columns will be displayed left-to-right in nondecreasing order.",
            "example": 2
          }
        }
      },
      "OrgConfig": {
        "type": "object",
        "title": "Org Config",
        "description": "DTO class for OrgConfig data accessible by customer external org admin (\"ORG_ADMIN\") users",
        "properties": {
          "orgName": {
            "type": "string",
            "description": "The name of the org.",
            "example": "acme-solar"
          },
          "timeZone": {
            "type": "string",
            "description": "The selected time zone which is to be used for the org.  This directly affects when scheduled tasks are executed.  Valid options can be found at /beta/org-config/valid-time-zones",
            "example": "America/Toronto"
          },
          "lcsChangeHonorsSourceEnableFeature": {
            "type": "boolean",
            "description": "Flag to determine whether the LCS_CHANGE_HONORS_SOURCE_ENABLE_FEATURE flag is enabled for the current org.",
            "example": false
          },
          "armCustomerId": {
            "type": "string",
            "description": "ARM Customer ID",
            "nullable": true,
            "example": "DE38E75A-5FF6-4A65-5DC7-08D64426B09E"
          },
          "armSapSystemIdMappings": {
            "type": "string",
            "description": "A list of IDN::sourceId to ARM::systemId mappings.",
            "nullable": true,
            "example": [
              {
                "sourceId": "2c91808c791a94e501792388b0d62659",
                "systemId": "1556"
              },
              {
                "sourceId": "2_2c91808c791a94e501792388b0d62659",
                "systemId": "2_1556"
              },
              {
                "sourceId": "3_2c91808c791a94e501792388b0d62659",
                "systemId": "3_1556"
              }
            ]
          },
          "armAuth": {
            "type": "string",
            "description": "ARM authentication string",
            "nullable": true,
            "example": "epiYNTRYA2S7swisDWk1Zv4VMNgvqEjiBh5_ufuCWsma2m-5XADijqBg0ijXLby5nS6lxZNXabhGnAPGeDGc4V3jQKrhwV-UHypRLs8ZLgOjiQNus9NimS0uPdKomRW6TFWqXyfnYd-znNgbbVuwUy9GyD9ebDVJSntPastxSx7UcyGuWBqfNZYpuxKRWe_7TVY60qL55jUqyz8N4XUbbdcxdbZ0uik6ut-Bv90MKTbZexBW_PR4qcgIkaEs4kIenLyBxnGziYo7AO0tJ8bGHO8FJRkibCpAQIt7PISLo7Gg_Xf9j10dKq2YDgy4pPTvz3fE2ZHYnXCXvXFSA-vVag=="
          },
          "armDb": {
            "type": "string",
            "description": "ARM database name",
            "nullable": true,
            "example": "EU"
          },
          "armSsoUrl": {
            "type": "string",
            "description": "ARM SSO URL",
            "nullable": true,
            "example": "https://your-arm-sso-url"
          },
          "iaiEnableCertificationRecommendations": {
            "type": "boolean",
            "description": "Flag to determine whether IAI Certification Recommendations are enabled for the current org",
            "example": true
          },
          "sodReportConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportConfigDTO"
            }
          }
        }
      },
      "OutlierSummary": {
        "type": "object",
        "title": "Outlier Summary",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LOW_SIMILARITY",
              "STRUCTURAL"
            ],
            "description": "The type of outlier summary",
            "example": "LOW_SIMILARITY"
          },
          "snapshotDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the bulk outlier detection ran/snapshot was created",
            "example": "2021-05-01T18:40:35.772Z"
          },
          "totalOutliers": {
            "type": "integer",
            "description": "Total number of outliers for the customer making the request",
            "example": 50
          },
          "totalIdentities": {
            "type": "integer",
            "description": "Total number of identities for the customer making the request",
            "example": 5000
          },
          "totalIgnored": {
            "type": "integer",
            "default": 0,
            "example": 0
          }
        }
      },
      "LatestOutlierSummary": {
        "type": "object",
        "title": "Latest Outlier Summary",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LOW_SIMILARITY",
              "STRUCTURAL"
            ],
            "description": "The type of outlier summary",
            "example": "LOW_SIMILARITY"
          },
          "snapshotDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the bulk outlier detection ran/snapshot was created",
            "example": "2021-05-01T18:40:35.772Z"
          },
          "totalOutliers": {
            "type": "integer",
            "description": "Total number of outliers for the customer making the request",
            "example": 50
          },
          "totalIdentities": {
            "type": "integer",
            "description": "Total number of identities for the customer making the request",
            "example": 5000
          },
          "totalIgnored": {
            "type": "integer",
            "description": "Total number of ignored outliers",
            "example": 10
          }
        }
      },
      "Outlier": {
        "type": "object",
        "title": "Outlier",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identity's unique identifier for the outlier record",
            "example": "5be33d3e-c54d-4ed7-af73-2380543e8283"
          },
          "identityId": {
            "type": "string",
            "description": "The ID of the identity that is detected as an outlier",
            "example": "5be33d3e-c54d-4ed7-af73-2380543e8283"
          },
          "type": {
            "type": "string",
            "enum": [
              "LOW_SIMILARITY",
              "STRUCTURAL"
            ],
            "description": "The type of outlier summary",
            "example": "LOW_SIMILARITY"
          },
          "firstDetectionDate": {
            "type": "string",
            "format": "date-time",
            "description": "The first date the outlier was detected",
            "example": "2021-05-01T18:40:35.772Z"
          },
          "latestDetectionDate": {
            "type": "string",
            "format": "date-time",
            "description": "The most recent date the outlier was detected",
            "example": "2021-05-03T18:40:35.772Z"
          },
          "ignored": {
            "type": "boolean",
            "description": "Flag whether or not the outlier has been ignored",
            "example": false
          },
          "attributes": {
            "type": "object",
            "description": "Object containing mapped identity attributes",
            "example": {
              "displayName": "John Smith",
              "jobTitle": "Software Engineer",
              "department": "Engineering"
            }
          },
          "score": {
            "type": "number",
            "format": "float",
            "description": "The outlier score determined by the detection engine ranging from 0..1",
            "example": 0.92
          },
          "unignoreType": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AUTOMATIC",
              null
            ],
            "description": "Enum value of if the outlier manually or automatically un-ignored. Will be NULL if outlier is not ignored",
            "example": "MANUAL",
            "nullable": true
          },
          "unignoreDate": {
            "type": "string",
            "format": "date-time",
            "description": "shows date when last time has been unignored outlier",
            "example": "2021-06-01T18:40:35.772Z",
            "nullable": true
          },
          "ignoreDate": {
            "type": "string",
            "format": "date-time",
            "description": "shows date when last time has been ignored outlier",
            "example": "2021-06-01T18:40:35.772Z",
            "nullable": true
          }
        }
      },
      "OutlierFeatureTranslation": {
        "type": "object",
        "title": "Outlier Feature Translation",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/TranslationMessage"
          },
          "description": {
            "$ref": "#/components/schemas/TranslationMessage"
          }
        }
      },
      "OutlierContributingFeature": {
        "type": "object",
        "title": "Outlier Contributing Feature",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contributing feature id",
            "example": "66e38828-5017-47af-92ff-9844871352c5"
          },
          "name": {
            "type": "string",
            "description": "The name of the feature",
            "example": "entitlement_count"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "INTEGER",
              "FLOAT"
            ],
            "description": "The data type of the value field",
            "example": "INTEGER"
          },
          "value": {
            "oneOf": [
              {
                "type": "number",
                "format": "float",
                "minimum": 0,
                "maximum": 1
              },
              {
                "type": "integer",
                "format": "int64"
              }
            ],
            "description": "The feature value",
            "example": 0.92
          },
          "importance": {
            "type": "number",
            "format": "float",
            "description": "The importance of the feature. This can also be a negative value",
            "minimum": -1,
            "maximum": 1,
            "example": -0.15
          },
          "displayName": {
            "type": "string",
            "description": "The (translated if header is passed) displayName for the feature",
            "example": "Number of entitlements"
          },
          "description": {
            "type": "string",
            "description": "The (translated if header is passed) description for the feature",
            "example": "The total number of entitlements belonging to an identity"
          },
          "translationMessages": {
            "$ref": "#/components/schemas/OutlierFeatureTranslation"
          }
        }
      },
      "OutliersContributingFeatureAccessItems": {
        "type": "object",
        "title": "Outliers Contributing Feature Access Items",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the access item",
            "example": "2c938083633d259901633d2623ec0375"
          },
          "displayName": {
            "type": "string",
            "description": "the display name of the access item",
            "example": "Applied Research Access"
          },
          "description": {
            "type": "string",
            "description": "Description of the access item.",
            "example": "Access to research information, lab results, and schematics"
          },
          "accessType": {
            "type": "string",
            "example": "ENTITLEMENT",
            "description": "The type of the access item.",
            "enum": [
              "ENTITLEMENT",
              "ACCESS_PROFILE",
              "ROLE"
            ]
          },
          "sourceName": {
            "type": "string",
            "example": "appName",
            "description": "the associated source name if it exists"
          },
          "extremelyRare": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "rarest access"
          }
        }
      },
      "OutlierFeatureSummary": {
        "type": "object",
        "title": "Outlier Feature Summary",
        "properties": {
          "contributingFeatureName": {
            "type": "string",
            "description": "Contributing feature name",
            "example": "Rare Access"
          },
          "identityOutlierDisplayName": {
            "type": "string",
            "description": "Identity display name",
            "example": "John Smith"
          },
          "outlierFeatureDisplayValues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "example": "Aliza Chris",
                  "description": "display name"
                },
                "value": {
                  "type": "string",
                  "example": 55,
                  "description": "value"
                },
                "valueType": {
                  "type": "string",
                  "enum": [
                    "INTEGER",
                    "FLOAT"
                  ],
                  "description": "The data type of the value field",
                  "example": "INTEGER"
                }
              }
            }
          },
          "featureDefinition": {
            "type": "string",
            "description": "Definition of the feature",
            "example": "Identity total number of entitlements"
          },
          "featureExplanation": {
            "type": "string",
            "description": "Detailed explanation of the feature",
            "example": "An identity that has too much rare access has a higher change of becoming a security threat due to the unique access they possess"
          },
          "peerDisplayName": {
            "type": "string",
            "description": "outlier's peer identity display name",
            "example": "Mary Jane"
          },
          "peerIdentityId": {
            "type": "string",
            "description": "outlier's peer identity id",
            "example": "9f9d5d53ad0e48fba7352f6da9f1b8gbg"
          },
          "accessItemReference": {
            "type": "object",
            "description": "Access Item reference",
            "example": {
              "displayName": "All Rare Entitlements",
              "searchPlaceholder": "Search by name or description"
            }
          }
        }
      },
      "PasswordInfoQueryDTO": {
        "type": "object",
        "title": "Password Info Query DTO",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The login name of the user",
            "example": "Abby.Smith"
          },
          "sourceName": {
            "type": "string",
            "description": "The display name of the source",
            "example": "My-AD"
          }
        }
      },
      "PasswordInfoAccount": {
        "type": "object",
        "title": "Password Info Account",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account ID of the account. This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350",
            "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
          },
          "accountName": {
            "type": "string",
            "description": "Display name of the account. This is specified per account schema in the source configuration. It is used to display name of the account. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-Name-for/ta-p/74008",
            "example": "Abby.Smith"
          }
        }
      },
      "PasswordInfo": {
        "type": "object",
        "title": "Password Info",
        "properties": {
          "identityId": {
            "type": "string",
            "example": "2c918085744fec4301746f9a5bce4605"
          },
          "sourceId": {
            "type": "string",
            "example": "2c918083746f642c01746f990884012a"
          },
          "publicKeyId": {
            "type": "string",
            "example": "N2M1OTJiMGEtMDJlZS00ZWU3LTkyYTEtNjA5YmI5NWE3ZWVh"
          },
          "publicKey": {
            "type": "string",
            "description": "User's public key with Base64 encoding",
            "example": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGFkWi2J75TztpbaPKd36bJnIB3J8gZ6UcoS9oSDYsqBzPpTsfZXYaEf4Y4BKGgJIXmE/lwhwuj7mU1itdZ2qTSNFtnXA8Fn75c3UUkk+h+wdZbkuSmqlsJo3R1OnJkwkJggcAy9Jvk9jlcrNLWorpQ1w9raUvxtvfgkSdq153KxotenQ1HciSyZ0nA/Kw0UaucLnho8xdRowZs11afXGXA9IT9H6D8T6zUdtSxm0nAyH+mluma5LdTfaM50W3l/L8q56Vrqmx2pZIiwdx/0+g3Y++jV70zom0ZBkC1MmSoLMrQYG5OICNjr72f78B2PaGXfarQHqARLjKpMVt9YIQIDAQAB"
          },
          "accounts": {
            "type": "array",
            "description": "Account info related to queried identity and source",
            "items": {
              "$ref": "#/components/schemas/PasswordInfoAccount"
            }
          },
          "policies": {
            "type": "array",
            "description": "Password constraints",
            "items": {
              "type": "string"
            },
            "example": [
              "passwordRepeatedChar is 3",
              "passwordMinAlpha is 1",
              "passwordMinLength is 5",
              "passwordMinNumeric is 1"
            ]
          }
        }
      },
      "PasswordChangeRequest": {
        "type": "object",
        "title": "Password Change Request",
        "properties": {
          "identityId": {
            "type": "string",
            "description": "The identity ID that requested the password change",
            "example": "8a807d4c73c545510173c545f0a002ff"
          },
          "encryptedPassword": {
            "type": "string",
            "description": "The RSA encrypted password",
            "example": "XzN+YwKgr2C+InkMYFMBG3UtjMEw5ZIql/XFlXo8cJNeslmkplx6vn4kd4/43IF9STBk5RnzR6XmjpEO+FwHDoiBwYZAkAZK/Iswxk4OdybG6Y4MStJCOCiK8osKr35IMMSV/mbO4wAeltoCk7daTWzTGLiI6UaT5tf+F2EgdjJZ7YqM8W8r7aUWsm3p2Xt01Y46ZRx0QaM91QruiIx2rECFT2pUO0wr+7oQ77jypATyGWRtADsu3YcvCk/6U5MqCnXMzKBcRas7NnZdSL/d5H1GglVGz3VLPMaivG4/oL4chOMmFCRl/zVsGxZ9RhN8rxsRGFFKn+rhExTi+bax3A=="
          },
          "publicKeyId": {
            "type": "string",
            "description": "The encryption key ID",
            "example": "YWQ2NjQ4MTItZjY0NC00MWExLWFjMjktOGNmMzU3Y2VlNjk2"
          },
          "accountId": {
            "type": "string",
            "description": "Account ID of the account This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350",
            "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the source for which identity is requesting the password change",
            "example": "8a807d4c73c545510173c545d4b60246"
          }
        }
      },
      "PasswordChangeResponse": {
        "type": "object",
        "title": "Password Change Response",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "description": "The password change request ID",
            "example": "089899f13a8f4da7824996191587bab9"
          },
          "state": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "FINISHED",
              "FAILED"
            ],
            "description": "Password change state"
          }
        }
      },
      "PasswordStatus": {
        "type": "object",
        "title": "Password Status",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "description": "The password change request ID",
            "example": "089899f13a8f4da7824996191587bab9"
          },
          "state": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "FINISHED",
              "FAILED"
            ],
            "description": "Password change state"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The errors during the password change request"
          },
          "sourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of source IDs in the password change request"
          }
        }
      },
      "PasswordSyncGroup": {
        "type": "object",
        "title": "Password Sync Group",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the sync group",
            "example": "6881f631-3bd5-4213-9c75-8e05cc3e35dd"
          },
          "name": {
            "description": "Name of the sync group",
            "type": "string",
            "example": "Password Sync Group 1"
          },
          "passwordPolicyId": {
            "type": "string",
            "description": "ID of the password policy",
            "example": "2c91808d744ba0ce01746f93b6204501"
          },
          "sourceIds": {
            "type": "array",
            "description": "List of password managed sources IDs",
            "items": {
              "type": "string"
            },
            "example": [
              "2c918084660f45d6016617daa9210584",
              "2c918084660f45d6016617daa9210500"
            ]
          },
          "created": {
            "type": "string",
            "description": "The date and time this sync group was created",
            "format": "date-time",
            "example": "2023-03-16T04:00:00Z",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "The date and time this sync group was last modified",
            "format": "date-time",
            "example": "2023-03-16T04:00:00Z",
            "nullable": true
          }
        }
      },
      "PasswordPolicyV3Dto": {
        "type": "object",
        "title": "Password Policy V 3 Dto",
        "properties": {
          "id": {
            "type": "string",
            "description": "The password policy Id.",
            "example": "2c91808e7d976f3b017d9f5ceae440c8"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description for current password policy.",
            "example": "Information about the Password Policy"
          },
          "name": {
            "type": "string",
            "description": "The name of the password policy.",
            "example": "PasswordPolicy Example"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "Date the Password Policy was created.",
            "example": 1639056206564
          },
          "lastUpdated": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Date the Password Policy was updated.",
            "example": 1939056206564
          },
          "firstExpirationReminder": {
            "type": "integer",
            "format": "int64",
            "description": "The number of days before expiration remaninder.",
            "example": 45
          },
          "accountIdMinWordLength": {
            "type": "integer",
            "format": "int64",
            "description": "The minimun length of account Id. By default is equals to -1.",
            "example": 4
          },
          "accountNameMinWordLength": {
            "type": "integer",
            "format": "int64",
            "description": "The minimun length of account name. By default is equals to -1.",
            "example": 6
          },
          "minAlpha": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum alpha. By default is equals to 0.",
            "example": 5
          },
          "minCharacterTypes": {
            "type": "integer",
            "format": "int64",
            "description": "MinCharacterTypes. By default is equals to -1.",
            "example": 5
          },
          "maxLength": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum length of the password.",
            "example": 25
          },
          "minLength": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum length of the password. By default is equals to 0.",
            "example": 8
          },
          "maxRepeatedChars": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum repetition of the same character in the password. By default is equals to -1.",
            "example": 3
          },
          "minLower": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum amount of lower case character in the password. By default is equals to 0.",
            "example": 8
          },
          "minNumeric": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum amount of numeric characters in the password. By default is equals to 0.",
            "example": 8
          },
          "minSpecial": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum amount of special symbols in the password. By default is equals to 0.",
            "example": 8
          },
          "minUpper": {
            "type": "integer",
            "format": "int64",
            "description": "Minimum amount of upper case symbols in the password. By default is equals to 0.",
            "example": 8
          },
          "passwordExpiration": {
            "type": "integer",
            "format": "int64",
            "description": "Number of days before current password expires. By default is equals to 90.",
            "example": 8
          },
          "defaultPolicy": {
            "type": "boolean",
            "description": "Defines whether this policy is default or not. Default policy is created automatically when an org is setup. This field is false by default.",
            "example": true,
            "default": false
          },
          "enablePasswdExpiration": {
            "type": "boolean",
            "description": "Defines whether this policy is enabled to expire or not. This field is false by default.",
            "example": true,
            "default": false
          },
          "requireStrongAuthn": {
            "type": "boolean",
            "description": "Defines whether this policy require strong Auth or not. This field is false by default.",
            "example": true,
            "default": false
          },
          "requireStrongAuthOffNetwork": {
            "type": "boolean",
            "description": "Defines whether this policy require strong Auth of network or not. This field is false by default.",
            "example": true,
            "default": false
          },
          "requireStrongAuthUntrustedGeographies": {
            "type": "boolean",
            "description": "Defines whether this policy require strong Auth for untrusted geographies. This field is false by default.",
            "example": true,
            "default": false
          },
          "useAccountAttributes": {
            "type": "boolean",
            "description": "Defines whether this policy uses account attributes or not. This field is false by default.",
            "example": false,
            "default": false
          },
          "useDictionary": {
            "type": "boolean",
            "description": "Defines whether this policy uses dictionary or not. This field is false by default.",
            "example": false,
            "default": false
          },
          "useIdentityAttributes": {
            "type": "boolean",
            "description": "Defines whether this policy uses identity attributes or not. This field is false by default.",
            "example": false,
            "default": false
          },
          "validateAgainstAccountId": {
            "type": "boolean",
            "description": "Defines whether this policy validate against account id or not. This field is false by default.",
            "example": false,
            "default": false
          },
          "validateAgainstAccountName": {
            "type": "boolean",
            "description": "Defines whether this policy validate against account name or not. This field is false by default.",
            "example": true,
            "default": false
          },
          "created": {
            "type": "string",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "nullable": true
          },
          "sourceIds": {
            "type": "array",
            "description": "List of sources IDs managed by this password policy.",
            "items": {
              "type": "string"
            },
            "example": [
              "2c91808382ffee0b01830de154f14034",
              "2f98808382ffee0b01830de154f12134"
            ]
          }
        }
      },
      "PasswordOrgConfig": {
        "type": "object",
        "title": "Password Org Config",
        "properties": {
          "customInstructionsEnabled": {
            "type": "boolean",
            "description": "Indicator whether custom password instructions feature is enabled. The default value is false.",
            "default": false,
            "example": true
          },
          "digitTokenEnabled": {
            "type": "boolean",
            "description": "Indicator whether \"digit token\" feature is enabled. The default value is false.",
            "default": false,
            "example": true
          },
          "digitTokenDurationMinutes": {
            "type": "integer",
            "format": "int32",
            "description": "The duration of \"digit token\" in minutes. The default value is 5.",
            "minimum": 1,
            "maximum": 60,
            "default": 5,
            "example": 10
          },
          "digitTokenLength": {
            "type": "integer",
            "format": "int32",
            "description": "The length of \"digit token\". The default value is 6.",
            "minimum": 6,
            "maximum": 18,
            "default": 6,
            "example": 9
          }
        }
      },
      "PatOwner": {
        "type": "object",
        "title": "Pat Owner",
        "description": "Personal access token owner's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Personal access token owner's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Personal access token owner's identity ID.",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Personal access token owner's human-readable display name.",
            "example": "Support"
          }
        }
      },
      "GetPersonalAccessTokenResponse": {
        "type": "object",
        "title": "Get Personal Access Token Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
            "example": "86f1dc6fe8f54414950454cbb11278fa"
          },
          "name": {
            "type": "string",
            "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
            "example": "NodeJS Integration"
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the personal  access token.",
            "example": [
              "demo:personal-access-token-scope:first",
              "demo:personal-access-token-scope:second"
            ]
          },
          "owner": {
            "$ref": "#/components/schemas/PatOwner"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when this personal access token was created.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "lastUsed": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when this personal access token was last used to generate an access token. This timestamp does not get updated on every PAT usage, but only once a day. This property can be useful for identifying which PATs are no longer actively used and can be removed.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "managed": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "If true, this token is managed by the SailPoint platform, and is not visible in the user interface. For example, Workflows will create managed personal access tokens for users who create workflows."
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "default": 43200,
            "example": 36900,
            "description": "Number of seconds an access token is valid when generated using this Personal Access Token. If no value is specified, the token will be created with the default value of 43200."
          },
          "expirationDate": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "default": "6 Months from created date",
            "example": "2018-01-11T18:45:37.098Z",
            "description": "Date and time, down to the millisecond, when this personal access token will expire. If not provided, the token will expire 6 months after its creation date. The value must be a valid date-time string between the current date and 6 months from the creation date."
          }
        },
        "required": [
          "id",
          "name",
          "scope",
          "owner",
          "created"
        ]
      },
      "CreatePersonalAccessTokenRequest": {
        "type": "object",
        "title": "Create Personal Access Token Request",
        "description": "Object for specifying the name of a personal access token to create",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created.",
            "example": "NodeJS Integration"
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the personal access token. If no scope is specified, the token will be created with the default scope \"sp:scopes:all\". This means the personal access token will have all the rights of the owner who created it.",
            "example": [
              "demo:personal-access-token-scope:first",
              "demo:personal-access-token-scope:second"
            ]
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "nullable": true,
            "format": "int32",
            "minimum": 15,
            "maximum": 43200,
            "items": {
              "type": "integer",
              "format": "int32",
              "default": 43200
            },
            "description": "Number of seconds an access token is valid when generated using this Personal Access Token. If no value is specified, the token will be created with the default value of 43200.",
            "example": 36900
          },
          "expirationDate": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "items": {
              "type": "string",
              "format": "date-time",
              "default": "6 Months from created date"
            },
            "description": "Date and time, down to the millisecond, when this personal access token will expire. If not provided, the token will expire 6 months after its creation date. The value must be a valid date-time string between the current date and 6 months from the creation date.",
            "example": "2018-01-11T18:45:37.098Z"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreatePersonalAccessTokenResponse": {
        "type": "object",
        "title": "Create Personal Access Token Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the personal access token (to be used as the username for Basic Auth).",
            "example": "86f1dc6fe8f54414950454cbb11278fa"
          },
          "secret": {
            "type": "string",
            "description": "The secret of the personal access token (to be used as the password for Basic Auth).",
            "example": "1d1bef2b9f426383447f64f69349fc7cac176042578d205c256ba3f37c59adb9"
          },
          "scope": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "default": "sp:scopes:all"
            },
            "description": "Scopes of the personal  access token.",
            "example": [
              "demo:personal-access-token-scope:first",
              "demo:personal-access-token-scope:second"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.",
            "example": "NodeJS Integration"
          },
          "owner": {
            "$ref": "#/components/schemas/PatOwner"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time, down to the millisecond, when this personal access token was created.",
            "example": "2017-07-11T18:45:37.098Z"
          },
          "accessTokenValiditySeconds": {
            "type": "integer",
            "format": "int32",
            "items": {
              "type": "integer",
              "format": "int32",
              "default": 43200
            },
            "description": "Number of seconds an access token is valid when generated using this Personal Access Token. If no value is specified, the token will be created with the default value of 43200.",
            "example": 36900
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "items": {
              "type": "string",
              "format": "date-time",
              "default": "6 Months from created date"
            },
            "description": "Date and time, down to the millisecond, when this personal access token will expire. If not provided, the token will expire 6 months after its creation date. The value must be a valid date-time string between the current date and 6 months from the creation date.",
            "example": "2018-01-11T18:45:37.098Z"
          }
        },
        "required": [
          "id",
          "secret",
          "scope",
          "name",
          "owner",
          "created",
          "accessTokenValiditySeconds",
          "expirationDate"
        ]
      },
      "PublicIdentityAttributeConfig": {
        "type": "object",
        "title": "Public Identity Attribute Config",
        "description": "Used to map an attribute key for an Identity to its display name.",
        "properties": {
          "key": {
            "type": "string",
            "description": "the key of the attribute",
            "example": "country"
          },
          "name": {
            "type": "string",
            "description": "the display name of the attribute",
            "example": "Country"
          }
        }
      },
      "IdentityReference": {
        "type": "object",
        "title": "Identity Reference",
        "nullable": true,
        "description": "The manager for the identity.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DtoType",
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity id",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity.",
            "example": "Thomas Edison"
          }
        }
      },
      "PublicIdentityConfig": {
        "type": "object",
        "title": "Public Identity Config",
        "description": "Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicIdentityAttributeConfig"
            }
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/IdentityReference"
          },
          "modified": {
            "type": "string",
            "description": "the date/time of the modification",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z",
            "nullable": true
          }
        }
      },
      "NotificationTemplateContext": {
        "type": "object",
        "title": "Notification Template Context",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "A JSON object that stores the context.",
            "example": {
              "productUrl": "https://test-org.identitysoon.com",
              "brandingConfigs": {
                "default": {
                  "narrowLogoURL": null,
                  "productName": "SailPoint",
                  "standardLogoURL": null,
                  "navigationColor": "011E64",
                  "actionButtonColor": "20B2DE",
                  "emailFromAddress": null,
                  "activeLinkColor": "20B2DE",
                  "loginInformationalMessage": null
                }
              }
            }
          },
          "created": {
            "type": "string",
            "description": "When the global context was created",
            "format": "date-time",
            "example": "2020-04-15T16:16:47.525Z"
          },
          "modified": {
            "type": "string",
            "description": "When the global context was last modified",
            "format": "date-time",
            "example": "2020-04-15T16:16:47.525Z"
          }
        }
      },
      "Medium": {
        "type": "string",
        "enum": [
          "EMAIL",
          "SMS",
          "PHONE",
          "SLACK",
          "TEAMS"
        ]
      },
      "PreferencesDto": {
        "type": "object",
        "title": "Preferences Dto",
        "description": "Maps an Identity's attribute key to a list of preferred notification mediums.",
        "properties": {
          "key": {
            "type": "string",
            "description": "The template notification key.",
            "example": "cloud_manual_work_item_summary"
          },
          "mediums": {
            "type": "array",
            "description": "List of preferred notification mediums, i.e., the mediums (or method) for which notifications are enabled. More mediums may be added in the future.",
            "items": {
              "$ref": "#/components/schemas/Medium"
            },
            "example": [
              "EMAIL"
            ]
          },
          "modified": {
            "type": "string",
            "description": "Modified date of preference",
            "format": "date-time",
            "example": "2020-05-15T14:37:06.909Z"
          }
        }
      },
      "ConfigTypeEnumCamel": {
        "type": "string",
        "description": "Enum list of valid work types that can be selected for a Reassignment Configuration",
        "enum": [
          "accessRequests",
          "certifications",
          "manualTasks"
        ],
        "example": "accessRequests"
      },
      "ConfigTypeEnum": {
        "type": "string",
        "description": "Enum list of valid work types that can be selected for a Reassignment Configuration",
        "enum": [
          "ACCESS_REQUESTS",
          "CERTIFICATIONS",
          "MANUAL_TASKS"
        ],
        "example": "ACCESS_REQUESTS"
      },
      "ConfigType": {
        "type": "object",
        "description": "Type of Reassignment Configuration.",
        "properties": {
          "priority": {
            "type": "integer",
            "example": 1
          },
          "internalName": {
            "$ref": "#/components/schemas/ConfigTypeEnumCamel"
          },
          "internalNameCamel": {
            "$ref": "#/components/schemas/ConfigTypeEnum"
          },
          "displayName": {
            "type": "string",
            "description": "Human readable display name of the type to be shown on UI",
            "example": "Access Requests"
          },
          "description": {
            "type": "string",
            "description": "Description of the type of work to be reassigned, displayed by the UI.",
            "example": "Reassign Access Request Work Items for an identity"
          }
        }
      },
      "Identity-2": {
        "type": "object",
        "description": "The definition of an Identity according to the Reassignment Configuration service",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the object",
            "example": "2c91808380aa05580180aaaaf1940410"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the object",
            "example": "William Wilson"
          }
        }
      },
      "AuditDetails": {
        "type": "object",
        "description": "Audit details for the reassignment configuration of an identity",
        "properties": {
          "created": {
            "type": "string",
            "description": "Initial date and time when the record was created",
            "format": "date-time",
            "example": "2022-07-21T11:13:12.345Z"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Identity-2"
          },
          "modified": {
            "type": "string",
            "description": "Last modified date and time for the record",
            "format": "date-time",
            "example": "2022-07-21T11:13:12.345Z"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Identity-2"
          }
        }
      },
      "ConfigurationDetailsResponse": {
        "type": "object",
        "description": "The request body of Reassignment Configuration Details for a specific identity and config type",
        "properties": {
          "configType": {
            "$ref": "#/components/schemas/ConfigTypeEnum"
          },
          "targetIdentity": {
            "$ref": "#/components/schemas/Identity-2"
          },
          "startDate": {
            "type": "string",
            "description": "The date from which to start reassigning work items",
            "format": "date-time",
            "example": "2022-07-21T11:13:12.345Z"
          },
          "endDate": {
            "type": "string",
            "description": "The date from which to stop reassigning work items.  If this is an empty string it indicates a permanent reassignment.",
            "format": "date-time",
            "example": "0001-01-01T00:00:00Z"
          },
          "auditDetails": {
            "$ref": "#/components/schemas/AuditDetails"
          }
        }
      },
      "ConfigurationResponse": {
        "type": "object",
        "description": "The response body of a Reassignment Configuration for a single identity",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Identity-2"
          },
          "configDetails": {
            "type": "array",
            "description": "Details of how work should be reassigned for an Identity",
            "items": {
              "$ref": "#/components/schemas/ConfigurationDetailsResponse"
            }
          }
        }
      },
      "ConfigurationItemRequest": {
        "type": "object",
        "description": "The request body for creation or update of a Reassignment Configuration for a single identity and work type",
        "properties": {
          "reassignedFromId": {
            "type": "string",
            "description": "The identity id to reassign an item from",
            "example": "2c91808781a71ddb0181b9090b5c504e"
          },
          "reassignedToId": {
            "type": "string",
            "description": "The identity id to reassign an item to",
            "example": "2c91808781a71ddb0181b9090b53504a"
          },
          "configType": {
            "$ref": "#/components/schemas/ConfigTypeEnum"
          },
          "startDate": {
            "type": "string",
            "description": "The date from which to start reassigning work items",
            "format": "date-time",
            "example": "2022-07-21T11:13:12.345Z"
          },
          "endDate": {
            "type": "string",
            "description": "The date from which to stop reassigning work items.  If this is an null string it indicates a permanent reassignment.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-07-30T17:00:00.000Z"
          }
        }
      },
      "ConfigurationItemResponse": {
        "type": "object",
        "description": "The response body of a Reassignment Configuration for a single identity",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/Identity-2"
          },
          "configDetails": {
            "type": "array",
            "description": "Details of how work should be reassigned for an Identity",
            "items": {
              "$ref": "#/components/schemas/ConfigurationDetailsResponse"
            }
          }
        }
      },
      "ReassignmentTypeEnum": {
        "type": "string",
        "description": "Enum list containing types of Reassignment that can be found in the evaluate response.",
        "enum": [
          "MANUAL_REASSIGNMENT,",
          "AUTOMATIC_REASSIGNMENT,",
          "AUTO_ESCALATION,",
          "SELF_REVIEW_DELEGATION"
        ],
        "example": "AUTOMATIC_REASSIGNMENT"
      },
      "LookupStep": {
        "type": "object",
        "description": "The definition of an Identity according to the Reassignment Configuration service",
        "properties": {
          "reassignedToId": {
            "type": "string",
            "description": "The ID of the Identity who work is reassigned to",
            "example": "869320b6b6f34a169b6178b1a865e66f"
          },
          "reassignedFromId": {
            "type": "string",
            "description": "The ID of the Identity who work is reassigned from",
            "example": "51948a8f306a4e7a9a6f8f5d032fa59e"
          },
          "reassignmentType": {
            "description": "Reassignment type",
            "$ref": "#/components/schemas/ReassignmentTypeEnum"
          }
        }
      },
      "EvaluateResponse": {
        "type": "object",
        "description": "The response body for Evaluate Reassignment Configuration",
        "properties": {
          "reassignToId": {
            "type": "string",
            "description": "The Identity ID which should be the recipient of any work items sent to a specific identity & work type",
            "example": "869320b6b6f34a169b6178b1a865e66f"
          },
          "lookupTrail": {
            "type": "array",
            "description": "List of Reassignments found by looking up the next `TargetIdentity` in a ReassignmentConfiguration",
            "items": {
              "$ref": "#/components/schemas/LookupStep"
            }
          }
        }
      },
      "TenantConfigurationDetails": {
        "type": "object",
        "description": "Details of any tenant-wide Reassignment Configurations (eg. enabled/disabled)",
        "properties": {
          "disabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag to determine if Reassignment Configuration is enabled or disabled for a tenant.  When this flag is set to true, Reassignment Configuration is disabled.",
            "default": false,
            "example": true
          }
        }
      },
      "TenantConfigurationResponse": {
        "type": "object",
        "description": "Tenant-wide Reassignment Configuration settings",
        "properties": {
          "auditDetails": {
            "$ref": "#/components/schemas/AuditDetails"
          },
          "configDetails": {
            "$ref": "#/components/schemas/TenantConfigurationDetails"
          }
        }
      },
      "TenantConfigurationRequest": {
        "type": "object",
        "description": "Tenant-wide Reassignment Configuration settings",
        "properties": {
          "configDetails": {
            "$ref": "#/components/schemas/TenantConfigurationDetails"
          }
        }
      },
      "AccessItemRef": {
        "type": "object",
        "title": "Access Item Ref",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the access item to retrieve the recommendation for.",
            "example": "2c938083633d259901633d2623ec0375"
          },
          "type": {
            "type": "string",
            "example": "ENTITLEMENT",
            "description": "Access item's type.",
            "enum": [
              "ENTITLEMENT",
              "ACCESS_PROFILE",
              "ROLE"
            ]
          }
        }
      },
      "RecommendationRequest": {
        "type": "object",
        "title": "Recommendation Request",
        "properties": {
          "identityId": {
            "type": "string",
            "description": "The identity ID",
            "example": "2c938083633d259901633d25c68c00fa"
          },
          "item": {
            "$ref": "#/components/schemas/AccessItemRef"
          }
        }
      },
      "FeatureValueDto": {
        "type": "object",
        "title": "Feature Value Dto",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The type of feature",
            "example": "department"
          },
          "numerator": {
            "type": "integer",
            "format": "int32",
            "example": 14,
            "description": "The number of identities that have access to the feature"
          },
          "denominator": {
            "type": "integer",
            "format": "int32",
            "example": 14,
            "description": "The number of identities with the corresponding feature"
          }
        }
      },
      "RecommenderCalculations": {
        "properties": {
          "identityId": {
            "type": "string",
            "description": "The ID of the identity",
            "example": "2c91808457d8f3ab0157e3e62cb4213c"
          },
          "entitlementId": {
            "type": "string",
            "description": "The entitlement ID",
            "example": "2c91809050db617d0150e0bf3215385e"
          },
          "recommendation": {
            "type": "string",
            "description": "The actual recommendation",
            "example": "YES"
          },
          "overallWeightedScore": {
            "type": "number",
            "description": "The overall weighted score"
          },
          "featureWeightedScores": {
            "type": "object",
            "description": "The weighted score of each individual feature",
            "additionalProperties": {
              "type": "number"
            }
          },
          "threshold": {
            "type": "number",
            "description": "The configured value against which the overallWeightedScore is compared"
          },
          "identityAttributes": {
            "type": "object",
            "description": "The values for your configured features",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "featureValues": {
            "$ref": "#/components/schemas/FeatureValueDto",
            "description": "The feature details"
          }
        }
      },
      "RecommendationResponse": {
        "type": "object",
        "title": "Recommendation Response",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/RecommendationRequest"
          },
          "recommendation": {
            "type": "string",
            "example": "YES",
            "description": "The recommendation - YES if the access is recommended, NO if not recommended, MAYBE if there is not enough information to make a recommendation, NOT_FOUND if the identity is not found in the system",
            "enum": [
              "YES",
              "NO",
              "MAYBE",
              "NOT_FOUND"
            ]
          },
          "interpretations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of interpretations explaining the recommendation. The array is empty if includeInterpretations is false or not present in the request. e.g. - [ \"Not approved in the last 6 months.\" ]. Interpretations will be translated using the client's locale as found in the Accept-Language header. If a translation for the client's locale cannot be found, the US English translation will be returned.",
            "example": [
              "75% of identities with the same department have this access. This information had a high impact on the overall score.",
              "67% of identities with the same peer group have this access. This information had a low impact on the overall score.",
              "42% of identities with the same location have this access. This information had a low impact on the overall score."
            ]
          },
          "translationMessages": {
            "type": "array",
            "example": [
              {
                "key": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_HIGH",
                "values": [
                  "75",
                  "department"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/TranslationMessage"
            },
            "description": "The list of translation messages, if they have been requested."
          },
          "recommenderCalculations": {
            "$ref": "#/components/schemas/RecommenderCalculations",
            "description": "The calcuations performed behind the scenes that provide recommendations to the user."
          }
        }
      },
      "RecommendationConfigDto": {
        "type": "object",
        "title": "Recommendation Config Dto",
        "properties": {
          "recommenderFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of identity attributes to use for calculating certification recommendations",
            "example": [
              "jobTitle",
              "location",
              "peer_group",
              "department",
              "active"
            ]
          },
          "peerGroupPercentageThreshold": {
            "type": "number",
            "description": "The percent value that the recommendation calculation must surpass to produce a YES recommendation",
            "minimum": 0,
            "maximum": 1,
            "format": "float",
            "example": 0.5
          },
          "runAutoSelectOnce": {
            "type": "boolean",
            "description": "If true, rulesRecommenderConfig will be refreshed with new programatically selected attribute and threshold values on the next pipeline run",
            "default": false,
            "example": false
          },
          "onlyTuneThreshold": {
            "type": "boolean",
            "description": "If true, rulesRecommenderConfig will be refreshed with new programatically selected threshold values on the next pipeline run",
            "default": false,
            "example": false
          }
        }
      },
      "RequestableObjectRequestStatus": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "PENDING",
          "ASSIGNED",
          null
        ],
        "description": "Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results.",
        "example": "AVAILABLE"
      },
      "RequestableObject": {
        "type": "object",
        "title": "Requestable Object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the requestable object itself",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the requestable object",
            "example": "Applied Research Access"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-11T18:45:37.098Z",
            "description": "The time when the requestable object was created"
          },
          "modified": {
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2018-06-25T20:22:28.104Z",
            "description": "The time when the requestable object was last modified"
          },
          "description": {
            "type": "string",
            "description": "Description of the requestable object.",
            "example": "Access to research information, lab results, and schematics.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RequestableObjectType"
          },
          "requestStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestableObjectRequestStatus"
              },
              {
                "nullable": true
              }
            ]
          },
          "identityRequestId": {
            "type": "string",
            "description": "If *requestStatus* is *PENDING*, indicates the id of the associated account activity.",
            "nullable": true,
            "example": null
          },
          "ownerRef": {
            "$ref": "#/components/schemas/IdentityReferenceWithNameAndEmail"
          },
          "requestCommentsRequired": {
            "type": "boolean",
            "description": "Whether the requester must provide comments when requesting the object.",
            "example": false
          }
        }
      },
      "RoleInsightsResponse": {
        "type": "object",
        "title": "Role Insights Response",
        "properties": {
          "id": {
            "type": "string",
            "description": "Request Id for a role insight generation request",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time role insights request was created.",
            "example": "2020-09-16T18:49:32.150Z"
          },
          "lastGenerated": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time role insights request was completed.",
            "example": "2020-09-16T18:50:12.150Z"
          },
          "numberOfUpdates": {
            "type": "integer",
            "description": "Total number of updates for this request. Starts with 0 and will have correct number when request is COMPLETED.",
            "example": 0
          },
          "roleIds": {
            "description": "The role IDs that are in this request.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Request status",
            "enum": [
              "CREATED",
              "IN PROGRESS",
              "COMPLETED",
              "FAILED"
            ]
          }
        },
        "example": {
          "id": "c9aa02f7-86b0-4bc4-84bd-3116a6131e77",
          "createdDate": "2020-09-16T18:49:32.150Z",
          "lastGenerated": "2020-09-16T18:49:32.150Z",
          "numberOfUpdates": 0,
          "roleIds": [
            "2c91808e720e94f8017253287c0a44f4",
            "2c918087723ac2800172532191540e03",
            "2c9180986e4c8592016e6b15eaef447c"
          ],
          "status": "CREATED"
        }
      },
      "RoleInsightsSummary": {
        "type": "object",
        "title": "Role Insights Summary",
        "properties": {
          "numberOfUpdates": {
            "type": "integer",
            "description": "Total number of roles with updates"
          },
          "lastGenerated": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time role insights were last found.",
            "example": "2020-05-19T13:49:37.385Z"
          },
          "entitlementsIncludedInRoles": {
            "type": "integer",
            "description": "The number of entitlements included in roles (vs free radicals).",
            "example": 45
          },
          "totalNumberOfEntitlements": {
            "type": "integer",
            "description": "The total number of entitlements.",
            "example": 250
          },
          "identitiesWithAccessViaRoles": {
            "type": "integer",
            "description": "The number of identities in roles vs. identities with just entitlements and not in roles.",
            "example": 550
          },
          "totalNumberOfIdentities": {
            "type": "integer",
            "description": "The total number of identities.",
            "example": 980
          }
        }
      },
      "RoleInsightsRole": {
        "type": "object",
        "title": "Role Insights Role",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name",
            "example": "Software Engineer"
          },
          "id": {
            "type": "string",
            "description": "Role id",
            "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
          },
          "description": {
            "type": "string",
            "description": "Role description",
            "example": "Person who develops software"
          },
          "ownerName": {
            "type": "string",
            "description": "Role owner name",
            "example": "Bob"
          },
          "ownerId": {
            "type": "string",
            "description": "Role owner id",
            "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
          }
        }
      },
      "RoleInsightsInsight": {
        "type": "object",
        "title": "Role Insights Insight",
        "properties": {
          "type": {
            "type": "string",
            "description": "The number of identities in this role with the entitlement.",
            "example": "ADD"
          },
          "identitiesWithAccess": {
            "type": "integer",
            "description": "The number of identities in this role with the entitlement.",
            "example": 850
          },
          "identitiesImpacted": {
            "type": "integer",
            "description": "The number of identities in this role that do not have the specified entitlement.",
            "example": 150
          },
          "totalNumberOfIdentities": {
            "type": "integer",
            "description": "The total number of identities.",
            "example": 1000
          },
          "impactedIdentityNames": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoleInsight": {
        "type": "object",
        "title": "Role Insight",
        "properties": {
          "id": {
            "type": "string",
            "description": "Insight id",
            "example": "1467e61e-f284-439c-ba2d-c6cc11cf0941"
          },
          "numberOfUpdates": {
            "type": "integer",
            "description": "Total number of updates for this role",
            "example": 5
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time insights were last created for this role."
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The date-time insights were last modified for this role.",
            "example": "2020-05-19T13:49:37.385Z"
          },
          "role": {
            "$ref": "#/components/schemas/RoleInsightsRole",
            "description": "A role"
          },
          "insight": {
            "$ref": "#/components/schemas/RoleInsightsInsight",
            "description": "The kind of insight this is and some stats"
          }
        }
      },
      "RoleInsightsEntitlementChanges": {
        "type": "object",
        "title": "Role Insights Entitlement Changes",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the entitlement"
          },
          "id": {
            "type": "string",
            "description": "Id of the entitlement"
          },
          "description": {
            "type": "string",
            "description": "Description for the entitlement"
          },
          "attribute": {
            "type": "string",
            "description": "Attribute for the entitlement"
          },
          "value": {
            "type": "string",
            "description": "Attribute value for the entitlement"
          },
          "source": {
            "type": "string",
            "description": "Source or the application for the entitlement"
          },
          "insight": {
            "$ref": "#/components/schemas/RoleInsightsInsight",
            "description": "The kind of insight this is and some stats"
          }
        }
      },
      "RoleInsightsEntitlement": {
        "type": "object",
        "title": "Role Insights Entitlement",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the entitlement"
          },
          "id": {
            "type": "string",
            "description": "Id of the entitlement"
          },
          "description": {
            "type": "string",
            "description": "Description for the entitlement"
          },
          "source": {
            "type": "string",
            "description": "Source or the application for the entitlement"
          },
          "attribute": {
            "type": "string",
            "description": "Attribute for the entitlement"
          },
          "value": {
            "type": "string",
            "description": "Attribute value for the entitlement"
          }
        },
        "example": {
          "name": "Administrator",
          "id": "8c190e67-87aa-4ed9-a90b-d9d5344523fb",
          "description": "Full administrative access to IdentityNow",
          "source": "IdentityNow",
          "attribute": "assignedGroups",
          "value": "ORG_ADMIN"
        }
      },
      "RoleInsightsIdentities": {
        "type": "object",
        "title": "Role Insights Identities",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id for identity"
          },
          "name": {
            "type": "string",
            "description": "Name for identity"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": "8c190e67-87aa-4ed9-a90b-d9d5344523fb",
          "name": "Adam Smith",
          "attributes": {
            "department": "Human Resources-tah-mgb-dnd",
            "firstName": "Adam",
            "jobTitle": "Sales Analyst",
            "location": "Mexico"
          }
        }
      },
      "RoleMiningSessionScope": {
        "type": "object",
        "title": "Role Mining Session Scope",
        "properties": {
          "identityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of identities for this role mining session.",
            "example": [
              "2c918090761a5aac0176215c46a62d58",
              "2c918090761a5aac01722015c46a62d42"
            ]
          },
          "criteria": {
            "type": "string",
            "description": "The \"search\" criteria that produces the list of identities for this role mining session.",
            "nullable": true,
            "example": "source.name:DataScienceDataset"
          },
          "attributeFilterCriteria": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "The filter criteria for this role mining session.",
            "nullable": true,
            "example": {
              "displayName": {
                "untranslated": "Location: Miami"
              },
              "ariaLabel": {
                "untranslated": "Location: Miami"
              },
              "data": {
                "displayName": {
                  "translateKey": "IDN.IDENTITY_ATTRIBUTES.LOCATION"
                },
                "name": "location",
                "operator": "EQUALS",
                "values": [
                  "Miami"
                ]
              }
            }
          }
        }
      },
      "RoleMiningSessionState": {
        "type": "string",
        "description": "Role mining session status",
        "enum": [
          "CREATED",
          "UPDATED",
          "IDENTITIES_OBTAINED",
          "PRUNE_THRESHOLD_OBTAINED",
          "POTENTIAL_ROLES_PROCESSING",
          "POTENTIAL_ROLES_CREATED"
        ],
        "example": "CREATED"
      },
      "RoleMiningSessionStatus": {
        "type": "object",
        "title": "Role Mining Session Status",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/RoleMiningSessionState",
            "description": "Role mining session state"
          }
        }
      },
      "EntityCreatedByDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the creator",
            "example": "2c918090761a5aac0176215c46a62d58"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the creator",
            "example": "Ashley.Pierce"
          }
        }
      },
      "NullableEntityCreatedByDTO": {
        "type": "string",
        "nullable": true,
        "description": "Workaround to support null",
        "example": "Dummy"
      },
      "RoleMiningRoleType": {
        "type": "string",
        "description": "Role type",
        "enum": [
          "SPECIALIZED",
          "COMMON"
        ],
        "example": "SPECIALIZED"
      },
      "RoleMiningSessionResponse": {
        "type": "object",
        "title": "Role Mining Session Response",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/RoleMiningSessionScope",
            "description": "The scope of identities for this role mining session"
          },
          "minNumIdentitiesInPotentialRole": {
            "type": "integer",
            "nullable": true,
            "description": "Minimum number of identities in a potential role",
            "example": 20
          },
          "scopingMethod": {
            "type": "string",
            "description": "The scoping method of the role mining session",
            "nullable": true,
            "example": "AUTO_RM"
          },
          "prescribedPruneThreshold": {
            "type": "integer",
            "nullable": true,
            "description": "The computed (or prescribed) prune threshold for this session",
            "example": 83
          },
          "pruneThreshold": {
            "type": "integer",
            "nullable": true,
            "description": "The prune threshold to be used for this role mining session",
            "example": 70
          },
          "potentialRoleCount": {
            "type": "integer",
            "description": "The number of potential roles",
            "example": 8
          },
          "potentialRolesReadyCount": {
            "type": "integer",
            "description": "The number of potential roles which have completed processing",
            "example": 4
          },
          "status": {
            "$ref": "#/components/schemas/RoleMiningSessionStatus",
            "description": "The role mining session status"
          },
          "emailRecipientId": {
            "type": "string",
            "description": "The id of the user who will receive an email about the role mining session",
            "nullable": true
          },
          "createdBy": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityCreatedByDTO"
              },
              {
                "$ref": "#/components/schemas/NullableEntityCreatedByDTO"
              }
            ],
            "description": "The session created by details"
          },
          "identityCount": {
            "type": "integer",
            "description": "The number of identities",
            "example": 39
          },
          "saved": {
            "type": "boolean",
            "description": "The session's saved status",
            "default": false,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The session's saved name",
            "nullable": true,
            "example": "Saved RM Session - 07/10"
          },
          "dataFilePath": {
            "type": "string",
            "description": "The data file path of the role mining session",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Session Id for this role mining session",
            "example": "8c190e67-87aa-4ed9-a90b-d9d5344523fb"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this role mining session was created."
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this role mining session was completed."
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining session type"
          }
        },
        "example": {
          "scope": {
            "identityIds": [],
            "criteria": "source.name:DataScienceDataset",
            "attributeFilterCriteria": null
          },
          "scopingMethod": "AUTO_RM",
          "minNumIdentitiesInPotentialRole": 20,
          "pruneThreshold": 70,
          "prescribedPruneThreshold": 83,
          "potentialRoleCount": 8,
          "potentialRolesReadyCount": 4,
          "status": {
            "state": "POTENTIAL_ROLES_PROCESSING"
          },
          "type": "SPECIALIZED",
          "emailRecipientId": null,
          "createdBy": null,
          "identityCount": 0,
          "saved": false,
          "name": null,
          "dataFilePath": null,
          "id": "602ba738-cf48-499b-a780-7b67b3fc1ecf",
          "createdDate": "2021-09-08T16:11:05.348Z",
          "modifiedDate": "2021-09-08T16:11:05.348Z"
        }
      },
      "RoleMiningSessionDto": {
        "type": "object",
        "title": "Role Mining Session Dto",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/RoleMiningSessionScope",
            "description": "The scope of identities for this role mining session",
            "example": {
              "identityIds": [],
              "criteria": "source.name:DataScienceDataset",
              "attributeFilterCriteria": [
                {
                  "displayName": {
                    "untranslated": "Location: Miami"
                  },
                  "ariaLabel": {
                    "untranslated": "Location: Miami"
                  },
                  "data": {
                    "displayName": {
                      "translateKey": "IDN.IDENTITY_ATTRIBUTES.LOCATION"
                    },
                    "name": "location",
                    "operator": "EQUALS",
                    "values": [
                      "Miami"
                    ]
                  }
                }
              ]
            }
          },
          "pruneThreshold": {
            "type": "integer",
            "description": "The prune threshold to be used or null to calculate prescribedPruneThreshold",
            "nullable": true,
            "example": 50,
            "format": "int32"
          },
          "prescribedPruneThreshold": {
            "type": "integer",
            "description": "The calculated prescribedPruneThreshold",
            "nullable": true,
            "example": 10,
            "format": "int32"
          },
          "minNumIdentitiesInPotentialRole": {
            "type": "integer",
            "description": "Minimum number of identities in a potential role",
            "nullable": true,
            "example": 20,
            "format": "int32"
          },
          "potentialRoleCount": {
            "type": "integer",
            "description": "Number of potential roles",
            "example": 0,
            "format": "int32"
          },
          "potentialRolesReadyCount": {
            "type": "integer",
            "description": "Number of potential roles ready",
            "example": 0,
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining session type",
            "example": "SPECIALIZED"
          },
          "emailRecipientId": {
            "type": "string",
            "description": "The id of the user who will receive an email about the role mining session",
            "nullable": true,
            "example": "2c918090761a5aac0176215c46a62d58"
          },
          "identityCount": {
            "type": "integer",
            "description": "Number of identities in the population which meet the search criteria or identity list provided",
            "example": 0,
            "format": "int32"
          },
          "saved": {
            "type": "boolean",
            "description": "The session's saved status",
            "default": false,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The session's saved name",
            "nullable": true,
            "example": "Saved RM Session - 07/10"
          }
        }
      },
      "RoleMiningPotentialRoleRef": {
        "type": "object",
        "title": "Role Mining Potential Role Ref",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the potential role",
            "example": "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
          },
          "name": {
            "type": "string",
            "description": "Name of the potential role",
            "example": "Potential Role - e0cc5d"
          }
        }
      },
      "RoleMiningPotentialRoleProvisionState": {
        "type": "string",
        "description": "Provision state",
        "enum": [
          "POTENTIAL",
          "PENDING",
          "COMPLETE",
          "FAILED"
        ],
        "example": "POTENTIAL"
      },
      "RoleMiningSessionScopingMethod": {
        "type": "string",
        "description": "The scoping method used in the current role mining session.",
        "enum": [
          "MANUAL",
          "AUTO_RM"
        ],
        "example": "MANUAL"
      },
      "RoleMiningSessionParametersDto": {
        "type": "object",
        "title": "Role Mining Session Parameters Dto",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the role mining session",
            "example": "9f36f5e5-1e81-4eca-b087-548959d91c71"
          },
          "name": {
            "type": "string",
            "description": "The session's saved name",
            "nullable": true,
            "example": "Saved RM Session - 07/10"
          },
          "minNumIdentitiesInPotentialRole": {
            "type": "integer",
            "description": "Minimum number of identities in a potential role",
            "nullable": true,
            "example": 20,
            "format": "int32"
          },
          "pruneThreshold": {
            "type": "integer",
            "description": "The prune threshold to be used or null to calculate prescribedPruneThreshold",
            "nullable": true,
            "example": 5,
            "format": "int32"
          },
          "saved": {
            "type": "boolean",
            "default": true,
            "description": "The session's saved status",
            "example": true
          },
          "scope": {
            "$ref": "#/components/schemas/RoleMiningSessionScope",
            "description": "The scope of identities for this role mining session",
            "example": {
              "identityIds": [],
              "criteria": "source.name:DataScienceDataset",
              "attributeFilterCriteria": {
                "displayName": {
                  "untranslated": "Location: Miami"
                },
                "ariaLabel": {
                  "untranslated": "Location: Miami"
                },
                "data": {
                  "displayName": {
                    "translateKey": "IDN.IDENTITY_ATTRIBUTES.LOCATION"
                  },
                  "name": "location",
                  "operator": "EQUALS",
                  "values": [
                    "Miami"
                  ]
                }
              }
            }
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining potential type"
          },
          "state": {
            "$ref": "#/components/schemas/RoleMiningSessionState",
            "description": "Role mining session state"
          },
          "scopingMethod": {
            "$ref": "#/components/schemas/RoleMiningSessionScopingMethod",
            "description": "Scoping method used in current role mining session"
          }
        }
      },
      "RoleMiningPotentialRoleSummary": {
        "type": "object",
        "title": "Role Mining Potential Role Summary",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the potential role",
            "example": "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
          },
          "name": {
            "type": "string",
            "description": "Name of the potential role",
            "example": "Potential Role - e0cc5d"
          },
          "potentialRoleRef": {
            "$ref": "#/components/schemas/RoleMiningPotentialRoleRef",
            "description": "Details about the potential role"
          },
          "identityCount": {
            "type": "integer",
            "description": "The number of identities in a potential role.",
            "format": "int32",
            "example": 25
          },
          "entitlementCount": {
            "type": "integer",
            "description": "The number of entitlements in a potential role.",
            "format": "int32",
            "example": 15
          },
          "identityGroupStatus": {
            "type": "string",
            "description": "The status for this identity group which can be \"REQUESTED\" or \"OBTAINED\"",
            "example": "OBTAINED"
          },
          "provisionState": {
            "$ref": "#/components/schemas/RoleMiningPotentialRoleProvisionState",
            "description": "The status of provisioning for this potential role. Can be \"POTENTIAL\", \"PENDING\", \"FAILED\", or \"COMPLETE\".",
            "example": "PENDING"
          },
          "roleId": {
            "type": "string",
            "description": "ID of the provisioned role in IIQ or IDN.  Null if this potential role has not been provisioned.",
            "nullable": true,
            "example": "2a4be6fbcf3c4e66b95a0c15ffd591"
          },
          "density": {
            "type": "integer",
            "description": "The density metric (0-100) of this potential role. Higher density values indicate higher similarity amongst the identities.",
            "format": "int32",
            "example": 90
          },
          "freshness": {
            "type": "integer",
            "description": "The freshness metric (0-100) of this potential role. Higher freshness values indicate this potential role is more distinctive compared to existing roles.",
            "format": "int32",
            "example": 70
          },
          "quality": {
            "type": "integer",
            "description": "The quality metric (0-100) of this potential role. Higher quality values indicate this potential role has high density and freshness.",
            "format": "int32",
            "example": 80
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining potential type."
          },
          "createdBy": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityCreatedByDTO"
              },
              {
                "$ref": "#/components/schemas/NullableEntityCreatedByDTO"
              }
            ],
            "description": "The potential role created by details"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this potential role was created."
          },
          "saved": {
            "type": "boolean",
            "description": "The potential role's saved status",
            "default": false,
            "example": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the potential role"
          },
          "session": {
            "$ref": "#/components/schemas/RoleMiningSessionParametersDto",
            "description": "The session parameters of the potential role."
          }
        }
      },
      "RoleMiningIdentityDistribution": {
        "type": "object",
        "title": "Role Mining Identity Distribution",
        "properties": {
          "attributeName": {
            "type": "string",
            "description": "Id of the potential role",
            "example": "department"
          },
          "distribution": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": [
              {
                "attributeValue": "NM Tier 3",
                "count": 6
              }
            ]
          }
        }
      },
      "RoleMiningPotentialRole": {
        "type": "object",
        "title": "Role Mining Potential Role",
        "properties": {
          "createdBy": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityCreatedByDTO"
              },
              {
                "$ref": "#/components/schemas/NullableEntityCreatedByDTO"
              }
            ],
            "description": "The session created by details"
          },
          "density": {
            "type": "integer",
            "description": "The density of a potential role.",
            "example": 75,
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of a potential role.",
            "example": "Potential Role for Accounting dept"
          },
          "entitlementCount": {
            "type": "integer",
            "description": "The number of entitlements in a potential role.",
            "example": 25,
            "format": "int32"
          },
          "excludedEntitlements": {
            "description": "The list of entitlement ids to be excluded.",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "07a0b4e2",
              "13b4e2a0"
            ]
          },
          "freshness": {
            "type": "integer",
            "description": "The freshness of a potential role.",
            "example": 75,
            "format": "int32"
          },
          "identityCount": {
            "type": "integer",
            "description": "The number of identities in a potential role.",
            "example": 25,
            "format": "int32"
          },
          "identityDistribution": {
            "description": "Identity attribute distribution.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMiningIdentityDistribution"
            }
          },
          "identityIds": {
            "description": "The list of ids in a potential role.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "07a0b4e2",
              "13b4e2a0"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the potential role.",
            "example": "Saved Potential Role - 07/10"
          },
          "provisionState": {
            "$ref": "#/components/schemas/RoleMiningPotentialRoleProvisionState",
            "description": "The provisioning state of a potential role.",
            "nullable": true
          },
          "quality": {
            "type": "integer",
            "description": "The quality of a potential role.",
            "example": 100,
            "format": "int32"
          },
          "roleId": {
            "type": "string",
            "nullable": true,
            "description": "The roleId of a potential role.",
            "example": "07a0b4e2-7a76-44fa-bd0b-c64654b66519"
          },
          "saved": {
            "type": "boolean",
            "description": "The potential role's saved status.",
            "example": true
          },
          "session": {
            "$ref": "#/components/schemas/RoleMiningSessionParametersDto",
            "description": "The session parameters of the potential role."
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining potential type."
          },
          "id": {
            "type": "string",
            "description": "Id of the potential role",
            "example": "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this potential role was created."
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this potential role was modified."
          }
        }
      },
      "RoleMiningPotentialRoleApplication": {
        "type": "object",
        "title": "Role Mining Potential Role Application",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the application",
            "example": {
              "id": "2c9180877212632a017228d5a796292b"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the application",
            "example": {
              "name": "Slack"
            }
          }
        }
      },
      "RoleMiningPotentialRoleEntitlements": {
        "type": "object",
        "title": "Role Mining Potential Role Entitlements",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entitlement",
            "example": {
              "id": "2c9180877212632a017228d5a796292c"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the entitlement",
            "example": {
              "name": "LauncherTest2"
            }
          }
        }
      },
      "RoleMiningEntitlementRef": {
        "type": "object",
        "title": "Role Mining Entitlement Ref",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entitlement",
            "example": "2c91808a7e95e6e0017e96e2086206c8"
          },
          "name": {
            "type": "string",
            "description": "Name of the entitlement",
            "example": "App.entitlement.1"
          },
          "description": {
            "type": "string",
            "description": "Description forthe entitlement",
            "nullable": true,
            "example": "Entitlement 1"
          },
          "attribute": {
            "type": "string",
            "description": "The entitlement attribute",
            "example": "groups"
          }
        }
      },
      "RoleMiningEntitlement": {
        "type": "object",
        "title": "Role Mining Entitlement",
        "properties": {
          "entitlementRef": {
            "$ref": "#/components/schemas/RoleMiningEntitlementRef",
            "description": "Details about the entitlement",
            "example": {
              "id": "2c91808a7e95e6e0017e96e2086206c8",
              "name": "App.entitlement.1",
              "description": "Entitlement 1",
              "attribute": "groups"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the entitlement",
            "example": "Add/modify/delete users"
          },
          "applicationName": {
            "type": "string",
            "description": "Application name of the entitlement",
            "example": "AppName"
          },
          "identityCount": {
            "type": "integer",
            "description": "The number of identities with this entitlement in a role.",
            "format": "int32",
            "example": 45
          },
          "popularity": {
            "type": "number",
            "description": "The % popularity of this entitlement in a role.",
            "format": "float",
            "example": 65.2
          },
          "popularityInOrg": {
            "type": "number",
            "description": "The % popularity of this entitlement in the org.",
            "format": "float",
            "example": 35.8
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the source/application.",
            "example": "2c9180877620c1460176267f336a106f"
          },
          "activitySourceState": {
            "type": "string",
            "description": "The status of activity data for the source.   Value is complete or notComplete.",
            "nullable": true,
            "example": "complete"
          },
          "sourceUsagePercent": {
            "type": "number",
            "description": "The percentage of identities in the potential role that have usage of the source/application of this entitlement.",
            "format": "float",
            "nullable": true,
            "example": 65.6
          }
        }
      },
      "RoleMiningPotentialRoleEditEntitlements": {
        "type": "object",
        "title": "Role Mining Potential Role Edit Entitlements",
        "properties": {
          "ids": {
            "description": "The list of entitlement ids to be edited",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude": {
            "type": "boolean",
            "description": "If true, add ids to be exclusion list. If false, remove ids from the exclusion list."
          }
        },
        "example": {
          "ids": [
            "entId1",
            "entId2"
          ],
          "exclude": true
        }
      },
      "RoleMiningIdentity": {
        "type": "object",
        "title": "Role Mining Identity",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the identity"
          },
          "name": {
            "type": "string",
            "description": "Name of the identity"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": "2c9180877212632a017228d5934525e6",
          "name": "Allene Abernathy-Welch",
          "attributes": {
            "jobTitle": "SQL Developer",
            "department": "IT",
            "location": "NYC",
            "firstName": "Allene"
          }
        }
      },
      "RoleMiningPotentialRoleExportRequest": {
        "type": "object",
        "title": "Role Mining Potential Role Export Request",
        "properties": {
          "minEntitlementPopularity": {
            "type": "integer",
            "description": "The minimum popularity among identities in the role which an entitlement must have to be included in the report",
            "example": 0
          },
          "includeCommonAccess": {
            "type": "boolean",
            "description": "If false, do not include entitlements that are highly popular among the entire orginization",
            "example": true
          }
        },
        "example": {
          "minEntitlementPopularity": 0,
          "includeCommonAccess": true
        }
      },
      "RoleMiningPotentialRoleExportState": {
        "type": "string",
        "enum": [
          "QUEUED",
          "IN_PROGRESS",
          "SUCCESS",
          "ERROR"
        ]
      },
      "RoleMiningPotentialRoleExportResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoleMiningPotentialRoleExportRequest"
          },
          {
            "type": "object",
            "properties": {
              "exportId": {
                "type": "string",
                "format": "uuid",
                "description": "ID used to reference this export",
                "example": "0c6cdb76-1227-4aaf-af21-192dbdfbfa04"
              },
              "status": {
                "$ref": "#/components/schemas/RoleMiningPotentialRoleExportState",
                "description": "The status of this export",
                "example": "QUEUED"
              }
            }
          }
        ],
        "example": {
          "exportId": "0c6cdb76-1227-4aaf-af21-192dbdfbfa04",
          "status": "QUEUED",
          "minEntitlementPopularity": 0,
          "includeCommonAccess": true
        }
      },
      "RoleMiningPotentialRoleProvisionRequest": {
        "type": "object",
        "title": "Role Mining Potential Role Provision Request",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Name of the new role being created",
            "example": "Finance - Accounting"
          },
          "roleDescription": {
            "type": "string",
            "description": "Short description of the new role being created",
            "example": "General access for accounting department"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the identity that will own this role",
            "example": "2b568c65bc3c4c57a43bd97e3a8e41"
          },
          "includeIdentities": {
            "type": "boolean",
            "description": "When true, create access requests for the identities associated with the potential role",
            "default": false,
            "example": true
          },
          "directlyAssignedEntitlements": {
            "type": "boolean",
            "description": "When true, assign entitlements directly to the role; otherwise, create access profiles containing the entitlements",
            "default": false,
            "example": false
          }
        }
      },
      "RoleMiningSessionDraftRoleDto": {
        "type": "object",
        "title": "Role Mining Session Draft Role Dto",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the draft role",
            "example": "Saved RM Session - 07/10"
          },
          "description": {
            "type": "string",
            "description": "Draft role description",
            "example": "Person who develops software"
          },
          "identityIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of identities for this role mining session.",
            "example": [
              "2c918090761a5aac0176215c46a62d58",
              "2c918090761a5aac01722015c46a62d42"
            ]
          },
          "entitlementIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of entitlement ids for this role mining session.",
            "example": [
              "2c91808a7624751a01762f19d665220d",
              "2c91808a7624751a01762f19d67c220e"
            ]
          },
          "excludedEntitlements": {
            "type": "array",
            "description": "The list of excluded entitlement ids.",
            "items": {
              "type": "string"
            },
            "example": [
              "07a0b4e2",
              "13b4e2a0"
            ]
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Last modified date",
            "example": "2020-09-16T18:49:32.150Z"
          },
          "type": {
            "$ref": "#/components/schemas/RoleMiningRoleType",
            "description": "Role mining session type",
            "example": "SPECIALIZED"
          },
          "id": {
            "type": "string",
            "description": "Id of the potential draft role",
            "example": "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this potential draft role was created."
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this potential draft role was modified."
          }
        }
      },
      "RoleMiningPotentialRoleSourceUsage": {
        "type": "object",
        "title": "Role Mining Potential Role Source Usage",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identity ID",
            "example": "2c918089762475180176267f894b54dc"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the identity",
            "example": "Kirk Koepp"
          },
          "email": {
            "type": "string",
            "description": "Email address for the identity",
            "example": "kirk.koepp@testmail.identitynow.com"
          },
          "usageCount": {
            "type": "integer",
            "description": "The number of days there has been usage of the source by the identity.",
            "format": "int32",
            "example": 25
          }
        }
      },
      "AccessProfileRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Access Profile",
            "example": "ff808081751e6e129f1518161919ecca"
          },
          "type": {
            "type": "string",
            "description": "Type of requested object. This field must be either left null or set to 'ACCESS_PROFILE' when creating an Access Profile, otherwise a 400 Bad Request error will result.",
            "enum": [
              "ACCESS_PROFILE"
            ],
            "example": "ACCESS_PROFILE"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the Access Profile. This field is ignored on input.",
            "example": "Access Profile 2567"
          }
        }
      },
      "RoleMembershipSelectorType": {
        "type": "string",
        "enum": [
          "STANDARD",
          "IDENTITY_LIST"
        ],
        "description": "This enum characterizes the type of a Role's membership selector. Only the following two are fully supported:\n\nSTANDARD: Indicates that Role membership is defined in terms of a criteria expression\n\nIDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed",
        "example": "IDENTITY_LIST"
      },
      "RoleCriteriaOperation": {
        "type": "string",
        "enum": [
          "EQUALS",
          "NOT_EQUALS",
          "CONTAINS",
          "STARTS_WITH",
          "ENDS_WITH",
          "AND",
          "OR"
        ],
        "description": "An operation",
        "example": "EQUALS"
      },
      "RoleCriteriaKeyType": {
        "type": "string",
        "enum": [
          "IDENTITY",
          "ACCOUNT",
          "ENTITLEMENT"
        ],
        "description": "Indicates whether the associated criteria represents an expression on identity attributes, account attributes, or entitlements, respectively.",
        "example": "ACCOUNT"
      },
      "RoleCriteriaKey": {
        "type": "object",
        "nullable": true,
        "description": "Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RoleCriteriaKeyType"
          },
          "property": {
            "type": "string",
            "description": "The name of the attribute or entitlement to which the associated criteria applies.",
            "example": "attribute.email"
          },
          "sourceId": {
            "type": "string",
            "nullable": true,
            "description": "ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT",
            "example": "2c9180867427f3a301745aec18211519"
          }
        },
        "required": [
          "type",
          "property"
        ]
      },
      "RoleCriteriaLevel3": {
        "type": "object",
        "description": "Defines STANDARD type Role membership",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/RoleCriteriaOperation"
          },
          "key": {
            "$ref": "#/components/schemas/RoleCriteriaKey"
          },
          "stringValue": {
            "type": "string",
            "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          }
        }
      },
      "RoleCriteriaLevel2": {
        "type": "object",
        "nullable": true,
        "description": "Defines STANDARD type Role membership",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/RoleCriteriaOperation"
          },
          "key": {
            "$ref": "#/components/schemas/RoleCriteriaKey"
          },
          "stringValue": {
            "type": "string",
            "nullable": true,
            "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCriteriaLevel3"
            },
            "nullable": true,
            "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa."
          }
        }
      },
      "RoleCriteriaLevel1": {
        "type": "object",
        "nullable": true,
        "description": "Defines STANDARD type Role membership",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/RoleCriteriaOperation"
          },
          "key": {
            "$ref": "#/components/schemas/RoleCriteriaKey"
          },
          "stringValue": {
            "type": "string",
            "nullable": true,
            "description": "String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.",
            "example": "carlee.cert1c9f9b6fd@mailinator.com"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleCriteriaLevel2"
            },
            "nullable": true,
            "description": "Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa."
          }
        }
      },
      "RoleMembershipIdentity": {
        "type": "object",
        "description": "A reference to an Identity in an IDENTITY_LIST role membership criteria.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DtoType",
            "nullable": true,
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity id",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Human-readable display name of the Identity.",
            "example": "Thomas Edison"
          },
          "aliasName": {
            "type": "string",
            "nullable": true,
            "description": "User name of the Identity",
            "example": "t.edison"
          }
        }
      },
      "RoleMembershipSelector": {
        "type": "object",
        "nullable": true,
        "description": "When present, specifies that the Role is to be granted to Identities which either satisfy specific criteria or which are members of a given list of Identities.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RoleMembershipSelectorType"
          },
          "criteria": {
            "$ref": "#/components/schemas/RoleCriteriaLevel1",
            "nullable": true
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMembershipIdentity"
            },
            "nullable": true,
            "description": "Defines role membership as being exclusive to the specified Identities, when type is IDENTITY_LIST."
          }
        }
      },
      "ApprovalSchemeForRole": {
        "type": "object",
        "properties": {
          "approverType": {
            "type": "string",
            "enum": [
              "OWNER",
              "MANAGER",
              "GOVERNANCE_GROUP"
            ],
            "description": "Describes the individual or group that is responsible for an approval step. Values are as follows.\n\n**OWNER**: Owner of the associated Role\n\n**MANAGER**: Manager of the Identity making the request\n\n**GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field",
            "example": "GOVERNANCE_GROUP"
          },
          "approverId": {
            "type": "string",
            "nullable": true,
            "description": "Id of the specific approver, used only when approverType is GOVERNANCE_GROUP",
            "example": "46c79819-a69f-49a2-becb-12c971ae66c6"
          }
        }
      },
      "RequestabilityForRole": {
        "type": "object",
        "properties": {
          "commentsRequired": {
            "type": "boolean",
            "description": "Whether the requester of the containing object must provide comments justifying the request",
            "example": true,
            "nullable": true,
            "default": false
          },
          "denialCommentsRequired": {
            "type": "boolean",
            "description": "Whether an approver must provide comments when denying the request",
            "example": true,
            "nullable": true,
            "default": false
          },
          "reauthorizationRequired": {
            "type": "boolean",
            "description": "Indicates whether reauthorization is required for the request.",
            "example": true,
            "nullable": true,
            "default": false
          },
          "approvalSchemes": {
            "type": "array",
            "description": "List describing the steps in approving the request",
            "items": {
              "$ref": "#/components/schemas/ApprovalSchemeForRole"
            }
          }
        }
      },
      "RevocabilityForRole": {
        "type": "object",
        "properties": {
          "commentsRequired": {
            "type": "boolean",
            "description": "Whether the requester of the containing object must provide comments justifying the request",
            "example": false,
            "nullable": true,
            "default": false
          },
          "denialCommentsRequired": {
            "type": "boolean",
            "description": "Whether an approver must provide comments when denying the request",
            "example": false,
            "nullable": true,
            "default": false
          },
          "approvalSchemes": {
            "type": "array",
            "description": "List describing the steps in approving the revocation request",
            "items": {
              "$ref": "#/components/schemas/ApprovalSchemeForRole"
            }
          }
        }
      },
      "DimensionRef": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DIMENSION"
            ],
            "description": "The type of the object to which this reference applies",
            "example": "DIMENSION"
          },
          "id": {
            "type": "string",
            "description": "ID of the object to which this reference applies",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the object to which this reference applies",
            "example": "Role 2"
          }
        }
      },
      "Role": {
        "type": "object",
        "description": "A Role",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the Role. This field must be left null when creating an Role, otherwise a 400 Bad Request error will result.",
            "example": "2c918086749d78830174a1a40e121518"
          },
          "name": {
            "type": "string",
            "description": "The human-readable display name of the Role",
            "maxLength": 128,
            "example": "Role 2567"
          },
          "created": {
            "type": "string",
            "description": "Date the Role was created",
            "format": "date-time",
            "example": "2021-03-01T22:32:58.104Z",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Date the Role was last modified.",
            "format": "date-time",
            "example": "2021-03-02T20:22:28.104Z",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable description of the Role",
            "example": "Urna amet cursus pellentesque nisl orci maximus lorem nisl euismod fusce morbi placerat adipiscing maecenas nisi tristique et metus et lacus sed morbi nunc nisl maximus magna arcu varius sollicitudin elementum enim maecenas nisi id ipsum tempus fusce diam ipsum tortor."
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerReference"
          },
          "accessProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessProfileRef"
            },
            "nullable": true
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntitlementRef"
            }
          },
          "membership": {
            "$ref": "#/components/schemas/RoleMembershipSelector",
            "nullable": true
          },
          "legacyMembershipInfo": {
            "type": "object",
            "nullable": true,
            "description": "This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration.",
            "example": {
              "type": "IDENTITY_LIST"
            },
            "additionalProperties": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the Role is enabled or not.",
            "example": true,
            "default": false
          },
          "requestable": {
            "type": "boolean",
            "description": "Whether the Role can be the target of access requests.",
            "example": true,
            "default": false
          },
          "accessRequestConfig": {
            "$ref": "#/components/schemas/RequestabilityForRole",
            "nullable": true,
            "description": "Access request configuration for this object"
          },
          "revocationRequestConfig": {
            "$ref": "#/components/schemas/RevocabilityForRole",
            "nullable": true,
            "default": null,
            "description": "Revocation request configuration for this object."
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of IDs of segments, if any, to which this Role is assigned.",
            "example": [
              "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
              "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
            ]
          },
          "dimensional": {
            "description": "Whether the Role is dimensional.",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "dimensionRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionRef"
            },
            "nullable": true,
            "description": "List of references to dimensions to which this Role is assigned. This field is only relevant if the Role is dimensional."
          },
          "accessModelMetadata": {
            "$ref": "#/components/schemas/AttributeDTOList",
            "example": [
              {
                "key": "iscFederalClassifications",
                "name": "Federal Classifications",
                "multiselect": true,
                "status": "active",
                "type": "governance",
                "objectTypes": [
                  "general"
                ],
                "description": "Classification used by government organizations to specify the level of confidentiality for an access item.",
                "values": [
                  {
                    "value": "secret",
                    "name": "Secret",
                    "status": "active"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "name",
          "owner"
        ]
      },
      "RoleBulkDeleteRequest": {
        "type": "object",
        "properties": {
          "roleIds": {
            "description": "List of IDs of Roles to be deleted.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2c9180847812e0b1017817051919ecca",
              "2c9180887812e0b201781e129f151816"
            ]
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "RoleAssignmentSourceType": {
        "type": "string",
        "enum": [
          "ACCESS_REQUEST",
          "ROLE_MEMBERSHIP"
        ],
        "description": "Type which indicates how a particular Identity obtained a particular Role",
        "example": "ACCESS_REQUEST"
      },
      "RoleIdentity": {
        "type": "object",
        "description": "A subset of the fields of an Identity which is a member of a Role.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Identity",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "aliasName": {
            "type": "string",
            "description": "The alias / username of the Identity",
            "example": "t.edison"
          },
          "name": {
            "type": "string",
            "description": "The human-readable display name of the Identity",
            "example": "Thomas Edison"
          },
          "email": {
            "type": "string",
            "description": "Email address of the Identity",
            "example": "t.edison@identitynow.com"
          },
          "roleAssignmentSource": {
            "$ref": "#/components/schemas/RoleAssignmentSourceType"
          }
        }
      },
      "OwnerReferenceSegments": {
        "type": "object",
        "nullable": true,
        "description": "The owner of this object.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "IDENTITY"
            ],
            "description": "Owner type. This field must be either left null or set to 'IDENTITY' on input, otherwise a 400 Bad Request error will result.",
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity id",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner's display name, otherwise a 400 Bad Request error will result.",
            "example": "support"
          }
        }
      },
      "Value": {
        "type": "object",
        "title": "Value",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "description": "The type of attribute value",
            "example": "STRING"
          },
          "value": {
            "type": "string",
            "description": "The attribute value",
            "example": "Austin"
          }
        }
      },
      "Children": {
        "type": "object",
        "title": "Children",
        "properties": {
          "operator": {
            "type": "string",
            "example": "EQUALS"
          },
          "attribute": {
            "type": "string",
            "example": "country"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          },
          "children": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Expression": {
        "type": "object",
        "title": "Expression",
        "properties": {
          "operator": {
            "type": "string",
            "description": "Operator for the expression",
            "enum": [
              "AND",
              "EQUALS"
            ],
            "example": "EQUALS"
          },
          "attribute": {
            "type": "string",
            "nullable": true,
            "description": "Name for the attribute",
            "example": "location"
          },
          "value": {
            "$ref": "#/components/schemas/Value"
          },
          "children": {
            "type": "array",
            "nullable": true,
            "description": "List of expressions",
            "items": {
              "$ref": "#/components/schemas/Children"
            },
            "example": []
          }
        }
      },
      "VisibilityCriteria": {
        "type": "object",
        "title": "Visibility Criteria",
        "nullable": true,
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/Expression"
          }
        }
      },
      "Segment": {
        "type": "object",
        "title": "Segment",
        "properties": {
          "id": {
            "type": "string",
            "description": "The segment's ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "name": {
            "type": "string",
            "description": "The segment's business name.",
            "example": "segment-xyz"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the segment is created.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the segment is modified.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "description": {
            "type": "string",
            "description": "The segment's optional description.",
            "example": "This segment represents xyz"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerReferenceSegments"
          },
          "visibilityCriteria": {
            "$ref": "#/components/schemas/VisibilityCriteria"
          },
          "active": {
            "type": "boolean",
            "description": "This boolean indicates whether the segment is currently active. Inactive segments have no effect.",
            "default": false,
            "example": true
          }
        }
      },
      "SendTestNotificationRequestDto": {
        "type": "object",
        "title": "Send Test Notification Request Dto",
        "properties": {
          "key": {
            "type": "string",
            "description": "The template notification key.",
            "example": "cloud_manual_work_item_summary"
          },
          "medium": {
            "type": "string",
            "description": "The notification medium. Has to be one of the following enum values.",
            "enum": [
              "EMAIL",
              "SLACK",
              "TEAMS"
            ]
          },
          "context": {
            "type": "object",
            "description": "A Json object that denotes the context specific to the template."
          }
        }
      },
      "SourceClusterDto": {
        "type": "object",
        "title": "Source Cluster Dto",
        "description": "Source cluster.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Source cluster DTO type.",
            "enum": [
              "CLUSTER"
            ],
            "example": "CLUSTER"
          },
          "id": {
            "type": "string",
            "description": "Source cluster ID.",
            "example": "2c9180847a7fccdd017aa5896f9f4f6f"
          },
          "name": {
            "type": "string",
            "description": "Source cluster display name.",
            "example": "Training VA"
          }
        }
      },
      "ServiceDeskSource": {
        "type": "object",
        "title": "Service Desk Source",
        "description": "Source for Service Desk integration template.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of source for service desk integration template.",
            "enum": [
              "SOURCE"
            ],
            "example": "SOURCE"
          },
          "id": {
            "type": "string",
            "description": "ID of source for service desk integration template.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of source for service desk integration template.",
            "example": "HR Active Directory"
          }
        }
      },
      "ProvisioningConfig": {
        "type": "object",
        "title": "Provisioning Config",
        "description": "Specification of a Service Desk integration provisioning configuration.",
        "properties": {
          "universalManager": {
            "description": "Specifies whether this configuration is used to manage provisioning requests for all sources from the org.  If true, no managedResourceRefs are allowed.",
            "type": "boolean",
            "readOnly": true,
            "default": false,
            "example": true
          },
          "managedResourceRefs": {
            "description": "References to sources for the Service Desk integration template.  May only be specified if universalManager is false.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServiceDeskSource"
                }
              ],
              "properties": {
                "type": {
                  "description": "The type of object being referenced",
                  "enum": [
                    "SOURCE"
                  ],
                  "example": "SOURCE"
                },
                "id": {
                  "description": "ID of the source",
                  "example": "2c91808568c529c60168cca6f90c1313"
                },
                "name": {
                  "description": "Human-readable display name of the source",
                  "example": "My Source"
                }
              }
            },
            "example": [
              {
                "type": "SOURCE",
                "id": "2c9180855d191c59015d291ceb051111",
                "name": "My Source 1"
              },
              {
                "type": "SOURCE",
                "id": "2c9180855d191c59015d291ceb052222",
                "name": "My Source 2"
              }
            ]
          },
          "planInitializerScript": {
            "description": "This is a reference to a plan initializer script.",
            "type": "object",
            "properties": {
              "source": {
                "description": "This is a Rule that allows provisioning instruction changes.",
                "type": "string",
                "example": "<?xml version='1.0' encoding='UTF-8'?>\\r\\n<!DOCTYPE Rule PUBLIC \\\"sailpoint.dtd\\\" \\\"sailpoint.dtd\\\">\\r\\n<Rule name=\\\"Example Rule\\\" type=\\\"BeforeProvisioning\\\">\\r\\n  <Description>Before Provisioning Rule which changes disables and enables to a modify.</Description>\\r\\n  <Source><![CDATA[\\r\\nimport sailpoint.object.*;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest;\\r\\nimport sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\\r\\nimport sailpoint.object.ProvisioningPlan.AttributeRequest;\\r\\nimport sailpoint.object.ProvisioningPlan;\\r\\nimport sailpoint.object.ProvisioningPlan.Operation;\\r\\n\\r\\nfor ( AccountRequest accountRequest : plan.getAccountRequests() ) {\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Disable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n  if ( accountRequest.getOp().equals( ProvisioningPlan.ObjectOperation.Enable ) ) {\\r\\n    accountRequest.setOp( ProvisioningPlan.ObjectOperation.Modify );\\r\\n  }\\r\\n}\\r\\n\\r\\n  ]]></Source>\n"
              }
            }
          },
          "noProvisioningRequests": {
            "description": "Name of an attribute that when true disables the saving of ProvisioningRequest objects whenever plans are sent through this integration.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "provisioningRequestExpiration": {
            "description": "When saving pending requests is enabled, this defines the number of hours the request is allowed to live before it is considered expired and no longer affects plan compilation.",
            "type": "integer",
            "format": "int32",
            "example": 7
          }
        }
      },
      "BeforeProvisioningRuleDto": {
        "type": "object",
        "title": "Before Provisioning Rule Dto",
        "description": "Before Provisioning Rule.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Before Provisioning Rule DTO type.",
            "enum": [
              "RULE"
            ],
            "example": "RULE"
          },
          "id": {
            "type": "string",
            "description": "Before Provisioning Rule ID.",
            "example": "048eb3d55c5a4758bd07dccb87741c78"
          },
          "name": {
            "type": "string",
            "description": "Rule display name.",
            "example": "Before Provisioning Airtable Rule"
          }
        }
      },
      "ServiceDeskIntegrationDto": {
        "allOf": [
          {
            "type": "object",
            "description": "Service Desk integration's specification.",
            "required": [
              "name",
              "description",
              "type",
              "attributes"
            ],
            "properties": {
              "name": {
                "description": "Service Desk integration's name. The name must be unique.",
                "type": "string",
                "example": "Service Desk Integration Name"
              },
              "description": {
                "description": "Service Desk integration's description.",
                "type": "string",
                "example": "A very nice Service Desk integration"
              },
              "type": {
                "description": "Service Desk integration types:\n\n- ServiceNowSDIM\n- ServiceNow\n",
                "type": "string",
                "default": "ServiceNowSDIM",
                "example": "ServiceNowSDIM"
              },
              "ownerRef": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnerDto"
                  }
                ]
              },
              "clusterRef": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SourceClusterDto"
                  }
                ]
              },
              "cluster": {
                "description": "Cluster ID for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).",
                "type": "string",
                "example": "xyzzy999",
                "deprecated": true
              },
              "managedSources": {
                "description": "Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "deprecated": true,
                "example": [
                  "2c9180835d191a86015d28455b4a2329",
                  "2c5680835d191a85765d28455b4a9823"
                ]
              },
              "provisioningConfig": {
                "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations.",
                "$ref": "#/components/schemas/ProvisioningConfig"
              },
              "attributes": {
                "description": "Service Desk integration's attributes. Validation constraints enforced by the implementation.",
                "type": "object",
                "additionalProperties": true,
                "example": {
                  "property": "value",
                  "key": "value"
                }
              },
              "beforeProvisioningRule": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BeforeProvisioningRuleDto"
                  }
                ]
              }
            }
          }
        ]
      },
      "ServiceDeskIntegrationTemplateType": {
        "description": "This represents a Service Desk Integration template type.",
        "required": [
          "type",
          "scriptName"
        ],
        "type": "object",
        "title": "Service Desk Integration Template Type",
        "properties": {
          "name": {
            "description": "This is the name of the type.",
            "example": "aName",
            "type": "string"
          },
          "type": {
            "description": "This is the type value for the type.",
            "example": "aType",
            "type": "string"
          },
          "scriptName": {
            "description": "This is the scriptName attribute value for the type.",
            "example": "aScriptName",
            "type": "string"
          }
        }
      },
      "ServiceDeskIntegrationTemplateDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommonDto"
          },
          {
            "type": "object",
            "description": "This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.",
            "required": [
              "type",
              "attributes",
              "provisioningConfig"
            ],
            "properties": {
              "type": {
                "description": "The 'type' property specifies the type of the Service Desk integration template.",
                "type": "string",
                "example": "Web Service SDIM",
                "default": "Web Service SDIM"
              },
              "attributes": {
                "description": "The 'attributes' property value is a map of attributes available for integrations using this Service Desk integration template.",
                "type": "object",
                "additionalProperties": true
              },
              "provisioningConfig": {
                "description": "The 'provisioningConfig' property specifies the configuration used to provision integrations using the template.",
                "$ref": "#/components/schemas/ProvisioningConfig"
              }
            }
          }
        ]
      },
      "QueuedCheckConfigDetails": {
        "description": "Configuration of maximum number of days and interval for checking Service Desk integration queue status.",
        "required": [
          "provisioningStatusCheckIntervalMinutes",
          "provisioningMaxStatusCheckDays"
        ],
        "type": "object",
        "title": "Queued Check Config Details",
        "properties": {
          "provisioningStatusCheckIntervalMinutes": {
            "description": "Interval in minutes between status checks",
            "type": "string",
            "example": 30
          },
          "provisioningMaxStatusCheckDays": {
            "description": "Maximum number of days to check",
            "type": "string",
            "example": 2
          }
        }
      },
      "SimIntegrationDetails": {
        "type": "object",
        "title": "Sim Integration Details",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommonDto"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the integration",
                "example": "Integration description",
                "nullable": false
              },
              "type": {
                "type": "string",
                "description": "The integration type",
                "example": "ServiceNow Service Desk",
                "nullable": false
              },
              "attributes": {
                "type": "object",
                "description": "The attributes map containing the credentials used to configure the integration.",
                "nullable": true,
                "example": "{\"uid\":\"Walter White\",\"firstname\":\"walter\",\"cloudStatus\":\"UNREGISTERED\",\"displayName\":\"Walter White\",\"identificationNumber\":\"942\",\"lastSyncDate\":1470348809380,\"email\":\"walter@gmail.com\",\"lastname\":\"white\"}"
              },
              "sources": {
                "type": "array",
                "description": "The list of sources (managed resources)",
                "items": {
                  "type": "string"
                },
                "example": [
                  "2c9180835d191a86015d28455b4a2329",
                  "2c5680835d191a85765d28455b4a9823"
                ],
                "nullable": false
              },
              "cluster": {
                "type": "string",
                "description": "The cluster/proxy",
                "example": "xyzzy999",
                "nullable": false
              },
              "statusMap": {
                "type": "object",
                "description": "Custom mapping between the integration result and the provisioning result",
                "example": {
                  "closed_cancelled": "Failed",
                  "closed_complete": "Committed",
                  "closed_incomplete": "Failed",
                  "closed_rejected": "Failed",
                  "in_process": "Queued",
                  "requested": "Queued"
                }
              },
              "request": {
                "type": "object",
                "description": "Request data to customize desc and body of the created ticket",
                "example": {
                  "description": "SailPoint Access Request,",
                  "req_description": "The Service Request created by SailPoint ServiceNow Service Integration Module (SIM).,",
                  "req_short_description": "SailPoint New Access Request Created from IdentityNow,",
                  "short_description": "SailPoint Access Request $!plan.arguments.identityRequestId"
                }
              },
              "beforeProvisioningRule": {
                "description": "Before provisioning rule of integration",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/DtoType"
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of the rule",
                    "example": "2c918085708c274401708c2a8a760001"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human-readable display name of the rule",
                    "example": "Example Rule"
                  }
                }
              }
            }
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "title": "Json Patch",
        "description": "A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
        "properties": {
          "operations": {
            "description": "Operations to be applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            }
          }
        },
        "example": "[\n  {\n\t  \"op\": \"replace\",\n\t  \"path\": \"/description\",\n\t  \"value\": \"A new description\"\n  }\n]"
      },
      "ObjectExportImportOptions": {
        "type": "object",
        "title": "Object Export Import Options",
        "properties": {
          "includedIds": {
            "description": "Object ids to be included in an import or export.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
            }
          },
          "includedNames": {
            "description": "Object names to be included in an import or export.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Test Object"
            }
          }
        }
      },
      "ExportOptions": {
        "type": "object",
        "title": "Export Options",
        "properties": {
          "excludeTypes": {
            "description": "Object type names to be excluded from an sp-config export command.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "ACCESS_REQUEST_CONFIG",
                "ATTR_SYNC_SOURCE_CONFIG",
                "AUTH_ORG",
                "CAMPAIGN_FILTER",
                "CONNECTOR_RULE",
                "FORM_DEFINITION",
                "GOVERNANCE_GROUP",
                "IDENTITY_OBJECT_CONFIG",
                "IDENTITY_PROFILE",
                "LIFECYCLE_STATE",
                "NOTIFICATION_TEMPLATE",
                "PASSWORD_POLICY",
                "PASSWORD_SYNC_GROUP",
                "PUBLIC_IDENTITIES_CONFIG",
                "ROLE",
                "RULE",
                "SEGMENT",
                "SERVICE_DESK_INTEGRATION",
                "SOD_POLICY",
                "SOURCE",
                "TAG",
                "TRANSFORM",
                "TRIGGER_SUBSCRIPTION",
                "WORKFLOW"
              ],
              "example": "SOURCE"
            }
          },
          "includeTypes": {
            "description": "Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCESS_PROFILE",
                "ACCESS_REQUEST_CONFIG",
                "ATTR_SYNC_SOURCE_CONFIG",
                "AUTH_ORG",
                "CAMPAIGN_FILTER",
                "CONNECTOR_RULE",
                "FORM_DEFINITION",
                "GOVERNANCE_GROUP",
                "IDENTITY_OBJECT_CONFIG",
                "IDENTITY_PROFILE",
                "LIFECYCLE_STATE",
                "NOTIFICATION_TEMPLATE",
                "PASSWORD_POLICY",
                "PASSWORD_SYNC_GROUP",
                "PUBLIC_IDENTITIES_CONFIG",
                "ROLE",
                "RULE",
                "SEGMENT",
                "SERVICE_DESK_INTEGRATION",
                "SOD_POLICY",
                "SOURCE",
                "TAG",
                "TRANSFORM",
                "TRIGGER_SUBSCRIPTION",
                "WORKFLOW"
              ],
              "example": "TRIGGER_SUBSCRIPTION"
            }
          },
          "objectOptions": {
            "description": "Additional options targeting specific objects related to each item in the includeTypes field",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectExportImportOptions"
            },
            "example": {
              "TRIGGER_SUBSCRIPTION": {
                "includedIds": [
                  "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                ],
                "includedNames": [
                  "Test 2"
                ]
              }
            }
          }
        }
      },
      "ExportPayload": {
        "type": "object",
        "title": "Export Payload",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExportOptions"
          }
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Optional user defined description/name for export job.",
            "example": "Export Job 1 Test"
          }
        }
      },
      "SpConfigJob": {
        "type": "object",
        "title": "Sp Config Job",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Unique id assigned to this job.",
            "example": "3469b87d-48ca-439a-868f-2160001da8c1"
          },
          "status": {
            "type": "string",
            "description": "Status of the job.",
            "enum": [
              "NOT_STARTED",
              "IN_PROGRESS",
              "COMPLETE",
              "CANCELLED",
              "FAILED"
            ],
            "example": "COMPLETE"
          },
          "type": {
            "type": "string",
            "description": "Type of the job, either export or import.",
            "enum": [
              "EXPORT",
              "IMPORT"
            ],
            "example": "IMPORT"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "The time until which the artifacts will be available for download.",
            "example": "2021-05-11T22:23:16Z"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time the job was started.",
            "example": "2021-05-11T22:23:16Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The time of the last update to the job.",
            "example": "2021-05-11T22:23:16Z"
          }
        },
        "required": [
          "jobId",
          "status",
          "type",
          "expiration",
          "created",
          "modified"
        ]
      },
      "SpConfigExportJob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpConfigJob"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "description": {
                "type": "string",
                "description": "Optional user defined description/name for export job.",
                "example": "ETS configuration objects from Acme-Solar sandbox"
              }
            }
          }
        ]
      },
      "SpConfigExportJobStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpConfigExportJob"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "completed": {
                "type": "string",
                "format": "date-time",
                "description": "The time the job was completed.",
                "example": "2021-05-11T22:23:16Z"
              }
            }
          }
        ]
      },
      "ConfigObject": {
        "type": "object",
        "title": "Config Object for Export and Import",
        "description": "Config export and import format for individual object configurations.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "Current version of configuration object.",
            "example": 1
          },
          "self": {
            "$ref": "#/components/schemas/SelfImportExportDto"
          },
          "object": {
            "description": "Object details. Format dependant on the object type.",
            "additionalProperties": true
          }
        }
      },
      "SpConfigExportResults": {
        "type": "object",
        "title": "Config Export Response Body",
        "description": "Response model for config export download response.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "Current version of the export results object.",
            "example": 1
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Time the export was completed.",
            "example": "2021-05-11T22:23:16Z"
          },
          "tenant": {
            "type": "string",
            "description": "Name of the tenant where this export originated.",
            "example": "sample-tenant"
          },
          "description": {
            "type": "string",
            "description": "Optional user defined description/name for export job.",
            "example": "Export Job 1 Test"
          },
          "options": {
            "$ref": "#/components/schemas/ExportOptions",
            "description": "Options used to create this export."
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigObject"
            }
          }
        }
      },
      "ImportOptions": {
        "type": "object",
        "title": "Import Options",
        "properties": {
          "excludeTypes": {
            "description": "Object type names to be excluded from an sp-config export command.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONNECTOR_RULE",
                "IDENTITY_OBJECT_CONFIG",
                "IDENTITY_PROFILE",
                "RULE",
                "SOURCE",
                "TRANSFORM",
                "TRIGGER_SUBSCRIPTION"
              ],
              "example": "SOURCE"
            }
          },
          "includeTypes": {
            "description": "Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONNECTOR_RULE",
                "IDENTITY_OBJECT_CONFIG",
                "IDENTITY_PROFILE",
                "RULE",
                "SOURCE",
                "TRANSFORM",
                "TRIGGER_SUBSCRIPTION"
              ],
              "example": "TRIGGER_SUBSCRIPTION"
            }
          },
          "objectOptions": {
            "description": "Additional options targeting specific objects related to each item in the includeTypes field",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectExportImportOptions"
            },
            "example": {
              "TRIGGER_SUBSCRIPTION": {
                "includedIds": [
                  "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
                ],
                "includedNames": [
                  "Test 2"
                ]
              }
            }
          },
          "defaultReferences": {
            "description": "List of object types that can be used to resolve references on import.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONNECTOR_RULE",
                "IDENTITY_OBJECT_CONFIG",
                "IDENTITY_PROFILE",
                "RULE",
                "SOURCE",
                "TRANSFORM",
                "TRIGGER_SUBSCRIPTION"
              ],
              "example": "TRIGGER_SUBSCRIPTION"
            }
          },
          "excludeBackup": {
            "description": "By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. If excludeBackup is true, the backup will not be performed.",
            "type": "boolean",
            "default": false,
            "example": "false"
          }
        }
      },
      "SpConfigImportJobStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SpConfigJob"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "message": {
                "type": "string",
                "description": "This message contains additional information about the overall status of the job.",
                "example": "Download import results for details."
              }
            }
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "completed": {
                "type": "string",
                "format": "date-time",
                "description": "The time the job was completed.",
                "example": "2021-05-11T22:23:16Z"
              }
            }
          }
        ]
      },
      "SpConfigImportResults": {
        "type": "object",
        "title": "Config Import Response Body",
        "description": "Response Body for Config Import command.",
        "properties": {
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectImportResult"
            },
            "description": "The results of an object configuration import job.",
            "example": {
              "results": {
                "TRIGGER_SUBSCRIPTION": {
                  "infos": [
                    {
                      "key": "IMPORT_PREVIEW",
                      "text": "Object to be imported: [c953134c-2224-42f2-a84e-fa5cbb395904, Test 2]",
                      "detail": null
                    },
                    {
                      "key": "IMPORT_PREVIEW",
                      "text": "Object to be imported: [be9e116d-08e1-49fc-ab7f-fa585e96c9e4, Test 1]",
                      "detail": null
                    }
                  ],
                  "warnings": [],
                  "errors": [],
                  "importedObjects": []
                }
              }
            }
          },
          "exportJobId": {
            "type": "string",
            "description": "If a backup was performed before the import, this will contain the jobId of the backup job. This id can be used to retrieve the json file of the backup export.",
            "example": "be9e116d-08e1-49fc-ab7f-fa585e96c9e4"
          }
        },
        "required": [
          "results"
        ]
      },
      "SpConfigRule": {
        "type": "object",
        "title": "Config Object Rule",
        "description": "Format of Config Hub object rules.",
        "properties": {
          "path": {
            "type": "string",
            "description": "JSONPath expression denoting the path within the object where a value substitution should be applied.",
            "example": "$.enabled"
          },
          "value": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "nullable": true,
            "description": "Value to be assigned at the jsonPath location within the object."
          },
          "modes": {
            "type": "array",
            "description": "Draft modes the rule will apply to.",
            "items": {
              "type": "string",
              "enum": [
                "RESTORE",
                "PROMOTE",
                "UPLOAD"
              ]
            },
            "example": [
              "RESTORE",
              "PROMOTE"
            ]
          }
        }
      },
      "SpConfigRules": {
        "type": "object",
        "title": "Config Object Rules",
        "description": "Rules to be applied to the config object during the draft process.",
        "properties": {
          "takeFromTargetRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpConfigRule"
            }
          },
          "defaultRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpConfigRule"
            }
          },
          "editable": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the object can be edited.",
            "example": true
          }
        }
      },
      "SpConfigObject": {
        "title": "Object Configuration Model",
        "description": "Response model for object configuration.",
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "Object type the configuration is for.",
            "example": "TRIGGER_SUBSCRIPTION"
          },
          "referenceExtractors": {
            "type": "array",
            "nullable": true,
            "description": "List of JSON paths within an exported object of this type, representing references that must be resolved.",
            "items": {
              "type": "string"
            },
            "example": [
              "$.owner"
            ]
          },
          "signatureRequired": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether this type of object will be JWS signed and cannot be modified before import.",
            "example": false
          },
          "alwaysResolveById": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether this object type must be always be resolved by ID.",
            "example": true
          },
          "legacyObject": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether this is a legacy object.",
            "example": false
          },
          "onePerTenant": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether there is only one object of this type.",
            "example": false
          },
          "exportable": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the object can be exported or is just a reference object.",
            "example": true
          },
          "rules": {
            "$ref": "#/components/schemas/SpConfigRules"
          }
        }
      },
      "Source-2": {
        "type": "object",
        "title": "Source",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Source ID.",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "name": {
            "type": "string",
            "description": "Source's human-readable name.",
            "example": "My Source"
          },
          "description": {
            "type": "string",
            "description": "Source's human-readable description.",
            "example": "This is the corporate directory."
          },
          "owner": {
            "description": "Reference to identity object who owns the source.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner identity's ID.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "Owner identity's human-readable display name.",
                "example": "MyName"
              }
            }
          },
          "cluster": {
            "description": "Reference to the source's associated cluster.",
            "type": "object",
            "nullable": true,
            "required": [
              "name",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "CLUSTER"
                ],
                "example": "CLUSTER"
              },
              "id": {
                "type": "string",
                "description": "Cluster ID.",
                "example": "2c9180866166b5b0016167c32ef31a66"
              },
              "name": {
                "type": "string",
                "description": "Cluster's human-readable display name.",
                "example": "Corporate Cluster"
              }
            }
          },
          "accountCorrelationConfig": {
            "description": "Reference to account correlation config object.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "ACCOUNT_CORRELATION_CONFIG"
                ],
                "example": "ACCOUNT_CORRELATION_CONFIG"
              },
              "id": {
                "type": "string",
                "description": "Account correlation config ID.",
                "example": "2c9180855d191c59015d28583727245a"
              },
              "name": {
                "type": "string",
                "description": "Account correlation config's human-readable display name.",
                "example": "Directory [source-62867] Account Correlation"
              }
            }
          },
          "accountCorrelationRule": {
            "description": "Reference to a rule that can do COMPLEX correlation. Only use this rule when you can't use accountCorrelationConfig.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "managerCorrelationMapping": {
            "$ref": "#/components/schemas/ManagerCorrelationMapping",
            "description": "Filter object used during manager correlation to match incoming manager values to an existing manager's account/identity."
          },
          "managerCorrelationRule": {
            "description": "Reference to the ManagerCorrelationRule. Only use this rule when a simple filter isn't sufficient.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "beforeProvisioningRule": {
            "description": "Rule that runs on the CCG and allows for customization of provisioning plans before the API calls the connector. ",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "RULE"
                ],
                "example": "RULE"
              },
              "id": {
                "type": "string",
                "description": "Rule ID.",
                "example": "2c918085708c274401708c2a8a760001"
              },
              "name": {
                "type": "string",
                "description": "Rule's human-readable display name.",
                "example": "Example Rule"
              }
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of object being referenced.",
                  "type": "string",
                  "enum": [
                    "CONNECTOR_SCHEMA"
                  ],
                  "example": "CONNECTOR_SCHEMA"
                },
                "id": {
                  "type": "string",
                  "description": "Schema ID.",
                  "example": "2c91808568c529c60168cca6f90c1777"
                },
                "name": {
                  "type": "string",
                  "description": "Schema's human-readable display name.",
                  "example": "MySchema"
                }
              }
            },
            "description": "List of references to schema objects.",
            "example": [
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232a",
                "name": "account"
              },
              {
                "type": "CONNECTOR_SCHEMA",
                "id": "2c9180835d191a86015d28455b4b232b",
                "name": "group"
              }
            ]
          },
          "passwordPolicies": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Type of object being referenced.",
                  "type": "string",
                  "enum": [
                    "PASSWORD_POLICY"
                  ],
                  "example": "PASSWORD_POLICY"
                },
                "id": {
                  "type": "string",
                  "description": "Policy ID.",
                  "example": "2c91808568c529c60168cca6f90c1777"
                },
                "name": {
                  "type": "string",
                  "description": "Policy's human-readable display name.",
                  "example": "My Password Policy"
                }
              }
            },
            "description": "List of references to the associated PasswordPolicy objects.",
            "example": [
              {
                "type": "PASSWORD_POLICY",
                "id": "2c9180855d191c59015d291ceb053980",
                "name": "Corporate Password Policy"
              },
              {
                "type": "PASSWORD_POLICY",
                "id": "2c9180855d191c59015d291ceb057777",
                "name": "Vendor Password Policy"
              }
            ]
          },
          "features": {
            "$ref": "#/components/schemas/SourceFeature"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of system being managed e.g. Active Directory, Workday, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`. ",
            "example": "OpenLDAP - Direct"
          },
          "connector": {
            "type": "string",
            "description": "Connector script name.",
            "example": "active-directory"
          },
          "connectorClass": {
            "type": "string",
            "description": "Fully qualified name of the Java class that implements the connector interface.",
            "example": "sailpoint.connector.LDAPConnector"
          },
          "connectorAttributes": {
            "type": "object",
            "description": "Connector specific configuration. This configuration will differ from type to type.",
            "example": {
              "healthCheckTimeout": 30,
              "authSearchAttributes": [
                "cn",
                "uid",
                "mail"
              ]
            }
          },
          "deleteThreshold": {
            "type": "integer",
            "format": "int32",
            "description": "Number from 0 to 100 that specifies when to skip the delete phase.",
            "example": 10
          },
          "authoritative": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is referenced by an identity profile.",
            "default": false,
            "example": false
          },
          "managementWorkgroup": {
            "description": "Reference to management workgroup for the source.",
            "type": "object",
            "nullable": true,
            "properties": {
              "type": {
                "description": "Type of object being referenced.",
                "type": "string",
                "enum": [
                  "GOVERNANCE_GROUP"
                ],
                "example": "GOVERNANCE_GROUP"
              },
              "id": {
                "type": "string",
                "description": "Management workgroup ID.",
                "example": "2c91808568c529c60168cca6f90c2222"
              },
              "name": {
                "type": "string",
                "description": "Management workgroup's human-readable display name.",
                "example": "My Management Workgroup"
              }
            }
          },
          "healthy": {
            "type": "boolean",
            "description": "When this is true, it indicates that the source is healthy.",
            "default": false,
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT",
              "SOURCE_STATE_ERROR_CLUSTER",
              "SOURCE_STATE_ERROR_SOURCE",
              "SOURCE_STATE_ERROR_VA",
              "SOURCE_STATE_FAILURE_CLUSTER",
              "SOURCE_STATE_FAILURE_SOURCE",
              "SOURCE_STATE_HEALTHY",
              "SOURCE_STATE_UNCHECKED_CLUSTER",
              "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES",
              "SOURCE_STATE_UNCHECKED_SOURCE",
              "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS"
            ],
            "description": "Status identifier that gives specific information about why a source is or isn't healthy. ",
            "example": "SOURCE_STATE_HEALTHY"
          },
          "since": {
            "type": "string",
            "description": "Timestamp that shows when a source health check was last performed.",
            "example": "2021-09-28T15:48:29.3801666300Z"
          },
          "connectorId": {
            "type": "string",
            "description": "Connector ID",
            "example": "active-directory"
          },
          "connectorName": {
            "type": "string",
            "description": "Name of the connector that was chosen during source creation.",
            "example": "Active Directory"
          },
          "connectionType": {
            "type": "string",
            "description": "Type of connection (direct or file).",
            "example": "file"
          },
          "connectorImplementationId": {
            "type": "string",
            "description": "Connector implementation ID.",
            "example": "delimited-file"
          },
          "created": {
            "type": "string",
            "description": "Date-time when the source was created",
            "format": "date-time",
            "example": "2022-02-08T14:50:03.827Z"
          },
          "modified": {
            "type": "string",
            "description": "Date-time when the source was last modified.",
            "format": "date-time",
            "example": "2024-01-23T18:08:50.897Z"
          },
          "credentialProviderEnabled": {
            "type": "boolean",
            "description": "If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.",
            "default": false,
            "example": false
          },
          "category": {
            "type": "string",
            "nullable": true,
            "default": null,
            "description": "Source category (e.g. null, CredentialProvider).",
            "example": "CredentialProvider"
          }
        },
        "required": [
          "name",
          "owner",
          "connector"
        ]
      },
      "AttrSyncSource": {
        "type": "object",
        "title": "Attr Sync Source",
        "description": "Target source for attribute synchronization.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of target source for attribute synchronization.",
            "enum": [
              "SOURCE"
            ],
            "example": "SOURCE"
          },
          "id": {
            "type": "string",
            "description": "ID of target source for attribute synchronization.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of target source for attribute synchronization.",
            "example": "HR Active Directory"
          }
        }
      },
      "AttrSyncSourceAttributeConfig": {
        "type": "object",
        "title": "Attr Sync Source Attribute Config",
        "description": "Specification of source attribute sync mapping configuration for an identity attribute",
        "required": [
          "name",
          "displayName",
          "enabled",
          "target"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the identity attribute",
            "example": "email"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the identity attribute",
            "example": "Email"
          },
          "enabled": {
            "type": "boolean",
            "description": "Determines whether or not the attribute is enabled for synchronization",
            "example": true
          },
          "target": {
            "type": "string",
            "description": "Name of the source account attribute to which the identity attribute value will be synchronized if enabled",
            "example": "mail"
          }
        }
      },
      "AttrSyncSourceConfig": {
        "type": "object",
        "title": "Attr Sync Source Config",
        "description": "Specification of attribute sync configuration for a source",
        "required": [
          "source",
          "attributes"
        ],
        "properties": {
          "source": {
            "$ref": "#/components/schemas/AttrSyncSource"
          },
          "attributes": {
            "type": "array",
            "description": "Attribute synchronization configuration for specific identity attributes in the context of a source",
            "items": {
              "$ref": "#/components/schemas/AttrSyncSourceAttributeConfig"
            },
            "example": [
              {
                "name": "email",
                "displayName": "Email",
                "enabled": true,
                "target": "mail"
              },
              {
                "name": "firstname",
                "displayName": "First Name",
                "enabled": false,
                "target": "givenName"
              }
            ]
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "title": "Status Response",
        "description": "Response model for connection check, configuration test and ping of source connectors.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the source",
            "example": "2c91808568c529c60168cca6f90c1313",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the source",
            "example": "ODS-AD-Test [source-999999]",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "description": "The status of the health check.",
            "example": "SUCCESS",
            "readOnly": true
          },
          "elapsedMillis": {
            "type": "integer",
            "description": "The number of milliseconds spent on the entire request.",
            "example": 1000,
            "readOnly": true
          },
          "details": {
            "type": "object",
            "description": "The document contains the results of the health check.\nThe schema of this document depends on the type of source used.\n",
            "readOnly": true,
            "example": {
              "useTLSForIQService": false,
              "IQService": {
                "TLS Port": 0,
                ".NET CLR Version": "4.0.30319.42000",
                "SecondaryServiceStatus": "Running",
                "Port": 5050,
                "Host": "AUTOMATION-AD",
                "Name": "IQService",
                "IQServiceStatus": "Running",
                "SecondaryService": "IQService-Instance1-Secondary",
                "Version": "IQService Sep-2020",
                "secondaryPort": 5051,
                "OS Architecture": "AMD64",
                "Operating System": "Microsoft Windows Server 2012 R2 Standard",
                "highestDotNetVersion": "4.8 or later",
                "Build Time": "09/22/2020 06:34 AM -0500"
              },
              "IQServiceClientAuthEnabled": false,
              "requestProcessedOn": "1/19/2021 1:47:14 PM"
            }
          }
        }
      },
      "ResourceObjectsRequest": {
        "type": "object",
        "title": "Resource Objects Request",
        "description": "Request model for peek resource objects from source connectors.",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "The type of resource objects to iterate over.",
            "default": "account",
            "example": "group"
          },
          "maxCount": {
            "type": "integer",
            "description": "The maximum number of resource objects to iterate over and return.",
            "default": 25,
            "example": 100
          }
        }
      },
      "ResourceObject": {
        "type": "object",
        "title": "Resource Object",
        "description": "Representation of the object which is returned from source connectors.",
        "properties": {
          "instance": {
            "description": "Identifier of the specific instance where this object resides.",
            "type": "string",
            "readOnly": true
          },
          "identity": {
            "description": "Native identity of the object in the Source.",
            "type": "string",
            "example": "CN=Aaron Carr,OU=test1,DC=test2,DC=test",
            "readOnly": true
          },
          "uuid": {
            "description": "Universal unique identifier of the object in the Source.",
            "type": "string",
            "example": "{abf7bd9b-68b4-4d21-9b70-870c58ebf844}",
            "readOnly": true
          },
          "previousIdentity": {
            "description": "Native identity that the object has previously.",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Display name for this object.",
            "type": "string",
            "example": "Aaron Carr",
            "readOnly": true
          },
          "objectType": {
            "description": "Type of object.",
            "type": "string",
            "example": "account",
            "readOnly": true
          },
          "incomplete": {
            "description": "A flag indicating that this is an incomplete object. Used in special cases where the connector has to return account information in several phases and the objects might not have a complete set of all account attributes. The attributes in this object will replace the corresponding attributes in the Link, but no other Link attributes will be changed.",
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "incremental": {
            "description": "A flag indicating that this is an incremental change object. This is similar to incomplete but it also means that the values of any multi-valued attributes in this object should be merged with the existing values in the Link rather than replacing the existing Link value.",
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "delete": {
            "description": "A flag indicating that this object has been deleted. This is set only when doing delta aggregation and the connector supports detection of native deletes.",
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "remove": {
            "description": "A flag set indicating that the values in the attributes represent things to remove rather than things to add. Setting this implies incremental. The values which are always for multi-valued attributes are removed from the current values.",
            "type": "boolean",
            "example": false,
            "readOnly": true
          },
          "missing": {
            "description": "A list of attribute names that are not included in this object. This is only used with SMConnector and will only contain \"groups\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "missFieldOne",
              "missFieldTwo"
            ],
            "readOnly": true
          },
          "attributes": {
            "description": "Attributes of this ResourceObject.",
            "type": "object",
            "example": {
              "telephoneNumber": "12-(345)678-9012",
              "mail": "example@test.com",
              "displayName": "Aaron Carr"
            },
            "readOnly": true
          },
          "finalUpdate": {
            "description": "In Aggregation, for sparse object the count for total accounts scanned identities updated is not incremented.",
            "type": "boolean",
            "example": false,
            "readOnly": true
          }
        }
      },
      "ResourceObjectsResponse": {
        "type": "object",
        "title": "Resource Objects Response",
        "description": "Response model for peek resource objects from source connectors.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the source",
            "example": "2c91808568c529c60168cca6f90c1313",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the source",
            "example": "ODS-AD-Test [source-999999]",
            "readOnly": true
          },
          "objectCount": {
            "type": "integer",
            "description": "The number of objects that were fetched by the connector.",
            "example": 25,
            "readOnly": true
          },
          "elapsedMillis": {
            "type": "integer",
            "description": "The number of milliseconds spent on the entire request.",
            "example": 1055,
            "readOnly": true
          },
          "resourceObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceObject"
            },
            "description": "Fetched objects from the source connector.",
            "readOnly": true
          }
        }
      },
      "ConnectorDetail": {
        "type": "object",
        "title": "Connector Detail",
        "properties": {
          "name": {
            "type": "string",
            "description": "The connector name",
            "example": "JDBC"
          },
          "sourceConfigXml": {
            "type": "string",
            "description": "XML representation of the source config data",
            "example": "<Form connectorName='Active Directory - Direct' directConnect='true' name='Active Directory' status='released' type='SourceConfig' xmlns='http://www.sailpoint.com/xsd/sailpoint_form_1_0.xsd'>\n\t<Field defaultValue='true' hidden='true' name='cloudAuthEnabled' type='boolean' value='true'> </Field> </Form>"
          },
          "sourceConfig": {
            "type": "string",
            "description": "JSON representation of the source config data",
            "example": {
              "Form": {
                "Field": {
                  "_defaultValue": "true",
                  "_hidden": "true",
                  "_name": "cloudAuthEnabled",
                  "_type": "boolean",
                  "_value": "true"
                },
                "_xmlns": "http://www.sailpoint.com/xsd/sailpoint_form_1_0.xsd",
                "_connectorName": "Active Directory - Direct",
                "_directConnect": "true",
                "_name": "Active Directory",
                "_status": "released",
                "_type": "SourceConfig",
                "__text": "\\n\\t"
              }
            }
          },
          "directConnect": {
            "type": "boolean",
            "description": "true if the source is a direct connect source",
            "example": true
          },
          "fileUpload": {
            "type": "boolean",
            "description": "Connector config's file upload attribute, false if not there",
            "example": false
          },
          "uploadedFiles": {
            "type": "string",
            "description": "List of uploaded file strings for the connector",
            "example": []
          },
          "connectorMetadata": {
            "type": "object",
            "description": "Object containing metadata pertinent to the UI to be used",
            "example": {
              "supportedUI": "EXTJS"
            }
          }
        }
      },
      "NativeChangeDetectionConfig": {
        "type": "object",
        "title": "Native Change Detection Config",
        "description": "Source configuration information for Native Change Detection that is read and used by account aggregation process.",
        "properties": {
          "enabled": {
            "description": "A flag indicating if Native Change Detection is enabled for a source.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "operations": {
            "type": "array",
            "description": "Operation types for which Native Change Detection is enabled for a source.",
            "items": {
              "type": "string",
              "enum": [
                "ACCOUNT_UPDATED",
                "ACCOUNT_CREATED",
                "ACCOUNT_DELETED"
              ]
            },
            "example": [
              "ACCOUNT_UPDATED",
              "ACCOUNT_DELETED"
            ]
          },
          "allEntitlements": {
            "description": "A flag indicating that all entitlements participate in Native Change Detection.",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "allNonEntitlementAttributes": {
            "description": "A flag indicating that all non-entitlement account attributes participate in Native Change Detection.",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "selectedEntitlements": {
            "description": "If allEntitlements flag is off this field lists entitlements that participate in Native Change Detection.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "memberOf",
              "memberOfSharedMailbox"
            ]
          },
          "selectedNonEntitlementAttributes": {
            "description": "If allNonEntitlementAttributes flag is off this field lists non-entitlement account attributes that participate in Native Change Detection.",
            "externalDocs": {
              "description": "Learn more about account attributes here.",
              "url": "https://documentation.sailpoint.com/saas/help/accounts/schema.html"
            },
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "lastName",
              "phoneNumber",
              "objectType",
              "servicePrincipalName"
            ]
          }
        }
      },
      "UsageType": {
        "type": "string",
        "nullable": false,
        "enum": [
          "CREATE",
          "UPDATE",
          "ENABLE",
          "DISABLE",
          "DELETE",
          "ASSIGN",
          "UNASSIGN",
          "CREATE_GROUP",
          "UPDATE_GROUP",
          "DELETE_GROUP",
          "REGISTER",
          "CREATE_IDENTITY",
          "UPDATE_IDENTITY",
          "EDIT_GROUP",
          "UNLOCK",
          "CHANGE_PASSWORD"
        ],
        "example": "CREATE",
        "description": "The type of provisioning policy usage. \nIn IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined. \nThese are the common usage types: \nCREATE - This usage type relates to 'Create Account Profile', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.  \nUPDATE - This usage type relates to 'Update Account Profile', the provisioning template for the 'Update' connector operations. For example, this would be used for an attribute sync on a source.\nENABLE - This usage type relates to 'Enable Account Profile', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner's account is created. \nDISABLE - This usage type relates to 'Disable Account Profile', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source. \nYou can use these four usage types for all your provisioning policy needs. "
      },
      "FieldDetailsDto": {
        "type": "object",
        "title": "Field Details Dto",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute.",
            "example": "userName"
          },
          "transform": {
            "type": "object",
            "description": "The transform to apply to the field",
            "example": {
              "type": "rule",
              "attributes": {
                "name": "Create Unique LDAP Attribute"
              }
            },
            "default": {}
          },
          "attributes": {
            "type": "object",
            "description": "Attributes required for the transform",
            "example": {
              "template": "${firstname}.${lastname}${uniqueCounter}",
              "cloudMaxUniqueChecks": "50",
              "cloudMaxSize": "20",
              "cloudRequired": "true"
            }
          },
          "isRequired": {
            "type": "boolean",
            "readOnly": true,
            "description": "Flag indicating whether or not the attribute is required.",
            "default": false,
            "example": false
          },
          "type": {
            "type": "string",
            "description": "The type of the attribute.",
            "example": "string"
          },
          "isMultiValued": {
            "type": "boolean",
            "description": "Flag indicating whether or not the attribute is multi-valued.",
            "default": false,
            "example": false
          }
        }
      },
      "ProvisioningPolicyDto": {
        "type": "object",
        "title": "Provisioning Policy Dto",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "nullable": true,
            "type": "string",
            "description": "the provisioning policy name",
            "example": "example provisioning policy for inactive identities"
          },
          "description": {
            "type": "string",
            "description": "the description of the provisioning policy",
            "example": "this provisioning policy creates access based on an identity going inactive"
          },
          "usageType": {
            "$ref": "#/components/schemas/UsageType"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDetailsDto"
            }
          }
        }
      },
      "AttributeDefinitionType": {
        "type": "string",
        "enum": [
          "STRING",
          "LONG",
          "INT",
          "BOOLEAN",
          "DATE"
        ],
        "description": "The underlying type of the value which an AttributeDefinition represents.",
        "example": "STRING"
      },
      "AttributeDefinition": {
        "type": "object",
        "title": "Attribute Definition",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute.",
            "example": "sAMAccountName"
          },
          "type": {
            "$ref": "#/components/schemas/AttributeDefinitionType"
          },
          "schema": {
            "nullable": true,
            "description": "A reference to the schema on the source to the attribute values map to.",
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of object being referenced",
                "type": "string",
                "enum": [
                  "CONNECTOR_SCHEMA"
                ],
                "example": "CONNECTOR_SCHEMA"
              },
              "id": {
                "type": "string",
                "description": "The object ID this reference applies to.",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "The human-readable display name of the object.",
                "example": "group"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the attribute.",
            "example": "The sAMAccountName attribute"
          },
          "isMulti": {
            "type": "boolean",
            "description": "Flag indicating whether or not the attribute is multi-valued.",
            "example": false,
            "default": false
          },
          "isEntitlement": {
            "type": "boolean",
            "description": "Flag indicating whether or not the attribute is an entitlement.",
            "example": false,
            "default": false
          },
          "isGroup": {
            "type": "boolean",
            "description": "Flag indicating whether or not the attribute represents a group.\nThis can only be `true` if `isEntitlement` is also `true` **and** there is a schema defined for the attribute.\n",
            "example": false,
            "default": false
          }
        }
      },
      "Schema": {
        "type": "object",
        "title": "Schema",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the Schema.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          "name": {
            "type": "string",
            "description": "The name of the Schema.",
            "example": "account"
          },
          "nativeObjectType": {
            "type": "string",
            "description": "The name of the object type on the native system that the schema represents.",
            "example": "User"
          },
          "identityAttribute": {
            "type": "string",
            "description": "The name of the attribute used to calculate the unique identifier for an object in the schema.",
            "example": "sAMAccountName"
          },
          "displayAttribute": {
            "type": "string",
            "description": "The name of the attribute used to calculate the display value for an object in the schema.",
            "example": "distinguishedName"
          },
          "hierarchyAttribute": {
            "nullable": true,
            "type": "string",
            "description": "The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.",
            "example": "memberOf"
          },
          "includePermissions": {
            "type": "boolean",
            "description": "Flag indicating whether or not the include permissions with the object data when aggregating the schema.",
            "example": false,
            "default": false
          },
          "features": {
            "$ref": "#/components/schemas/SourceFeature"
          },
          "configuration": {
            "type": "object",
            "description": "Holds any extra configuration data that the schema may require.",
            "example": {
              "groupMemberAttribute": "member"
            }
          },
          "attributes": {
            "type": "array",
            "description": "The attribute definitions which form the schema.",
            "items": {
              "$ref": "#/components/schemas/AttributeDefinition"
            },
            "example": [
              {
                "name": "sAMAccountName",
                "type": "STRING",
                "isMultiValued": false,
                "isEntitlement": false,
                "isGroup": false
              },
              {
                "name": "memberOf",
                "type": "STRING",
                "schema": {
                  "type": "CONNECTOR_SCHEMA",
                  "id": "2c9180887671ff8c01767b4671fc7d60",
                  "name": "group"
                },
                "description": "Group membership",
                "isMultiValued": true,
                "isEntitlement": true,
                "isGroup": true
              }
            ]
          },
          "created": {
            "type": "string",
            "description": "The date the Schema was created.",
            "format": "date-time",
            "example": "2019-12-24T22:32:58.104Z"
          },
          "modified": {
            "nullable": true,
            "type": "string",
            "description": "The date the Schema was last modified.",
            "format": "date-time",
            "example": "2019-12-31T20:22:28.104Z"
          }
        }
      },
      "SourceSyncPayload": {
        "type": "object",
        "title": "Source Sync Payload",
        "properties": {
          "type": {
            "type": "string",
            "description": "Payload type.",
            "example": "SYNCHRONIZE_SOURCE_ATTRIBUTES"
          },
          "dataJson": {
            "type": "string",
            "description": "Payload type.",
            "example": "{\"sourceId\":\"2c918083746f642c01746f990884012a\"}"
          }
        },
        "required": [
          "type",
          "dataJson"
        ]
      },
      "SourceSyncJob": {
        "type": "object",
        "title": "Source Sync Job",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "status": {
            "type": "string",
            "description": "The job status.",
            "enum": [
              "QUEUED",
              "IN_PROGRESS",
              "SUCCESS",
              "ERROR"
            ],
            "example": "IN_PROGRESS"
          },
          "payload": {
            "description": "Job payload.",
            "$ref": "#/components/schemas/SourceSyncPayload",
            "example": {
              "type": "SYNCHRONIZE_SOURCE_ATTRIBUTES",
              "dataJson": "{\"sourceId\":\"2c918083746f642c01746f990884012a\"}"
            }
          }
        },
        "required": [
          "id",
          "status",
          "payload"
        ]
      },
      "SourceEntitlementRequestConfig": {
        "type": "object",
        "title": "Source Entitlement Request Config",
        "description": "Entitlement Request Configuration",
        "properties": {
          "accessRequestConfig": {
            "$ref": "#/components/schemas/EntitlementAccessRequestConfig",
            "description": "Configuration for requesting access to entitlements"
          },
          "revocationRequestConfig": {
            "$ref": "#/components/schemas/EntitlementRevocationRequestConfig"
          }
        }
      },
      "LoadAccountsTask": {
        "type": "object",
        "title": "Load Accounts Task",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "The status of the result",
            "default": "true",
            "example": "true"
          },
          "task": {
            "type": "object",
            "properties": {
              "id": {
                "description": "System-generated unique ID of the task this taskStatus represents",
                "type": "string",
                "example": "ef38f94347e94562b5bb8424a56397d8"
              },
              "type": {
                "description": "Type of task this task represents",
                "type": "string",
                "example": "QUARTZ"
              },
              "name": {
                "description": "The name of the aggregation process",
                "type": "string",
                "example": "Cloud Account Aggregation"
              },
              "description": {
                "description": "The description of the task",
                "type": "string",
                "example": "Aggregate from the specified application"
              },
              "launcher": {
                "description": "The user who initiated the task",
                "type": "string",
                "example": "John Doe"
              },
              "created": {
                "type": "string",
                "description": "The Task creation date",
                "format": "date-time",
                "example": "2020-09-07T42:14:00.364Z"
              },
              "launched": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The task start date",
                "example": "2020-09-07T42:14:00.521Z"
              },
              "completed": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The task completion date",
                "example": "2020-09-07T42:14:01.137Z"
              },
              "completionStatus": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "SUCCESS",
                  "WARNING",
                  "ERROR",
                  "TERMINATED",
                  "TEMP_ERROR"
                ],
                "description": "Task completion status.",
                "example": "Success"
              },
              "parentName": {
                "type": "string",
                "nullable": true,
                "description": "Name of the parent task if exists.",
                "example": "Audit Report"
              },
              "messages": {
                "type": "array",
                "description": "List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.",
                "example": [],
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Type of the message.",
                      "enum": [
                        "INFO",
                        "WARN",
                        "ERROR"
                      ],
                      "example": "WARN"
                    },
                    "error": {
                      "type": "boolean",
                      "default": false,
                      "description": "Flag whether message is an error.",
                      "example": false
                    },
                    "warning": {
                      "type": "boolean",
                      "default": false,
                      "description": "Flag whether message is a warning.",
                      "example": true
                    },
                    "key": {
                      "type": "string",
                      "description": "Message string identifier.",
                      "example": "This aggregation failed because the currently running aggregation must complete before the next one can start."
                    },
                    "localizedText": {
                      "type": "string",
                      "description": "Message context with the locale based language.",
                      "example": "This aggregation failed because the currently running aggregation must complete before the next one can start."
                    }
                  }
                }
              },
              "progress": {
                "type": "string",
                "nullable": true,
                "description": "Current task state.",
                "example": "Initializing..."
              },
              "attributes": {
                "type": "object",
                "description": "Extra attributes map(dictionary) for the task.",
                "properties": {
                  "appId": {
                    "description": "The id of the source",
                    "type": "string",
                    "example": "c31386cb18bb403cbb6df4c86294ff82"
                  },
                  "optimizedAggregation": {
                    "description": "The indicator if the aggregation process was enabled/disabled for the aggregation job",
                    "type": "string",
                    "example": "enabled"
                  }
                },
                "additionalProperties": {
                  "type": "object"
                }
              },
              "returns": {
                "type": "array",
                "description": "Return values from the task",
                "items": {
                  "type": "object",
                  "properties": {
                    "displayLabel": {
                      "type": "string",
                      "description": "The display label of the return value",
                      "example": "TASK_OUT_ACCOUNT_AGGREGATION_APPLICATIONS"
                    },
                    "attributeName": {
                      "type": "string",
                      "description": "The attribute name of the return value",
                      "example": "applications"
                    }
                  },
                  "example": [
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_APPLICATIONS",
                      "attributeName": "applications"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_TOTAL",
                      "attributeName": "total"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_OPTIMIZED",
                      "attributeName": "optimizedAggregation"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_IGNORED",
                      "attributeName": "ignored"
                    },
                    {
                      "displayLabel": "TASK_OUT_UNCHANGED_ACCOUNTS",
                      "attributeName": "optimized"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_CREATED",
                      "attributeName": "created"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_UPDATED",
                      "attributeName": "updated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_DELETED",
                      "attributeName": "deleted"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_MANAGER_CHANGES",
                      "attributeName": "managerChanges"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_BUSINESS_ROLE_CHANGES",
                      "attributeName": "detectedRoleChanges"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_EXCEPTION_CHANGES",
                      "attributeName": "exceptionChanges"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_POLICIES",
                      "attributeName": "policies"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_POLICY_VIOLATIONS",
                      "attributeName": "policyViolations"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_POLICY_NOTIFICATIONS",
                      "attributeName": "policyNotifications"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SCORES_CHANGED",
                      "attributeName": "scoresChanged"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SNAPSHOTS_CREATED",
                      "attributeName": "snapshotsCreated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SCOPES_CREATED",
                      "attributeName": "scopesCreated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SCOPES_CORRELATED",
                      "attributeName": "scopesCorrelated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SCOPES_SELECTED",
                      "attributeName": "scopesSelected"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_SCOPES_DORMANT",
                      "attributeName": "scopesDormant"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_UNSCOPED_IDENTITIES",
                      "attributeName": "unscopedIdentities"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_CERTIFICATIONS_CREATED",
                      "attributeName": "certificationsCreated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_CERTIFICATIONS_DELETED",
                      "attributeName": "certificationsDeleted"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_APPLICATIONS_GENERATED",
                      "attributeName": "applicationsGenerated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_MANAGED_ATTRIBUTES_PROMOTED",
                      "attributeName": "managedAttributesCreated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_MANAGED_ATTRIBUTES_PROMOTED_BY_APP",
                      "attributeName": "managedAttributesCreatedByApplication"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_IDENTITYENTITLEMENTS_CREATED",
                      "attributeName": "identityEntitlementsCreated"
                    },
                    {
                      "displayLabel": "TASK_OUT_ACCOUNT_AGGREGATION_GROUPS_CREATED",
                      "attributeName": "groupsCreated"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "LoadUncorrelatedAccountsTask": {
        "type": "object",
        "title": "Load Uncorrelated Accounts Task",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "The status of the result",
            "default": "true",
            "example": "true"
          },
          "task": {
            "type": "object",
            "properties": {
              "id": {
                "description": "System-generated unique ID of the task this taskStatus represents",
                "type": "string",
                "example": "90b83a6bb737489494794f84cd3a51e6"
              },
              "type": {
                "description": "Type of task this task represents",
                "type": "string",
                "example": "QUARTZ"
              },
              "name": {
                "description": "The name of uncorrelated accounts process",
                "type": "string",
                "example": "Cloud Process Uncorrelated Accounts"
              },
              "description": {
                "description": "The description of the task",
                "type": "string",
                "example": "Processes uncorrelated accounts for the specified application."
              },
              "launcher": {
                "description": "The user who initiated the task",
                "type": "string",
                "example": "John Doe"
              },
              "created": {
                "type": "string",
                "description": "The Task creation date",
                "format": "date-time",
                "example": "2020-09-07T42:14:00.364Z"
              },
              "launched": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The task start date",
                "example": "2020-09-07T42:14:00.521Z"
              },
              "completed": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The task completion date",
                "example": "2020-09-07T42:14:01.137Z"
              },
              "completionStatus": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "SUCCESS",
                  "WARNING",
                  "ERROR",
                  "TERMINATED",
                  "TEMP_ERROR"
                ],
                "description": "Task completion status.",
                "example": "Success"
              },
              "parentName": {
                "type": "string",
                "nullable": true,
                "description": "Name of the parent task if exists.",
                "example": "Audit Report"
              },
              "messages": {
                "type": "array",
                "description": "List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.",
                "example": [],
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Type of the message.",
                      "enum": [
                        "INFO",
                        "WARN",
                        "ERROR"
                      ],
                      "example": "WARN"
                    },
                    "error": {
                      "type": "boolean",
                      "default": false,
                      "description": "Flag whether message is an error.",
                      "example": false
                    },
                    "warning": {
                      "type": "boolean",
                      "default": false,
                      "description": "Flag whether message is a warning.",
                      "example": true
                    },
                    "key": {
                      "type": "string",
                      "description": "Message string identifier.",
                      "example": "This correlation failed because the currently running correlation must complete before the next one can start."
                    },
                    "localizedText": {
                      "type": "string",
                      "description": "Message context with the locale based language.",
                      "example": "This correlation failed because the currently running correlation must complete before the next one can start."
                    }
                  }
                }
              },
              "progress": {
                "type": "string",
                "nullable": true,
                "description": "Current task state.",
                "example": "Initializing..."
              },
              "attributes": {
                "type": "object",
                "description": "Extra attributes map(dictionary) for the task.",
                "properties": {
                  "qpocJobId": {
                    "description": "The id of qpoc job",
                    "type": "string",
                    "example": "5d303d46-fc51-48cd-9c6d-4e211e3ab63c"
                  },
                  "taskStartDelay": {
                    "description": "the task start delay value",
                    "example": ""
                  }
                }
              },
              "returns": {
                "description": "Return values from the task",
                "type": "object",
                "example": [
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_APPLICATIONS",
                    "attributeName": "applications"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_TOTAL",
                    "attributeName": "total"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_IGNORED",
                    "attributeName": "correlationFailures"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_FAILURES",
                    "attributeName": "ignored"
                  },
                  {
                    "displayLabel": "TASK_OUT_UNCHANGED_ACCOUNTS",
                    "attributeName": "optimized"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION__CREATED",
                    "attributeName": "created"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_UPDATED",
                    "attributeName": "updated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_DELETED",
                    "attributeName": "deleted"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_MANAGER_CHANGES",
                    "attributeName": "managerChanges"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_BUSINESS_ROLE_CHANGES",
                    "attributeName": "detectedRoleChanges"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_EXCEPTION_CHANGES",
                    "attributeName": "exceptionChanges"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_POLICIES",
                    "attributeName": "policies"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_POLICY_VIOLATIONS",
                    "attributeName": "policyViolations"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_POLICY_NOTIFICATIONS",
                    "attributeName": "policyNotifications"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SCORES_CHANGED",
                    "attributeName": "scoresChanged"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SNAPSHOTS_CREATED",
                    "attributeName": "snapshotsCreated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SCOPES_CREATED",
                    "attributeName": "scopesCreated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SCOPES_CORRELATED",
                    "attributeName": "scopesCorrelated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SCOPES_SELECTED",
                    "attributeName": "scopesSelected"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_SCOPES_DORMANT",
                    "attributeName": "scopesDormant"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_UNSCOPED_IDENTITIES",
                    "attributeName": "unscopedIdentities"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_CERTIFICATIONS_CREATED",
                    "attributeName": "certificationsCreated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_CERTIFICATIONS_DELETED",
                    "attributeName": "certificationsDeleted"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_APPLICATIONS_GENERATED",
                    "attributeName": "applicationsGenerated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_MANAGED_ATTRIBUTES_PROMOTED",
                    "attributeName": "managedAttributesCreated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_MANAGED_ATTRIBUTES_PROMOTED_BY_APP",
                    "attributeName": "managedAttributesCreatedByApplication"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_IDENTITYENTITLEMENTS_CREATED",
                    "attributeName": "identityEntitlementsCreated"
                  },
                  {
                    "displayLabel": "TASK_OUT_ACCOUNT_CORRELATION_GROUPS_CREATED",
                    "attributeName": "groupsCreated"
                  }
                ]
              }
            }
          }
        }
      },
      "CorrelationConfig": {
        "type": "object",
        "title": "Correlation Config",
        "description": "Source configuration information that is used by correlation process.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the correlation configuration.",
            "example": "2c9180835d191a86015d28455b4a2329"
          },
          "name": {
            "type": "string",
            "description": "The name of the correlation configuration.",
            "example": "Source [source] Account Correlation"
          },
          "attributeAssignments": {
            "type": "array",
            "description": "The list of attribute assignments of the correlation configuration.",
            "items": {
              "type": "object",
              "description": "The attribute assignment of the correlation configuration.",
              "properties": {
                "sequence": {
                  "type": "integer",
                  "description": "The sequence of the attribute assignment.",
                  "example": 1
                },
                "property": {
                  "type": "string",
                  "description": "The property of the attribute assignment.",
                  "example": "first_name"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the attribute assignment.",
                  "example": "firstName"
                },
                "operation": {
                  "type": "string",
                  "description": "The operation of the attribute assignment.",
                  "enum": [
                    "EQ"
                  ],
                  "example": "EQ"
                },
                "complex": {
                  "type": "boolean",
                  "description": "Whether or not the it's a complex attribute assignment.",
                  "default": false,
                  "example": false
                },
                "ignoreCase": {
                  "type": "boolean",
                  "description": "Whether or not the attribute assignment should ignore case.",
                  "default": false,
                  "example": false
                },
                "matchMode": {
                  "type": "string",
                  "description": "The match mode of the attribute assignment.",
                  "enum": [
                    "ANYWHERE",
                    "START",
                    "END"
                  ],
                  "example": "ANYWHERE"
                },
                "filterString": {
                  "type": "string",
                  "description": "The filter string of the attribute assignment.",
                  "example": "first_name == \"John\""
                }
              }
            }
          }
        }
      },
      "SourceApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The source app id",
            "example": "2c91808874ff91550175097daaec161c"
          },
          "cloudAppId": {
            "type": "string",
            "description": "The deprecated source app id",
            "example": "9854520"
          },
          "name": {
            "type": "string",
            "description": "The source app name",
            "example": "my app"
          },
          "created": {
            "type": "string",
            "description": "Time when the source app was created",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "modified": {
            "type": "string",
            "description": "Time when the source app was last modified",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app is enabled",
            "example": true
          },
          "provisionRequestEnabled": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app is provision request enabled",
            "example": true
          },
          "description": {
            "type": "string",
            "nullable": false,
            "description": "The description of the source app",
            "example": "the source app for engineers"
          },
          "matchAllAccounts": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app match all accounts",
            "example": true
          },
          "appCenterEnabled": {
            "type": "boolean",
            "default": true,
            "description": "True if the source app is shown in the app center",
            "example": true
          },
          "accountSource": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "The source ID",
                "example": "2c9180827ca885d7017ca8ce28a000eb"
              },
              "type": {
                "type": "string",
                "description": "The source type, will always be \"SOURCE\"",
                "example": "SOURCE"
              },
              "name": {
                "type": "string",
                "description": "The source name",
                "example": "ODS-AD-Source"
              },
              "useForPasswordManagement": {
                "type": "boolean",
                "default": false,
                "description": "If the source is used for password management",
                "example": "ture"
              },
              "passwordPolicies": {
                "type": "array",
                "nullable": true,
                "description": "The password policies for the source",
                "items": {
                  "$ref": "#/components/schemas/BaseReferenceDto"
                },
                "example": [
                  {
                    "type": "PASSWORD_POLICY",
                    "id": "006a072ecc6647f68bba9f4a4ad34649",
                    "name": "Password Policy 1"
                  }
                ]
              }
            }
          },
          "owner": {
            "type": "object",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReferenceDto"
              }
            ],
            "description": "The owner of source app",
            "example": {
              "id": "85d173e7d57e496569df763231d6deb6a",
              "type": "IDENTITY",
              "name": "John Doe"
            }
          }
        }
      },
      "SourceAppPatchDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The source app id",
            "example": "2c91808874ff91550175097daaec161c"
          },
          "cloudAppId": {
            "type": "string",
            "description": "The deprecated source app id",
            "example": "9854520"
          },
          "name": {
            "type": "string",
            "description": "The source app name",
            "example": "my app"
          },
          "created": {
            "type": "string",
            "description": "Time when the source app was created",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "modified": {
            "type": "string",
            "description": "Time when the source app was last modified",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app is enabled",
            "example": true
          },
          "provisionRequestEnabled": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app is provision request enabled",
            "example": true
          },
          "description": {
            "type": "string",
            "nullable": false,
            "description": "The description of the source app",
            "example": "the source app for engineers"
          },
          "matchAllAccounts": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app match all accounts",
            "example": true
          },
          "appCenterEnabled": {
            "type": "boolean",
            "default": true,
            "description": "True if the source app is shown in the app center",
            "example": true
          },
          "accessProfiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List of IDs of access profiles",
            "example": [
              "2c9180857725c14301772a93bb77242d",
              "c9dc28e148a24d65b3ccb5fb8ca5ddd9"
            ]
          },
          "accountSource": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "The source ID",
                "example": "2c9180827ca885d7017ca8ce28a000eb"
              },
              "type": {
                "type": "string",
                "description": "The source type, will always be \"SOURCE\"",
                "example": "SOURCE"
              },
              "name": {
                "type": "string",
                "description": "The source name",
                "example": "ODS-AD-Source"
              },
              "useForPasswordManagement": {
                "type": "boolean",
                "default": false,
                "description": "If the source is used for password management",
                "example": "ture"
              },
              "passwordPolicies": {
                "type": "array",
                "nullable": true,
                "description": "The password policies for the source",
                "items": {
                  "$ref": "#/components/schemas/BaseReferenceDto"
                },
                "example": [
                  {
                    "type": "PASSWORD_POLICY",
                    "id": "006a072ecc6647f68bba9f4a4ad34649",
                    "name": "Password Policy 1"
                  }
                ]
              }
            }
          },
          "owner": {
            "type": "object",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseReferenceDto"
              }
            ],
            "description": "The owner of source app",
            "example": {
              "id": "85d173e7d57e496569df763231d6deb6a",
              "type": "IDENTITY",
              "name": "John Doe"
            }
          }
        }
      },
      "SourceAppBulkUpdateRequest": {
        "type": "object",
        "properties": {
          "appIds": {
            "type": "array",
            "description": "List of source app ids to update",
            "maxItems": 50,
            "items": {
              "type": "string"
            },
            "example": [
              "2c91808a7624751a01762f19d665220d",
              "2c91808a7624751a01762f19d67c220e",
              "2c91808a7624751a01762f19d692220f"
            ]
          },
          "jsonPatch": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            },
            "description": "The JSONPatch payload used to update the source app.",
            "example": [
              {
                "op": "replace",
                "path": "/enabled",
                "value": false
              },
              {
                "op": "replace",
                "path": "/matchAllAccounts",
                "value": false
              }
            ]
          }
        },
        "required": [
          "appIds",
          "jsonPatch"
        ]
      },
      "SourceAppCreateDto": {
        "type": "object",
        "required": [
          "name",
          "description",
          "accountSource"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The source app name",
            "example": "my app"
          },
          "description": {
            "type": "string",
            "nullable": false,
            "description": "The description of the source app",
            "example": "the source app for engineers"
          },
          "matchAllAccounts": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app match all accounts",
            "example": true
          },
          "accountSource": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "nullable": false,
                "description": "The source ID",
                "example": "2c9180827ca885d7017ca8ce28a000eb"
              },
              "type": {
                "type": "string",
                "description": "The source type, will always be \"SOURCE\"",
                "example": "SOURCE"
              },
              "name": {
                "type": "string",
                "description": "The source name",
                "example": "ODS-AD-Source"
              }
            }
          }
        }
      },
      "matchTerm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The attribute name",
            "example": "mail"
          },
          "value": {
            "type": "string",
            "description": "The attribute value",
            "example": "1234 Albany Dr"
          },
          "op": {
            "type": "string",
            "description": "The operator between name and value",
            "example": "eq"
          },
          "container": {
            "type": "boolean",
            "default": false,
            "description": "If it is a container or a real match term",
            "example": true
          },
          "and": {
            "type": "boolean",
            "description": "If it is AND logical operator for the children match terms",
            "default": false,
            "example": false
          },
          "children": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "description": "The children under this match term",
            "example": [
              {
                "name": "businessCategory",
                "value": "Service",
                "op": "eq",
                "container": false,
                "and": false,
                "children": null
              }
            ]
          }
        }
      },
      "selector": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "The application id",
            "example": "2c91808874ff91550175097daaec161c\""
          },
          "accountMatchConfig": {
            "type": "object",
            "properties": {
              "matchExpression": {
                "type": "object",
                "properties": {
                  "matchTerms": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/matchTerm"
                    },
                    "example": [
                      {
                        "name": "",
                        "value": "",
                        "op": null,
                        "container": true,
                        "and": false,
                        "children": [
                          {
                            "name": "businessCategory",
                            "value": "Service",
                            "op": "eq",
                            "container": false,
                            "and": false,
                            "children": null
                          }
                        ]
                      }
                    ]
                  },
                  "and": {
                    "type": "boolean",
                    "description": "If it is AND operators for match terms",
                    "default": true,
                    "example": true
                  }
                }
              }
            }
          }
        }
      },
      "AccessProfileDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Access Profile",
            "example": "2c91808a7190d06e01719938fcd20792"
          },
          "name": {
            "type": "string",
            "description": "Name of the Access Profile",
            "example": "Employee-database-read-write"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Information about the Access Profile",
            "example": "Collection of entitlements to read/write the employee database"
          },
          "created": {
            "type": "string",
            "description": "Date the Access Profile was created",
            "format": "date-time",
            "example": "2021-03-01T22:32:58.104Z"
          },
          "modified": {
            "type": "string",
            "description": "Date the Access Profile was last modified.",
            "format": "date-time",
            "example": "2021-03-02T20:22:28.104Z"
          },
          "disabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the Access Profile is enabled.",
            "example": true
          },
          "requestable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the Access Profile is requestable via access request.",
            "example": true
          },
          "protected": {
            "type": "boolean",
            "default": false,
            "description": "Whether the Access Profile is protected.",
            "example": false
          },
          "ownerId": {
            "type": "string",
            "description": "The owner ID of the Access Profile",
            "example": "9870808a7190d06e01719938fcd20792"
          },
          "sourceId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "The source ID of the Access Profile",
            "example": 10360661
          },
          "sourceName": {
            "type": "string",
            "description": "The source name of the Access Profile",
            "example": "AD Source"
          },
          "appId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "The source app ID of the Access Profile",
            "example": 10360661
          },
          "appName": {
            "type": "string",
            "nullable": true,
            "description": "The source app name of the Access Profile",
            "example": "mail app"
          },
          "applicationId": {
            "type": "string",
            "description": "The id of the application",
            "example": "edcb0951812949d085b60cd8bf35bc78"
          },
          "type": {
            "type": "string",
            "description": "The type of the access profile",
            "example": "source"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of IDs of entitlements",
            "example": [
              "2c9180857725c14301772a93bb77242d",
              "c9dc28e148a24d65b3ccb5fb8ca5ddd9"
            ]
          },
          "entitlementCount": {
            "type": "integer",
            "format": "int32",
            "example": 12,
            "description": "The number of entitlements in the access profile"
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of IDs of segments, if any, to which this Access Profile is assigned.",
            "example": [
              "f7b1b8a3-5fed-4fd4-ad29-82014e137e19",
              "29cb6c06-1da8-43ea-8be4-b3125f248f2a"
            ]
          },
          "approvalSchemes": {
            "type": "string",
            "description": "Comma-separated list of approval schemes. Each approval scheme is one of -\nmanager - appOwner - sourceOwner - accessProfileOwner - workgroup:&lt;workgroupId&gt;\n",
            "example": "accessProfileOwner"
          },
          "revokeRequestApprovalSchemes": {
            "type": "string",
            "description": "Comma-separated list of revoke request approval schemes. Each approval\nscheme is one of - manager - sourceOwner - accessProfileOwner - workgroup:&lt;workgroupId&gt;\n",
            "example": "accessProfileOwner"
          },
          "requestCommentsRequired": {
            "type": "boolean",
            "default": false,
            "description": "Whether the access profile require request comment for access request.",
            "example": true
          },
          "deniedCommentsRequired": {
            "type": "boolean",
            "default": false,
            "description": "Whether denied comment is required when access request is denied.",
            "example": true
          },
          "accountSelector": {
            "type": "object",
            "description": "How to select account when there are multiple accounts for the user",
            "properties": {
              "selectors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/selector"
                }
              }
            }
          }
        }
      },
      "TaggedObject": {
        "type": "object",
        "title": "Tagged Object",
        "properties": {
          "objectRef": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ACCESS_PROFILE",
                  "APPLICATION",
                  "CAMPAIGN",
                  "ENTITLEMENT",
                  "IDENTITY",
                  "ROLE",
                  "SOD_POLICY",
                  "SOURCE"
                ],
                "example": "IDENTITY",
                "description": "DTO type"
              },
              "id": {
                "type": "string",
                "description": "ID of the object to which this reference applies",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "nullable": true,
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "William Wilson"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels to be applied to an Object",
            "example": [
              "BU_FINANCE",
              "PCI"
            ]
          }
        }
      },
      "TaggedObjectDto": {
        "type": "object",
        "title": "Tagged Object Dto",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ACCESS_PROFILE",
              "APPLICATION",
              "CAMPAIGN",
              "ENTITLEMENT",
              "IDENTITY",
              "ROLE",
              "SOD_POLICY",
              "SOURCE"
            ],
            "example": "IDENTITY",
            "description": "DTO type"
          },
          "id": {
            "type": "string",
            "description": "ID of the object this reference applies to",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Human-readable display name of the object this reference applies to",
            "example": "William Wilson"
          }
        }
      },
      "BulkTaggedObject": {
        "type": "object",
        "title": "Bulk Tagged Object",
        "properties": {
          "objectRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedObjectDto"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Label to be applied to object.",
            "example": [
              "BU_FINANCE",
              "PCI"
            ]
          },
          "operation": {
            "type": "string",
            "enum": [
              "APPEND",
              "MERGE"
            ],
            "default": "APPEND",
            "description": "If APPEND, tags are appended to the list of tags for the object. A 400 error is returned if this would add duplicate tags to the object.\n\nIf MERGE, tags are merged with the existing tags. Duplicate tags are silently ignored.",
            "example": "MERGE"
          }
        }
      },
      "Tag": {
        "type": "object",
        "title": "Tag",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tag id",
            "example": "449ecdc0-d4ff-4341-acf6-92f6f7ce604f",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the tag.",
            "example": "PCI"
          },
          "created": {
            "type": "string",
            "description": "Date the tag was created.",
            "format": "date-time",
            "example": "2022-05-04T14:48:49Z",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "description": "Date the tag was last modified.",
            "format": "date-time",
            "example": "2022-07-14T16:31:11Z",
            "readOnly": true
          },
          "tagCategoryRefs": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Tagged object's category.",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "DTO type of the tagged object's category.",
                  "enum": [
                    "ACCESS_PROFILE",
                    "APPLICATION",
                    "CAMPAIGN",
                    "ENTITLEMENT",
                    "IDENTITY",
                    "ROLE",
                    "SOD_POLICY",
                    "SOURCE"
                  ],
                  "example": "ENTITLEMENT"
                },
                "id": {
                  "type": "string",
                  "description": "Tagged object's ID.",
                  "example": "2c91809773dee32014e13e122092014e"
                },
                "name": {
                  "type": "string",
                  "description": "Tagged object's display name.",
                  "example": "CN=entitlement.490efde5,OU=OrgCo,OU=ServiceDept,DC=HQAD,DC=local"
                }
              }
            },
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "created",
          "modified",
          "tagCategoryRefs"
        ]
      },
      "License": {
        "type": "object",
        "title": "License",
        "properties": {
          "licenseId": {
            "type": "string",
            "description": "Name of the license",
            "example": "idn:access-request"
          },
          "legacyFeatureName": {
            "type": "string",
            "description": "Legacy name of the license",
            "example": "ACCESS_REQUEST"
          }
        }
      },
      "Product": {
        "type": "object",
        "title": "Product",
        "properties": {
          "productName": {
            "type": "string",
            "description": "Name of the Product",
            "example": "idn"
          },
          "url": {
            "type": "string",
            "description": "URL of the Product",
            "example": "https://tenant-name.identitynow.com"
          },
          "productTenantId": {
            "type": "string",
            "description": "An identifier for a specific product-tenant combination",
            "example": "tenant#product"
          },
          "productRegion": {
            "type": "string",
            "description": "Product region",
            "example": "us-east-1"
          },
          "productRight": {
            "type": "string",
            "description": "Right needed for the Product",
            "example": "idn:ui:view"
          },
          "apiUrl": {
            "nullable": true,
            "type": "string",
            "description": "API URL of the Product",
            "example": "https://tenant-name.api.identitynow.com"
          },
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional attributes for a product",
            "example": {
              "domain": "https://tenant-name.identitynow.com",
              "maxRegisteredUsers": 250
            }
          },
          "zone": {
            "type": "string",
            "description": "Zone",
            "example": "Deployment zone for the Product"
          },
          "status": {
            "type": "string",
            "description": "Status of the product",
            "example": "active"
          },
          "statusDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Status datetime",
            "example": "2020-05-19T13:49:37.385Z"
          },
          "reason": {
            "type": "string",
            "description": "If there's a tenant provisioning failure then reason will have the description of error",
            "example": "Reason"
          },
          "notes": {
            "type": "string",
            "description": "Product could have additional notes added during tenant provisioning.",
            "example": "Example notes"
          },
          "dateCreated": {
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "description": "Date when the product was created",
            "example": "2020-05-19T13:49:37.385Z"
          },
          "lastUpdated": {
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "description": "Date when the product was last updated",
            "example": "2020-05-19T13:49:37.385Z"
          },
          "orgType": {
            "nullable": true,
            "type": "string",
            "enum": [
              "development",
              "staging",
              "production",
              "test",
              "partner",
              "training",
              "demonstration",
              "sandbox",
              null
            ],
            "description": "Type of org",
            "example": "test"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "title": "Tenant",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The unique identifier for the Tenant",
            "example": "2c91808568c529c60168cca6f90c1324"
          },
          "name": {
            "type": "string",
            "description": "Abbreviated name of the Tenant",
            "example": "acme"
          },
          "fullName": {
            "type": "string",
            "description": "Human-readable name of the Tenant",
            "example": "Acme, Inc"
          },
          "pod": {
            "type": "string",
            "description": "Deployment pod for the Tenant",
            "example": "example-pod"
          },
          "region": {
            "type": "string",
            "description": "Deployment region for the Tenant",
            "example": "us-east-1"
          },
          "description": {
            "type": "string",
            "description": "Description of the Tenant",
            "example": "Description of the Tenant"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "RequiresPeriodicRefresh": {
        "type": "boolean",
        "description": "A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process",
        "example": false,
        "default": false
      },
      "input": {
        "type": "object",
        "description": "This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.",
        "additionalProperties": true,
        "example": {
          "type": "accountAttribute",
          "attributes": {
            "attributeName": "first_name",
            "sourceName": "Source"
          }
        }
      },
      "AccountAttribute": {
        "title": "accountAttribute",
        "type": "object",
        "required": [
          "sourceName",
          "attributeName"
        ],
        "properties": {
          "sourceName": {
            "type": "string",
            "description": "A reference to the source to search for the account",
            "example": "Workday"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute on the account to return. This should match the name of the account attribute name visible in the user interface, or on the source schema.",
            "example": "DEPARTMENT"
          },
          "accountSortAttribute": {
            "type": "string",
            "description": "The value of this configuration is a string name of the attribute to use when determining the ordering of returned accounts when there are multiple entries",
            "example": "created",
            "default": "created"
          },
          "accountSortDescending": {
            "type": "boolean",
            "description": "The value of this configuration is a boolean (true/false). Controls the order of the sort when there are multiple accounts. If not defined, the transform will default to false (ascending order)",
            "example": false,
            "default": false
          },
          "accountReturnFirstLink": {
            "type": "boolean",
            "description": "The value of this configuration is a boolean (true/false). Controls which account to source a value from for an attribute.  If this flag is set to true, the transform returns the value from the first account in the list, even if it is null. If it is set to false, the transform returns the first non-null value. If not defined, the transform will default to false",
            "example": false,
            "default": false
          },
          "accountFilter": {
            "type": "string",
            "description": "This expression queries the database to narrow search results. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the database.  The default filter will always include the source and identity, and any subsequent expressions will be combined in an AND operation to the existing search criteria.\nOnly certain searchable attributes are available:  - `nativeIdentity` - the Account ID  - `displayName` - the Account Name  - `entitlements` - a boolean value to determine if the account has entitlements",
            "example": "!(nativeIdentity.startsWith(\"*DELETED*\"))"
          },
          "accountPropertyFilter": {
            "type": "string",
            "description": "This expression is used to search and filter accounts in memory. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the returned resultset.\n\nAll account attributes are available for filtering as this operation is performed in memory.",
            "example": "(groups.containsAll({'Admin'}) || location == 'Austin')"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Base64Decode": {
        "title": "base64Decode",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Base64Encode": {
        "title": "base64Encode",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Concatenation": {
        "title": "concat",
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "An array of items to join together",
            "example": [
              "John",
              " ",
              "Smith"
            ]
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Conditional": {
        "title": "conditional",
        "type": "object",
        "required": [
          "expression",
          "positiveCondition",
          "negativeCondition"
        ],
        "properties": {
          "expression": {
            "type": "string",
            "description": "A comparison statement that follows the structure of `ValueA eq ValueB` where `ValueA` and `ValueB` are static strings or outputs of other transforms. \n\nThe `eq` operator is the only valid comparison",
            "example": "ValueA eq ValueB"
          },
          "positiveCondition": {
            "type": "string",
            "description": "The output of the transform if the expression evalutes to true",
            "example": "true"
          },
          "negativeCondition": {
            "type": "string",
            "description": "The output of the transform if the expression evalutes to false",
            "example": "false"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "namedConstructs": {
        "title": "Named Construct",
        "type": "string",
        "description": "| Construct       | Date Time Pattern | Description |\n| ---------       | ----------------- | ----------- |\n| ISO8601         | `yyyy-MM-dd'T'HH:mm:ss.SSSX` | The ISO8601 standard. |          \n| LDAP            | `yyyyMMddHHmmss.Z`           | The LDAP standard.    |\n| PEOPLE_SOFT     | `MM/dd/yyyy`                 | The date format People Soft uses. |\n| EPOCH_TIME_JAVA | # ms from midnight, January 1st, 1970 | The incoming date value as elapsed time in milliseconds from midnight, January 1st, 1970. |\n| EPOCH_TIME_WIN32| # intervals of 100ns from midnight, January 1st, 1601 | The incoming date value as elapsed time in 100-nanosecond intervals from midnight, January 1st, 1601. |\n",
        "enum": [
          "ISO8601",
          "LDAP",
          "PEOPLE_SOFT",
          "EPOCH_TIME_JAVA",
          "EPOCH_TIME_WIN32"
        ],
        "example": "PEOPLE_SOFT"
      },
      "simpleDateFormat": {
        "title": "Java Simple Date Format",
        "type": "string",
        "description": "There are a variety of date time patterns you can express using SimpleDateFormat. The following table lists examples of different date time patterns expressed in the SimpleDateFormat and how they display. Refer to the SimpleDateFormat syntax page for more information.\n\n>NOTE: The following examples show how date and time patterns are interpreted in the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time in the U.S. Pacific Time time zone.\n  (This table is from the SimpleDateFormat page.)\n\n| Date Time Pattern | Result |\n| ----------------- | ------ |\n| `yyyy.MM.dd G 'at' HH:mm:ss z` | `2001.07.04 AD at 12:08:56 PDT` |\n| `EEE, MMM d, ''yy` | Wed, Jul 4, '01 |\n| `h:mm a`           | 12:08 PM |\n| `hh 'o''clock' a, zzzz` | 12 o'clock PM, Pacific Daylight Time |\n| `K:mm a, z`             | 0:08 PM, PDT |\n| `yyyyy.MMMMM.dd GGG hh:mm aaa` | 02001.July.04 AD 12:08 PM |\n| `EEE, d MMM yyyy HH:mm:ss Z`  | Wed, 4 Jul 2001 12:08:56 -0700 |\n| `yyMMddHHmmssZ`               | 010704120856-0700 |\n| `yyyy-MM-dd'T'HH:mm:ss.SSSZ`  | 2001-07-04T12:08:56.235-0700 |\n| `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` | 2001-07-04T12:08:56.235-07:00 |\n| `YYYY-'W'ww-u`                 | 2001-W27-3 |\n",
        "example": "mm/dd/yyyy"
      },
      "DateFormat": {
        "title": "dateFormat",
        "type": "object",
        "properties": {
          "inputFormat": {
            "description": "A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data is coming in as.\n\n*If no inputFormat is provided, the transform assumes that it is in ISO8601 format*",
            "oneOf": [
              {
                "$ref": "#/components/schemas/namedConstructs"
              },
              {
                "$ref": "#/components/schemas/simpleDateFormat"
              }
            ]
          },
          "outputFormat": {
            "description": "A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data should be formatted into.\n\n*If no inputFormat is provided, the transform assumes that it is in ISO8601 format*",
            "oneOf": [
              {
                "$ref": "#/components/schemas/namedConstructs"
              },
              {
                "$ref": "#/components/schemas/simpleDateFormat"
              }
            ]
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "DateCompare": {
        "title": "dateCompare",
        "type": "object",
        "required": [
          "firstDate",
          "secondDate",
          "operator",
          "positiveCondition",
          "negativeCondition"
        ],
        "properties": {
          "firstDate": {
            "description": "This is the first date to consider (The date that would be on the left hand side of the comparison operation).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountAttribute"
              },
              {
                "$ref": "#/components/schemas/DateFormat"
              }
            ]
          },
          "secondDate": {
            "description": "This is the second date to consider (The date that would be on the right hand side of the comparison operation).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountAttribute"
              },
              {
                "$ref": "#/components/schemas/DateFormat"
              }
            ]
          },
          "operator": {
            "type": "string",
            "description": "This is the comparison to perform.\n| Operation | Description |\n| --------- | ------- |\n| LT        | Strictly less than: `firstDate < secondDate` |\n| LTE       | Less than or equal to: `firstDate <= secondDate` |\n| GT        | Strictly greater than: `firstDate > secondDate` |\n| GTE       | Greater than or equal to: `firstDate >= secondDate` |\n",
            "enum": [
              "LT",
              "LTE",
              "GT",
              "GTE"
            ],
            "example": "LT"
          },
          "positiveCondition": {
            "type": "string",
            "description": "The output of the transform if the expression evalutes to true",
            "example": "true"
          },
          "negativeCondition": {
            "type": "string",
            "description": "The output of the transform if the expression evalutes to false",
            "example": false
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "DateMath": {
        "title": "dateMath",
        "type": "object",
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "type": "string",
            "description": "A string value of the date and time components to operation on, along with the math operations to execute.\n",
            "externalDocs": {
              "description": "Date Math Expressions",
              "url": "https://developer.sailpoint.com/idn/docs/transforms/operations/date-math#transform-structure"
            },
            "example": "now+1w"
          },
          "roundUp": {
            "type": "boolean",
            "description": "A boolean value to indicate whether the transform should round up or down when a rounding `/` operation is defined in the expression. \n\n\nIf not provided, the transform will default to `false`\n\n\n`true` indicates the transform should round up (i.e., truncate the fractional date/time component indicated and then add one unit of that component)\n\n\n`false` indicates the transform should round down (i.e., truncate the fractional date/time component indicated)\n",
            "example": false,
            "default": false
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "DecomposeDiacriticalMarks": {
        "title": "decomposeDiacriticalMarks",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "E164phone": {
        "title": "e164phone",
        "type": "object",
        "properties": {
          "defaultRegion": {
            "type": "string",
            "description": "This is an optional attribute that can be used to define the region of the phone number to format into.\n\n\nIf defaultRegion is not provided, it will take US as the default country.\n\n\nThe format of the country code should be in [ISO 3166-1 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n",
            "example": "US"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "FirstValid": {
        "title": "firstValid",
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "An array of attributes to evaluate for existence.",
            "example": [
              {
                "attributes": {
                  "sourceName": "Active Directory",
                  "attributeName": "sAMAccountName"
                },
                "type": "accountAttribute"
              },
              {
                "attributes": {
                  "sourceName": "Okta",
                  "attributeName": "login"
                },
                "type": "accountAttribute"
              },
              {
                "attributes": {
                  "sourceName": "HR Source",
                  "attributeName": "employeeID"
                },
                "type": "accountAttribute"
              }
            ]
          },
          "ignoreErrors": {
            "type": "boolean",
            "description": "a true or false value representing to move on to the next option if an error (like an Null Pointer Exception) were to occur.",
            "example": false,
            "default": false
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          }
        }
      },
      "TransformRule": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the Transform rule that needs to be invoked by the transform",
            "example": "Transform Calculation Rule"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          }
        }
      },
      "GenerateRandomString": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "includeNumbers",
          "includeSpecialChars",
          "length"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This must always be set to \"Cloud Services Deployment Utility\"",
            "example": "Cloud Services Deployment Utility"
          },
          "operation": {
            "type": "string",
            "description": "The operation to perform `generateRandomString`",
            "example": "generateRandomString"
          },
          "includeNumbers": {
            "type": "boolean",
            "description": "This must be either \"true\" or \"false\" to indicate whether the generator logic should include numbers",
            "example": true
          },
          "includeSpecialChars": {
            "type": "boolean",
            "description": "This must be either \"true\" or \"false\" to indicate whether the generator logic should include special characters",
            "example": true
          },
          "length": {
            "type": "string",
            "description": "This specifies how long the randomly generated string needs to be\n\n\n>NOTE Due to identity attribute data constraints, the maximum allowable value is 450 characters\n",
            "example": "10"
          },
          "requiresPeriodicRefresh": {
            "type": "boolean",
            "description": "A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process",
            "example": false
          }
        }
      },
      "GetReferenceIdentityAttribute": {
        "type": "object",
        "required": [
          "name",
          "operation",
          "uid"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This must always be set to \"Cloud Services Deployment Utility\"",
            "example": "Cloud Services Deployment Utility"
          },
          "operation": {
            "type": "string",
            "description": "The operation to perform `getReferenceIdentityAttribute`",
            "example": "getReferenceIdentityAttribute"
          },
          "uid": {
            "type": "string",
            "description": "This is the SailPoint User Name (uid) value of the identity whose attribute is desired\n\nAs a convenience feature, you can use the `manager` keyword to dynamically look up the user's manager and then get that manager's identity attribute.\n",
            "example": "2c91808570313110017040b06f344ec9"
          },
          "requiresPeriodicRefresh": {
            "type": "boolean",
            "description": "A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process",
            "example": false
          }
        }
      },
      "Rule": {
        "title": "rule",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransformRule"
          },
          {
            "$ref": "#/components/schemas/GenerateRandomString"
          },
          {
            "$ref": "#/components/schemas/GetReferenceIdentityAttribute"
          }
        ]
      },
      "IdentityAttribute-2": {
        "title": "identityAttribute",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The system (camel-cased) name of the identity attribute to bring in",
            "example": "email"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "IndexOf": {
        "title": "indexOf",
        "type": "object",
        "required": [
          "substring"
        ],
        "properties": {
          "substring": {
            "type": "string",
            "description": "A substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring.",
            "example": "admin_"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "ISO3166": {
        "title": "iso3166",
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "An optional value to denote which ISO 3166 format to return. Valid values are:\n\n\n`alpha2` - Two-character country code (e.g., \"US\"); this is the default value if no format is supplied\n\n\n`alpha3` - Three-character country code (e.g., \"USA\")\n\n\n`numeric` - The numeric country code (e.g., \"840\")\n",
            "example": "alpha2"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "LeftPad": {
        "title": "leftPad",
        "type": "object",
        "required": [
          "length"
        ],
        "properties": {
          "length": {
            "type": "string",
            "description": "An integer value for the desired length of the final output string",
            "example": "4"
          },
          "padding": {
            "type": "string",
            "description": "A string value representing the character that the incoming data should be padded with to get to the desired length\n\n\nIf not provided, the transform will default to a single space (\" \") character for padding\n",
            "example": "0"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Lookup": {
        "title": "lookup",
        "type": "object",
        "required": [
          "table"
        ],
        "properties": {
          "table": {
            "type": "object",
            "additionalProperties": true,
            "description": "This is a JSON object of key-value pairs. The key is the string that will attempt to be matched to the input, and the value is the output string that should be returned if the key is matched\n\n\n>**Note** the use of the optional default key value here; if none of the three countries in the above example match the input string, the transform will return \"Unknown Region\" for the attribute that is mapped to this transform.\n",
            "example": {
              "USA": "Americas",
              "FRA": "EMEA",
              "AUS": "APAC",
              "default": "Unknown Region"
            }
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Lower": {
        "title": "lower",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "NameNormalizer": {
        "title": "nameNormalizer",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "RandomAlphaNumeric": {
        "title": "randomAlphaNumeric",
        "type": "object",
        "properties": {
          "length": {
            "type": "string",
            "description": "This is an integer value specifying the size/number of characters the random string must contain\n\n\n* This value must be a positive number and cannot be blank\n\n\n* If no length is provided, the transform will default to a value of `32`\n\n\n* Due to identity attribute data constraints, the maximum allowable value is `450` characters\n",
            "example": "10"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "RandomNumeric": {
        "title": "randomNumeric",
        "type": "object",
        "properties": {
          "length": {
            "type": "string",
            "description": "This is an integer value specifying the size/number of characters the random string must contain\n\n\n* This value must be a positive number and cannot be blank\n\n\n* If no length is provided, the transform will default to a value of `32`\n\n\n* Due to identity attribute data constraints, the maximum allowable value is `450` characters\n",
            "example": "10"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Reference": {
        "title": "reference",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This ID specifies the name of the pre-existing transform which you want to use within your current transform",
            "example": "Existing Transform"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "ReplaceAll": {
        "title": "replaceAll",
        "type": "object",
        "required": [
          "table"
        ],
        "properties": {
          "table": {
            "type": "object",
            "additionalProperties": true,
            "description": "An attribute of key-value pairs. Each pair identifies the pattern to search for as its key, and the replacement string as its value.",
            "example": {
              "-": " ",
              "\"": "'",
              "ñ": "n"
            }
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Replace": {
        "title": "replace",
        "type": "object",
        "required": [
          "regex",
          "replacement"
        ],
        "properties": {
          "regex": {
            "type": "string",
            "description": "This can be a string or a regex pattern in which you want to replace.",
            "example": "[^a-zA-Z]",
            "externalDocs": {
              "description": "Regex Builder",
              "url": "https://regex101.com/"
            }
          },
          "replacement": {
            "type": "string",
            "description": "This is the replacement string that should be substituded wherever the string or pattern is found.",
            "example": " "
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "RightPad": {
        "title": "rightPad",
        "type": "object",
        "required": [
          "length"
        ],
        "properties": {
          "length": {
            "type": "string",
            "description": "An integer value for the desired length of the final output string",
            "example": "4"
          },
          "padding": {
            "type": "string",
            "description": "A string value representing the character that the incoming data should be padded with to get to the desired length\n\n\nIf not provided, the transform will default to a single space (\" \") character for padding\n",
            "example": "0"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Split": {
        "title": "split",
        "type": "object",
        "required": [
          "delimiter",
          "index"
        ],
        "properties": {
          "delimiter": {
            "type": "string",
            "description": "This can be either a single character or a regex expression, and is used by the transform to identify the break point between two substrings in the incoming data",
            "example": ","
          },
          "index": {
            "type": "string",
            "description": "An integer value for the desired array element after the incoming data has been split into a list; the array is a 0-based object, so the first array element would be index 0, the second element would be index 1, etc.",
            "example": "5"
          },
          "throws": {
            "type": "boolean",
            "description": "A boolean (true/false) value which indicates whether an exception should be thrown and returned as an output when an index is out of bounds with the resultant array (i.e., the provided index value is larger than the size of the array)\n\n\n`true` - The transform should return \"IndexOutOfBoundsException\"\n\n\n`false` - The transform should return null\n\n\nIf not provided, the transform will default to false and return a null\n",
            "example": true,
            "default": false
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Static": {
        "title": "static",
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "string",
            "description": "This must evaluate to a JSON string, either through a fixed value or through conditional logic using the Apache Velocity Template Language.",
            "example": "string$variable",
            "externalDocs": {
              "description": "Static Transform Documentation",
              "url": "https://developer.sailpoint.com/idn/docs/transforms/operations/static"
            }
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          }
        }
      },
      "Substring": {
        "title": "substring",
        "type": "object",
        "required": [
          "begin"
        ],
        "properties": {
          "begin": {
            "type": "integer",
            "description": "The index of the first character to include in the returned substring.\n\n\nIf `begin` is set to -1, the transform will begin at character 0 of the input data\n",
            "example": 1,
            "format": "int32"
          },
          "beginOffset": {
            "type": "integer",
            "description": "This integer value is the number of characters to add to the begin attribute when returning a substring. \n\nThis attribute is only used if begin is not -1.\n",
            "example": 3,
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "description": "The index of the first character to exclude from the returned substring.\n\nIf end is -1 or not provided at all, the substring transform will return everything up to the end of the input string.\n",
            "example": 6,
            "format": "int32"
          },
          "endOffset": {
            "type": "integer",
            "description": "This integer value is the number of characters to add to the end attribute when returning a substring. \n\nThis attribute is only used if end is provided and is not -1.\n",
            "example": 1,
            "format": "int32"
          },
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Trim": {
        "title": "trim",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "Upper": {
        "title": "upper",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          },
          "input": {
            "$ref": "#/components/schemas/input"
          }
        }
      },
      "UUIDGenerator": {
        "title": "uuid",
        "type": "object",
        "properties": {
          "requiresPeriodicRefresh": {
            "$ref": "#/components/schemas/RequiresPeriodicRefresh"
          }
        }
      },
      "Transform": {
        "type": "object",
        "title": "Transform",
        "description": "The representation of an internally- or customer-defined transform.",
        "required": [
          "name",
          "type",
          "attributes"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of this transform",
            "example": "Timestamp To Date",
            "minLength": 1,
            "maxLength": 50
          },
          "type": {
            "type": "string",
            "description": "The type of transform operation",
            "enum": [
              "accountAttribute",
              "base64Decode",
              "base64Encode",
              "concat",
              "conditional",
              "dateCompare",
              "dateFormat",
              "dateMath",
              "decomposeDiacriticalMarks",
              "e164phone",
              "firstValid",
              "rule",
              "identityAttribute",
              "indexOf",
              "iso3166",
              "lastIndexOf",
              "leftPad",
              "lookup",
              "lower",
              "normalizeNames",
              "randomAlphaNumeric",
              "randomNumeric",
              "reference",
              "replaceAll",
              "replace",
              "rightPad",
              "split",
              "static",
              "substring",
              "trim",
              "upper",
              "usernameGenerator",
              "uuid",
              "displayName",
              "rfc5646"
            ],
            "example": "dateFormat",
            "externalDocs": {
              "description": "Transform Operations",
              "url": "https://developer.sailpoint.com/idn/docs/transforms/operations"
            }
          },
          "attributes": {
            "description": "Meta-data about the transform. Values in this list are specific to the type of transform to be executed.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountAttribute"
              },
              {
                "$ref": "#/components/schemas/Base64Decode"
              },
              {
                "$ref": "#/components/schemas/Base64Encode"
              },
              {
                "$ref": "#/components/schemas/Concatenation"
              },
              {
                "$ref": "#/components/schemas/Conditional"
              },
              {
                "$ref": "#/components/schemas/DateCompare"
              },
              {
                "$ref": "#/components/schemas/DateFormat"
              },
              {
                "$ref": "#/components/schemas/DateMath"
              },
              {
                "$ref": "#/components/schemas/DecomposeDiacriticalMarks"
              },
              {
                "$ref": "#/components/schemas/E164phone"
              },
              {
                "$ref": "#/components/schemas/FirstValid"
              },
              {
                "$ref": "#/components/schemas/Rule"
              },
              {
                "$ref": "#/components/schemas/IdentityAttribute-2"
              },
              {
                "$ref": "#/components/schemas/IndexOf"
              },
              {
                "$ref": "#/components/schemas/ISO3166"
              },
              {
                "$ref": "#/components/schemas/LeftPad"
              },
              {
                "$ref": "#/components/schemas/Lookup"
              },
              {
                "$ref": "#/components/schemas/Lower"
              },
              {
                "$ref": "#/components/schemas/NameNormalizer"
              },
              {
                "$ref": "#/components/schemas/RandomAlphaNumeric"
              },
              {
                "$ref": "#/components/schemas/RandomNumeric"
              },
              {
                "$ref": "#/components/schemas/Reference"
              },
              {
                "$ref": "#/components/schemas/ReplaceAll"
              },
              {
                "$ref": "#/components/schemas/Replace"
              },
              {
                "$ref": "#/components/schemas/RightPad"
              },
              {
                "$ref": "#/components/schemas/Split"
              },
              {
                "$ref": "#/components/schemas/Static"
              },
              {
                "$ref": "#/components/schemas/Substring"
              },
              {
                "$ref": "#/components/schemas/Trim"
              },
              {
                "$ref": "#/components/schemas/Upper"
              },
              {
                "$ref": "#/components/schemas/UUIDGenerator"
              }
            ]
          }
        }
      },
      "TransformRead": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Transform"
          },
          {
            "type": "object",
            "required": [
              "id",
              "internal"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of this transform",
                "example": "2cd78adghjkja34jh2b1hkjhasuecd"
              },
              "internal": {
                "type": "boolean",
                "description": "Indicates whether this is an internal SailPoint-created transform or a customer-created transform",
                "example": false,
                "default": false
              }
            }
          }
        ]
      },
      "ResourceBundleMessage": {
        "type": "object",
        "title": "Resource Bundle Message",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the message",
            "example": "recommender-api.V2_WEIGHT_FEATURE_PRODUCT_INTERPRETATION_LOW"
          },
          "format": {
            "type": "string",
            "description": "The format of the message",
            "example": "{0,,\\\"i18n hint: percentage\\\"}% of identities with the same {1,,\\\"i18n hint: name of category feature\\\"} have this access. This information had a low impact on the overall score."
          }
        }
      },
      "TriggerType": {
        "type": "string",
        "description": "The type of trigger.",
        "example": "FIRE_AND_FORGET",
        "enum": [
          "REQUEST_RESPONSE",
          "FIRE_AND_FORGET"
        ]
      },
      "AccessItemRequestedForDto-2": {
        "type": "object",
        "description": "Identity whom the access item is requested for.",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of the identity whom the access item is requested for.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "ID of the identity whom the access item is requested for.",
            "example": "2c4180a46faadee4016fb4e018c20626"
          },
          "name": {
            "type": "string",
            "description": "Name of the identity whom the access item is requested for.",
            "example": "Robert Robinson"
          }
        }
      },
      "AccessItemRequesterDto-2": {
        "type": "object",
        "description": "Access item requester's identity.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Access item requester's DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Access item requester's identity ID.",
            "example": "2c7180a46faadee4016fb4e018c20648"
          },
          "name": {
            "type": "string",
            "description": "Access item requester's name.",
            "example": "William Wilson"
          }
        }
      },
      "AccessRequestDynamicApprover": {
        "title": "Access Request Dynamic Approver",
        "type": "object",
        "required": [
          "accessRequestId",
          "requestedFor",
          "requestedItems",
          "requestedBy"
        ],
        "properties": {
          "accessRequestId": {
            "type": "string",
            "description": "Unique ID of the access request object. You can use this ID with the [Access Request Status endpoint](https://developer.sailpoint.com/idn/api/beta/list-access-request-status) to get the request's status.",
            "example": "4b4d982dddff4267ab12f0f1e72b5a6d"
          },
          "requestedFor": {
            "type": "array",
            "description": "Identities access was requested for.",
            "items": {
              "$ref": "#/components/schemas/AccessItemRequestedForDto-2"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "requestedItems": {
            "description": "Requested access items.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "type",
                "operation"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Access item's unique identifier.",
                  "example": "2c91808b6ef1d43e016efba0ce470904"
                },
                "name": {
                  "type": "string",
                  "description": "Access item's name.",
                  "example": "Engineering Access"
                },
                "description": {
                  "nullable": true,
                  "type": "string",
                  "description": "Access item's extended description.",
                  "example": "Engineering Access"
                },
                "type": {
                  "enum": [
                    "ACCESS_PROFILE",
                    "ROLE",
                    "ENTITLEMENT"
                  ],
                  "description": "Type of access item being requested.",
                  "example": "ACCESS_PROFILE"
                },
                "operation": {
                  "enum": [
                    "Add",
                    "Remove"
                  ],
                  "description": "Action to perform on the requested access item.",
                  "example": "Add"
                },
                "comment": {
                  "nullable": true,
                  "type": "string",
                  "description": "Comment from the requester about why the access is necessary.",
                  "example": "William needs this access for his day to day job activities."
                }
              }
            },
            "minItems": 1,
            "maxItems": 25
          },
          "requestedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessItemRequesterDto-2"
              }
            ]
          }
        }
      },
      "AccessItemApproverDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "DTO type of the identity who approved the access item request.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "ID of the identity who approved the access item request.",
            "example": "2c3780a46faadee4016fb4e018c20652"
          },
          "name": {
            "type": "string",
            "description": "Name of the identity who approved the access item request.",
            "example": "Allen Albertson"
          }
        }
      },
      "AccessRequestPostApproval": {
        "title": "Access Request Post Approval",
        "type": "object",
        "required": [
          "accessRequestId",
          "requestedFor",
          "requestedItemsStatus",
          "requestedBy"
        ],
        "properties": {
          "accessRequestId": {
            "type": "string",
            "description": "Access request's unique ID.",
            "example": "2c91808b6ef1d43e016efba0ce470904"
          },
          "requestedFor": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "array",
            "description": "Identities whom access was requested for.",
            "items": {
              "$ref": "#/components/schemas/AccessItemRequestedForDto-2"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "requestedItemsStatus": {
            "description": "Details about the outcome of each requested access item.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "type",
                "operation",
                "approvalInfo"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Access item's unique ID.",
                  "example": "2c91808b6ef1d43e016efba0ce470904"
                },
                "name": {
                  "type": "string",
                  "description": "Access item's name.",
                  "example": "Engineering Access"
                },
                "description": {
                  "nullable": true,
                  "type": "string",
                  "description": "Access item's description.",
                  "example": "Access to engineering database"
                },
                "type": {
                  "enum": [
                    "ACCESS_PROFILE",
                    "ROLE",
                    "ENTITLEMENT"
                  ],
                  "description": "Access item's type.",
                  "example": "ACCESS_PROFILE"
                },
                "operation": {
                  "enum": [
                    "Add",
                    "Remove"
                  ],
                  "description": "Action to perform on the requested access item.",
                  "example": "Add"
                },
                "comment": {
                  "nullable": true,
                  "type": "string",
                  "description": "Comment from the identity requesting access.",
                  "example": "William needs this access to do his job."
                },
                "clientMetadata": {
                  "description": "Additional customer defined metadata about the access item.",
                  "nullable": true,
                  "type": "object",
                  "additionalProperties": true,
                  "example": {
                    "applicationName": "My application"
                  }
                },
                "approvalInfo": {
                  "description": "List of approvers for the access request.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "approvalDecision",
                      "approverName",
                      "approver"
                    ],
                    "properties": {
                      "approvalComment": {
                        "nullable": true,
                        "type": "string",
                        "description": "Approver's comment.",
                        "example": "This access looks good. Approved."
                      },
                      "approvalDecision": {
                        "enum": [
                          "APPROVED",
                          "DENIED"
                        ],
                        "description": "Approver's final decision.",
                        "example": "APPROVED"
                      },
                      "approverName": {
                        "type": "string",
                        "description": "Approver's name.",
                        "example": "Stephen.Austin"
                      },
                      "approver": {
                        "required": [
                          "id",
                          "type",
                          "name"
                        ],
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/AccessItemApproverDto"
                          }
                        ],
                        "description": "Approver's identity."
                      }
                    }
                  }
                }
              }
            }
          },
          "requestedBy": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessItemRequesterDto-2"
              }
            ]
          }
        }
      },
      "AccessRequestPreApproval": {
        "title": "Access Request Pre Approval",
        "type": "object",
        "required": [
          "accessRequestId",
          "requestedFor",
          "requestedItems",
          "requestedBy"
        ],
        "properties": {
          "accessRequestId": {
            "type": "string",
            "description": "Access request's unique ID.",
            "example": "2c91808b6ef1d43e016efba0ce470904"
          },
          "requestedFor": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "array",
            "description": "Identities whom access was requested for.",
            "items": {
              "$ref": "#/components/schemas/AccessItemRequestedForDto-2"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "requestedItems": {
            "description": "Details about each requested access item.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "type",
                "operation"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Access item's unique ID.",
                  "example": "2c91808b6ef1d43e016efba0ce470904"
                },
                "name": {
                  "type": "string",
                  "description": "Access item's name.",
                  "example": "Engineering Access"
                },
                "description": {
                  "nullable": true,
                  "type": "string",
                  "description": "Access item's description.",
                  "example": "Access to engineering database"
                },
                "type": {
                  "enum": [
                    "ACCESS_PROFILE",
                    "ROLE",
                    "ENTITLEMENT"
                  ],
                  "description": "Access item's type.",
                  "example": "ACCESS_PROFILE"
                },
                "operation": {
                  "enum": [
                    "Add",
                    "Remove"
                  ],
                  "description": "Action to perform on the access item.",
                  "example": "Add"
                },
                "comment": {
                  "nullable": true,
                  "type": "string",
                  "description": "Comment from the identity requesting access.",
                  "example": "William needs this access to do his job."
                }
              }
            },
            "minItems": 1,
            "maxItems": 25
          },
          "requestedBy": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessItemRequesterDto-2"
              }
            ]
          }
        }
      },
      "AccountAggregationCompleted": {
        "title": "Account Aggregation Completed",
        "type": "object",
        "required": [
          "source",
          "status",
          "started",
          "completed",
          "errors",
          "warnings",
          "stats"
        ],
        "properties": {
          "source": {
            "required": [
              "type",
              "name",
              "id"
            ],
            "type": "object",
            "description": "Source ISC is aggregating accounts from.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Source's DTO type.",
                "enum": [
                  "SOURCE"
                ],
                "example": "SOURCE"
              },
              "id": {
                "type": "string",
                "description": "Source's unique ID.",
                "example": "2c9180835d191a86015d28455b4b232a"
              },
              "name": {
                "type": "string",
                "description": "Source's name.",
                "example": "HR Active Directory"
              }
            }
          },
          "status": {
            "description": "Aggregation's overall status.",
            "enum": [
              "Success",
              "Failed",
              "Terminated"
            ],
            "example": "Success"
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the account aggregation started.",
            "example": "2020-06-29T22:01:50.474Z"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the account aggregation finished.",
            "example": "2020-06-29T22:02:04.090Z"
          },
          "errors": {
            "nullable": true,
            "description": "List of errors that occurred during the aggregation.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "Descriptive error message.",
              "example": "Accounts unable to be aggregated."
            }
          },
          "warnings": {
            "nullable": true,
            "description": "List of warnings that occurred during the aggregation.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "Descriptive warning message.",
              "example": "Account Skipped"
            }
          },
          "stats": {
            "type": "object",
            "description": "Overall statistics about the account aggregation.",
            "required": [
              "scanned",
              "unchanged",
              "changed",
              "added",
              "removed"
            ],
            "properties": {
              "scanned": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "Number of accounts scanned/iterated over.",
                "example": 200
              },
              "unchanged": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "Number of accounts that existed before but had no changes.",
                "example": 190
              },
              "changed": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "Number of accounts that existed before but had changes.",
                "example": 6
              },
              "added": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "Number of accounts that are new and didn't previously exist.",
                "example": 4
              },
              "removed": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647,
                "format": "int32",
                "description": "Number accounts that existed before but were removed and no longer exist.",
                "example": 3
              }
            }
          }
        }
      },
      "AccountAttributesChanged": {
        "title": "Account Attributes Changed",
        "type": "object",
        "required": [
          "identity",
          "source",
          "account",
          "changes"
        ],
        "properties": {
          "identity": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "The identity whose account attributes were updated.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity whose account attributes were updated.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity whose account attributes were updated.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Display name of the identity whose account attributes were updated.",
                "example": "Michael Michaels"
              }
            }
          },
          "source": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "The source that contains the account.",
            "properties": {
              "id": {
                "description": "ID of the object to which this reference applies",
                "type": "string",
                "example": "4e4d982dddff4267ab12f0f1e72b5a6d"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SOURCE"
                ],
                "example": "SOURCE",
                "description": "The type of object that is referenced"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "Corporate Active Directory"
              }
            }
          },
          "account": {
            "type": "object",
            "description": "Details of the account where the attributes changed.",
            "required": [
              "id",
              "uuid",
              "name",
              "nativeIdentity",
              "type"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "SailPoint generated unique identifier.",
                "example": "52170a74-ca89-11ea-87d0-0242ac130003"
              },
              "uuid": {
                "nullable": true,
                "type": "string",
                "description": "The source's unique identifier for the account. UUID is generated by the source system.",
                "example": "1cb1f07d-3e5a-4431-becd-234fa4306108"
              },
              "name": {
                "type": "string",
                "description": "Name of the account.",
                "example": "john.doe"
              },
              "nativeIdentity": {
                "type": "string",
                "description": "Unique ID of the account on the source.",
                "example": "cn=john.doe,ou=users,dc=acme,dc=com"
              },
              "type": {
                "enum": [
                  "ACCOUNT"
                ],
                "description": "The type of the account",
                "example": "ACCOUNT"
              }
            }
          },
          "changes": {
            "type": "array",
            "description": "A list of attributes that changed.",
            "items": {
              "type": "object",
              "required": [
                "attribute",
                "oldValue",
                "newValue"
              ],
              "properties": {
                "attribute": {
                  "type": "string",
                  "description": "The name of the attribute.",
                  "example": "sn"
                },
                "oldValue": {
                  "description": "The previous value of the attribute.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "nullable": true,
                        "type": "string"
                      }
                    }
                  ],
                  "example": "doe"
                },
                "newValue": {
                  "description": "The new value of the attribute.",
                  "nullable": true,
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "nullable": true,
                        "type": "string"
                      }
                    }
                  ],
                  "example": "ryans"
                }
              }
            }
          }
        }
      },
      "AccountCorrelated": {
        "title": "Account Correlated",
        "type": "object",
        "required": [
          "identity",
          "source",
          "account",
          "attributes"
        ],
        "properties": {
          "identity": {
            "required": [
              "type",
              "name",
              "id"
            ],
            "type": "object",
            "description": "Identity the account is correlated with.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity the account is correlated with.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity the account is correlated with.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Display name of the identity the account is correlated with.",
                "example": "Michael Michaels"
              }
            }
          },
          "source": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "The source the accounts are being correlated from.",
            "properties": {
              "type": {
                "type": "string",
                "description": "The DTO type of the source the accounts are being correlated from.",
                "enum": [
                  "SOURCE"
                ],
                "example": "SOURCE"
              },
              "id": {
                "type": "string",
                "description": "The ID of the source the accounts are being correlated from.",
                "example": "2c9180835d191a86015d28455b4b232a"
              },
              "name": {
                "type": "string",
                "description": "Display name of the source the accounts are being correlated from.",
                "example": "HR Active Directory"
              }
            }
          },
          "account": {
            "type": "object",
            "description": "The correlated account.",
            "required": [
              "id",
              "name",
              "nativeIdentity",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The correlated account's DTO type.",
                "enum": [
                  "ACCOUNT"
                ],
                "example": "ACCOUNT"
              },
              "id": {
                "type": "string",
                "description": "The correlated account's ID.",
                "example": "98da47c31df444558c211f9b205184f6"
              },
              "name": {
                "type": "string",
                "description": "The correlated account's display name.",
                "example": "Brian Mendoza"
              },
              "nativeIdentity": {
                "type": "string",
                "description": "Unique ID of the account on the source.",
                "example": "cn=john.doe,ou=users,dc=acme,dc=com"
              },
              "uuid": {
                "nullable": true,
                "type": "string",
                "description": "The source's unique identifier for the account. UUID is generated by the source system.",
                "example": "1cb1f07d-3e5a-4431-becd-234fa4306108"
              }
            }
          },
          "attributes": {
            "type": "object",
            "description": "The attributes associated with the account.  Attributes are unique per source.",
            "additionalProperties": true,
            "example": {
              "sn": "doe",
              "givenName": "john",
              "memberOf": [
                "cn=g1,ou=groups,dc=acme,dc=com",
                "cn=g2,ou=groups,dc=acme,dc=com",
                "cn=g3,ou=groups,dc=acme,dc=com"
              ]
            }
          },
          "entitlementCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of entitlements associated with this account.",
            "example": 0
          }
        }
      },
      "AccountsCollectedForAggregation": {
        "title": "Accounts Collected for Aggregation",
        "type": "object",
        "required": [
          "source",
          "status",
          "started",
          "completed",
          "errors",
          "warnings",
          "stats"
        ],
        "properties": {
          "source": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Reference to the source that has been aggregated.",
            "properties": {
              "id": {
                "description": "ID of the object to which this reference applies",
                "type": "string",
                "example": "4e4d982dddff4267ab12f0f1e72b5a6d"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SOURCE"
                ],
                "example": "SOURCE",
                "description": "The type of object that is referenced"
              },
              "name": {
                "type": "string",
                "description": "Human-readable display name of the object to which this reference applies",
                "example": "Corporate Active Directory"
              }
            }
          },
          "status": {
            "description": "The overall status of the collection.",
            "enum": [
              "Success",
              "Failed",
              "Terminated"
            ],
            "example": "Success"
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account collection started.",
            "example": "2020-06-29T22:01:50.474Z"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account collection finished.",
            "example": "2020-06-29T22:02:04.090Z"
          },
          "errors": {
            "nullable": true,
            "description": "A list of errors that occurred during the collection.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "A descriptive error message.",
              "example": "Unable to collect accounts for aggregation."
            }
          },
          "warnings": {
            "nullable": true,
            "description": "A list of warnings that occurred during the collection.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "A descriptive warning message.",
              "example": "Account Skipped"
            }
          },
          "stats": {
            "type": "object",
            "description": "Overall statistics about the account collection.",
            "required": [
              "scanned",
              "unchanged",
              "changed",
              "added",
              "removed"
            ],
            "properties": {
              "scanned": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "The number of accounts which were scanned / iterated over.",
                "example": 200
              },
              "unchanged": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "The number of accounts which existed before, but had no changes.",
                "example": 190
              },
              "changed": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "The number of accounts which existed before, but had changes.",
                "example": 6
              },
              "added": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 2147483647,
                "description": "The number of accounts which are new - have not existed before.",
                "example": 4
              },
              "removed": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647,
                "format": "int32",
                "description": "The number accounts which existed before, but no longer exist (thus getting removed).",
                "example": 3
              }
            }
          }
        }
      },
      "AccountUncorrelated": {
        "title": "Account Uncorrelated",
        "type": "object",
        "required": [
          "identity",
          "source",
          "account"
        ],
        "properties": {
          "identity": {
            "required": [
              "type",
              "name",
              "id"
            ],
            "type": "object",
            "description": "Identity the account is uncorrelated with.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity the account is uncorrelated with.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity the account is uncorrelated with.",
                "example": "2c3780a46faadee4016fb4e018c20652"
              },
              "name": {
                "type": "string",
                "description": "Display name of the identity the account is uncorrelated with.",
                "example": "Allen Albertson"
              }
            }
          },
          "source": {
            "required": [
              "type",
              "name",
              "id"
            ],
            "type": "object",
            "description": "The source the accounts are uncorrelated from.",
            "properties": {
              "type": {
                "type": "string",
                "description": "The DTO type of the source the accounts are uncorrelated from.",
                "enum": [
                  "SOURCE"
                ],
                "example": "SOURCE"
              },
              "id": {
                "type": "string",
                "description": "The ID of the source the accounts are uncorrelated from.",
                "example": "2c6180835d191a86015d28455b4b231b"
              },
              "name": {
                "type": "string",
                "description": "Display name of the source the accounts are uncorrelated from.",
                "example": "Corporate Directory"
              }
            }
          },
          "account": {
            "type": "object",
            "description": "Uncorrelated account.",
            "required": [
              "id",
              "name",
              "nativeIdentity",
              "type"
            ],
            "properties": {
              "type": {
                "enum": [
                  "ACCOUNT"
                ],
                "description": "Uncorrelated account's DTO type.",
                "example": "ACCOUNT"
              },
              "id": {
                "type": "string",
                "description": "Uncorrelated account's ID.",
                "example": "4dd497e3723e439991cb6d0e478375dd"
              },
              "name": {
                "type": "string",
                "description": "Uncorrelated account's display name.",
                "example": "Sadie Jensen"
              },
              "nativeIdentity": {
                "type": "string",
                "description": "Unique ID of the account on the source.",
                "example": "cn=john.doe,ou=users,dc=acme,dc=com"
              },
              "uuid": {
                "nullable": true,
                "type": "string",
                "description": "The source's unique identifier for the account. UUID is generated by the source system.",
                "example": "1cb1f07d-3e5a-4431-becd-234fa4306108"
              }
            }
          },
          "entitlementCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of entitlements associated with this account.",
            "example": 0
          }
        }
      },
      "CampaignActivated": {
        "title": "Campaign Activated",
        "type": "object",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "type": "object",
            "description": "Details about the certification campaign that was activated.",
            "required": [
              "id",
              "name",
              "description",
              "created",
              "deadline",
              "type",
              "campaignOwner",
              "status"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Campaign's unique ID.",
                "example": "2c91808576f886190176f88cac5a0010"
              },
              "name": {
                "type": "string",
                "description": "Campaign's name.",
                "example": "Manager Access Campaign"
              },
              "description": {
                "type": "string",
                "description": "Campaign's extended description.",
                "example": "Audit access for all employees."
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign was created.",
                "example": "2021-02-16T03:04:45.815Z"
              },
              "modified": {
                "nullable": true,
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign was last modified.",
                "example": "2021-02-16T03:06:45.815Z"
              },
              "deadline": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign is due.",
                "example": "2021-03-16T03:04:45.815Z"
              },
              "type": {
                "description": "Campaign's type.",
                "enum": [
                  "MANAGER",
                  "SOURCE_OWNER",
                  "SEARCH",
                  "ROLE_COMPOSITION"
                ],
                "example": "MANAGER"
              },
              "campaignOwner": {
                "type": "object",
                "description": "Details of the identity who owns the campaign.",
                "required": [
                  "id",
                  "displayName",
                  "email"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Identity's unique ID.",
                    "example": "37f080867702c1910177031320c40n27"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Identity's name.",
                    "example": "Albert Albertson"
                  },
                  "email": {
                    "type": "string",
                    "description": "Identity's primary email address.",
                    "example": "albert.albertson@example.com"
                  }
                }
              },
              "status": {
                "enum": [
                  "ACTIVE"
                ],
                "description": "Campaign's current status.",
                "example": "ACTIVE"
              }
            }
          }
        }
      },
      "CampaignEnded": {
        "title": "Campaign Ended",
        "type": "object",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "type": "object",
            "description": "Details about the certification campaign that ended.",
            "required": [
              "id",
              "name",
              "description",
              "created",
              "deadline",
              "type",
              "campaignOwner",
              "status"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Campaign's unique ID for the campaign.",
                "example": "2c91808576f886190176f88cac5a0010"
              },
              "name": {
                "type": "string",
                "description": "Campaign's unique ID.",
                "example": "Manager Access Campaign"
              },
              "description": {
                "type": "string",
                "description": "Campaign's extended description.",
                "example": "Audit access for all employees."
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign was created.",
                "example": "2021-02-16T03:04:45.815Z"
              },
              "modified": {
                "nullable": true,
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign was last modified.",
                "example": "2021-03-16T03:06:45.815Z"
              },
              "deadline": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign is due.",
                "example": "2021-03-16T03:04:45.815Z"
              },
              "type": {
                "description": "Campaign's type.",
                "enum": [
                  "MANAGER",
                  "SOURCE_OWNER",
                  "SEARCH",
                  "ROLE_COMPOSITION"
                ],
                "example": "MANAGER"
              },
              "campaignOwner": {
                "type": "object",
                "description": "Details of the identity who owns the campaign.",
                "required": [
                  "id",
                  "displayName",
                  "email"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Identity's unique ID.",
                    "example": "37f080867702c1910177031320c40n27"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Identity's name.",
                    "example": "Albert Albertson"
                  },
                  "email": {
                    "type": "string",
                    "description": "Identity's primary email address.",
                    "example": "albert.albertson@example.com"
                  }
                }
              },
              "status": {
                "enum": [
                  "COMPLETED"
                ],
                "description": "Campaign's current status.",
                "example": "COMPLETED"
              }
            }
          }
        }
      },
      "CampaignGenerated": {
        "title": "Campaign Generated",
        "type": "object",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "description": "Details about the campaign that was generated.",
            "type": "object",
            "required": [
              "id",
              "name",
              "description",
              "created",
              "type",
              "campaignOwner",
              "status"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Campaign's unique ID.",
                "example": "2c91808576f886190176f88cac5a0010"
              },
              "name": {
                "type": "string",
                "description": "Campaign's name.",
                "example": "Manager Access Campaign"
              },
              "description": {
                "type": "string",
                "description": "Campaign's extended description.",
                "example": "Audit access for all employees."
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the campaign was created.",
                "example": "2021-02-16T03:04:45.815Z"
              },
              "modified": {
                "nullable": true,
                "type": "string",
                "description": "Date and time when the campaign was last modified.",
                "example": "2021-02-17T03:04:45.815Z"
              },
              "deadline": {
                "nullable": true,
                "type": "string",
                "description": "Date and time when the campaign must be finished.",
                "example": "2021-02-18T03:04:45.815Z"
              },
              "type": {
                "enum": [
                  "MANAGER",
                  "SOURCE_OWNER",
                  "SEARCH",
                  "ROLE_COMPOSITION"
                ],
                "description": "Campaign's type.",
                "example": "MANAGER"
              },
              "campaignOwner": {
                "type": "object",
                "description": "Identity who owns the campaign.",
                "required": [
                  "id",
                  "displayName",
                  "email"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Identity's unique ID.",
                    "example": "37f080867702c1910177031320c40n27"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Identity's name.",
                    "example": "Albert Albertson"
                  },
                  "email": {
                    "type": "string",
                    "description": "Identity's primary email address.",
                    "example": "albert.albertson@example.com"
                  }
                }
              },
              "status": {
                "enum": [
                  "STAGED",
                  "ACTIVATING",
                  "ACTIVE"
                ],
                "description": "Campaign's current status.",
                "example": "STAGED"
              }
            }
          }
        }
      },
      "CertificationSignedOff": {
        "title": "Certification Signed Off",
        "type": "object",
        "required": [
          "certification"
        ],
        "properties": {
          "certification": {
            "description": "Certification campaign that was signed off on.",
            "required": [
              "id",
              "name",
              "created"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CertificationDto"
              }
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Certification's unique ID.",
                "example": "2c91808576f886190176f88caf0d0067"
              },
              "name": {
                "type": "string",
                "description": "Certification's name.",
                "example": "Manager Access Review for Alice Baker"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the certification was created.",
                "example": "2020-02-16T03:04:45.815Z"
              },
              "modified": {
                "nullable": true,
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the certification was last modified.",
                "example": "2020-02-16T03:06:45.815Z"
              }
            }
          }
        }
      },
      "IdentityAttributesChanged": {
        "title": "Identity Attributes Changed",
        "type": "object",
        "required": [
          "identity",
          "changes"
        ],
        "properties": {
          "identity": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Identity whose attributes changed.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of identity whose attributes changed.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of identity whose attributes changed.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Name of identity whose attributes changed.",
                "example": "Michael Michaels"
              }
            }
          },
          "changes": {
            "description": "List of identity's attributes that changed.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "attribute"
              ],
              "properties": {
                "attribute": {
                  "type": "string",
                  "description": "Identity attribute's name.",
                  "example": "department"
                },
                "oldValue": {
                  "description": "Identity attribute's previous value before the change.",
                  "nullable": true,
                  "example": "sales",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "nullable": true,
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    }
                  ]
                },
                "newValue": {
                  "description": "Identity attribute's new value after the change.",
                  "example": "marketing",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "nullable": true,
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "IdentityCreated": {
        "title": "Identity Created",
        "type": "object",
        "required": [
          "identity",
          "attributes"
        ],
        "properties": {
          "identity": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Created identity.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Identity's DTO type.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Identity's unique ID.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Identity's name.",
                "example": "Michael Michaels"
              }
            }
          },
          "attributes": {
            "type": "object",
            "description": "Attributes assigned to the identity. These attributes are determined by the identity profile.",
            "additionalProperties": true,
            "example": {
              "firstname": "John"
            }
          }
        }
      },
      "IdentityDeleted": {
        "title": "Identity Deleted",
        "type": "object",
        "required": [
          "identity",
          "attributes"
        ],
        "properties": {
          "identity": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Deleted identity.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Deleted identity's DTO type.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Deleted identity ID.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Deleted identity's name.",
                "example": "Michael Michaels"
              }
            }
          },
          "attributes": {
            "type": "object",
            "description": "Identity attributes. The attributes are determined by the identity profile.",
            "additionalProperties": true,
            "example": {
              "firstname": "John"
            }
          }
        }
      },
      "ProvisioningCompleted": {
        "title": "Provisioning Completed",
        "type": "object",
        "required": [
          "trackingNumber",
          "sources",
          "recipient",
          "accountRequests"
        ],
        "properties": {
          "trackingNumber": {
            "type": "string",
            "description": "Provisioning request's reference number. Useful for tracking status in the 'Account Activity' search interface.",
            "example": "4b4d982dddff4267ab12f0f1e72b5a6d"
          },
          "sources": {
            "type": "string",
            "description": "Sources the provisioning transactions were performed on. Sources are comma separated.",
            "example": "Corp AD, Corp LDAP, Corp Salesforce"
          },
          "action": {
            "nullable": true,
            "type": "string",
            "description": "Origin of the provisioning request.",
            "example": "IdentityRefresh"
          },
          "errors": {
            "nullable": true,
            "description": "List of any accumulated error messages that occurred during provisioning.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Connector AD Failed"
            }
          },
          "warnings": {
            "nullable": true,
            "description": "List of any accumulated warning messages that occurred during provisioning.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Notification Skipped due to invalid email"
            }
          },
          "recipient": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Provisioning recpient.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Provisioning recipient DTO type.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Provisioning recipient's identity ID.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Provisioning recipient's name.",
                "example": "Michael Michaels"
              }
            }
          },
          "requester": {
            "nullable": true,
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Provisioning requester's identity.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Provisioning requester's DTO type.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Provisioning requester's identity ID.",
                "example": "2c7180a46faadee4016fb4e018c20648"
              },
              "name": {
                "type": "string",
                "description": "Provisioning requester's name.",
                "example": "William Wilson"
              }
            }
          },
          "accountRequests": {
            "type": "array",
            "description": "List of provisioning instructions to perform on an account-by-account basis.",
            "items": {
              "type": "object",
              "required": [
                "source",
                "accountOperation",
                "provisioningResult",
                "provisioningTarget"
              ],
              "properties": {
                "source": {
                  "required": [
                    "id",
                    "type",
                    "name"
                  ],
                  "type": "object",
                  "description": "Source that ISC is provisioning access on.",
                  "properties": {
                    "id": {
                      "description": "Source ID.",
                      "type": "string",
                      "example": "4e4d982dddff4267ab12f0f1e72b5a6d"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "SOURCE"
                      ],
                      "example": "SOURCE",
                      "description": "Source DTO type."
                    },
                    "name": {
                      "type": "string",
                      "description": "Source name.",
                      "example": "Corporate Active Directory"
                    }
                  }
                },
                "accountId": {
                  "type": "string",
                  "description": "Unique idenfier of the account being provisioned.",
                  "example": "CN=Rob.Robertson,ou=csm,ou=sales,dc=helpco,dc=com"
                },
                "accountOperation": {
                  "type": "string",
                  "description": "Provisioning operation.",
                  "enum": [
                    "Create",
                    "Modify",
                    "Enable",
                    "Disable",
                    "Unlock",
                    "Delete"
                  ],
                  "example": "Modify"
                },
                "provisioningResult": {
                  "description": "Overall result of the provisioning transaction.",
                  "enum": [
                    "SUCCESS",
                    "PENDING",
                    "FAILED"
                  ],
                  "example": "SUCCESS"
                },
                "provisioningTarget": {
                  "type": "string",
                  "description": "Nme of the selected provisioning channel selected. This could be the same as the source, or it could be a Service Desk Integration Module (SDIM).",
                  "example": "Corp AD"
                },
                "ticketId": {
                  "nullable": true,
                  "type": "string",
                  "description": "Reference to a tracking number for if this is sent to a SDIM.",
                  "example": "72619262"
                },
                "attributeRequests": {
                  "nullable": true,
                  "description": "List of attributes to include in the provisioning transaction.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "attributeName",
                      "operation"
                    ],
                    "properties": {
                      "attributeName": {
                        "type": "string",
                        "description": "Name of the attribute being provisioned.",
                        "example": "memberOf"
                      },
                      "attributeValue": {
                        "nullable": true,
                        "type": "string",
                        "description": "Value of the attribute being provisioned.",
                        "example": "CN=sales,DC=helpco,DC=com"
                      },
                      "operation": {
                        "type": "string",
                        "enum": [
                          "Add",
                          "Set",
                          "Remove"
                        ],
                        "description": "The operation to handle the attribute.",
                        "example": "Add"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SavedSearchComplete": {
        "title": "Saved Search Complete",
        "type": "object",
        "required": [
          "fileName",
          "ownerEmail",
          "ownerName",
          "query",
          "searchName",
          "searchResults",
          "signedS3Url"
        ],
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Report file name.",
            "example": "Modified.zip"
          },
          "ownerEmail": {
            "type": "string",
            "description": "Email address of the identity who owns the saved search.",
            "example": "test@sailpoint.com"
          },
          "ownerName": {
            "type": "string",
            "description": "Name of the identity who owns the saved search.",
            "example": "Cloud Support"
          },
          "query": {
            "type": "string",
            "description": "Search query used to generate the report.",
            "example": "modified:[now-7y/d TO now]"
          },
          "searchName": {
            "type": "string",
            "description": "Saved search name.",
            "example": "Modified Activity"
          },
          "searchResults": {
            "type": "object",
            "description": "Preview of the search results for each object type. This includes a count as well as headers and the first several rows of data, per object type.",
            "properties": {
              "Account": {
                "description": "Table of accounts matching the search criteria.",
                "nullable": true,
                "type": "object",
                "required": [
                  "count",
                  "noun",
                  "preview"
                ],
                "properties": {
                  "count": {
                    "type": "string",
                    "description": "Number of rows in the table.",
                    "example": 3
                  },
                  "noun": {
                    "type": "string",
                    "description": "Type of object represented in the table.",
                    "example": "accounts"
                  },
                  "preview": {
                    "description": "Sample of table data.",
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Robert.Chase"
                      },
                      "example": []
                    }
                  }
                }
              },
              "Entitlement": {
                "description": "Table of entitlements matching the search criteria.",
                "nullable": true,
                "type": "object",
                "required": [
                  "count",
                  "noun",
                  "preview"
                ],
                "properties": {
                  "count": {
                    "type": "string",
                    "description": "Number of rows in the table.",
                    "example": 2
                  },
                  "noun": {
                    "type": "string",
                    "description": "Type of object represented in the table.",
                    "example": "entitlements"
                  },
                  "preview": {
                    "description": "Sample of table data.",
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Administrator"
                      },
                      "example": []
                    }
                  }
                }
              },
              "Identity": {
                "description": "Table of identities matching the search criteria.",
                "nullable": true,
                "type": "object",
                "required": [
                  "count",
                  "noun",
                  "preview"
                ],
                "properties": {
                  "count": {
                    "type": "string",
                    "description": "Number of rows in the table.",
                    "example": 2
                  },
                  "noun": {
                    "type": "string",
                    "description": "Type of object represented in the table.",
                    "example": "identities"
                  },
                  "preview": {
                    "description": "Sample of the table data.",
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Carol Shelby"
                      },
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "signedS3Url": {
            "type": "string",
            "description": "The Amazon S3 URL to download the report from.",
            "example": "https://sptcbu-org-data-useast1.s3.amazonaws.com/arsenal-john/reports/Events%20Export.2020-05-06%2018%2759%20GMT.3e580592-86e4-4953-8aea-49e6ef20a086.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200506T185919Z&X-Amz-SignedHeaders=host&X-Amz-Expires=899&X-Amz-Credential=AKIAV5E54XOGTS4Q4L7A%2F20200506%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=2e732bb97a12a1fd8a215613e3c31fcdae8ba1fb6a25916843ab5b51d2ddefbc"
          }
        }
      },
      "SourceAccountCreated": {
        "title": "Source Account Created",
        "type": "object",
        "required": [
          "uuid",
          "id",
          "nativeIdentifier",
          "sourceId",
          "sourceName",
          "identityId",
          "identityName",
          "attributes"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identity's universal unique identifier (UUID) on the source. The source system generates the UUID.",
            "example": "b7264868-7201-415f-9118-b581d431c688"
          },
          "id": {
            "type": "string",
            "description": "SailPoint generated unique identifier.",
            "example": "ee769173319b41d19ccec35ba52f237b"
          },
          "nativeIdentifier": {
            "type": "string",
            "description": "Account's unique ID on the source.",
            "example": "E009"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID.",
            "example": "2c918082814e693601816e09471b29b6"
          },
          "sourceName": {
            "type": "string",
            "description": "Source name.",
            "example": "Active Directory"
          },
          "identityId": {
            "type": "string",
            "description": "ID of the identity correlated with the account.",
            "example": "ee769173319b41d19ccec6c235423237b"
          },
          "identityName": {
            "type": "string",
            "description": "Name of the identity correlated with the account.",
            "example": "john.doe"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Account attributes. The attributes' contents depend on the source's account schema.",
            "example": {
              "firstname": "John",
              "lastname": "Doe",
              "email": "john.doe@gmail.com",
              "department": "Sales",
              "displayName": "John Doe",
              "created": "2020-04-27T16:48:33.597Z",
              "employeeNumber": "E009",
              "uid": "E009",
              "inactive": "true",
              "phone": null,
              "identificationNumber": "E009"
            }
          }
        }
      },
      "SourceAccountDeleted": {
        "title": "Source Account Deleted",
        "type": "object",
        "required": [
          "uuid",
          "id",
          "nativeIdentifier",
          "sourceId",
          "sourceName",
          "identityId",
          "identityName",
          "attributes"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identity's universal unique identifier (UUID) on the source. The source system generates the UUID.",
            "example": "b7264868-7201-415f-9118-b581d431c688"
          },
          "id": {
            "type": "string",
            "description": "SailPoint generated unique identifier.",
            "example": "ee769173319b41d19ccec35ba52f237b"
          },
          "nativeIdentifier": {
            "type": "string",
            "description": "Account's unique ID on the source.",
            "example": "E009"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID.",
            "example": "2c918082814e693601816e09471b29b6"
          },
          "sourceName": {
            "type": "string",
            "description": "Source name.",
            "example": "Active Directory"
          },
          "identityId": {
            "type": "string",
            "description": "ID of the identity correlated with the account.",
            "example": "ee769173319b41d19ccec6c235423237b"
          },
          "identityName": {
            "type": "string",
            "description": "Name of the identity correlated with the account.",
            "example": "john.doe"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Account attributes. The attributes' contents depend on the source's account schema.",
            "example": {
              "firstname": "John",
              "lastname": "Doe",
              "email": "john.doe@gmail.com",
              "department": "Sales",
              "displayName": "John Doe",
              "created": "2020-04-27T16:48:33.597Z",
              "employeeNumber": "E009",
              "uid": "E009",
              "inactive": "true",
              "phone": null,
              "identificationNumber": "E009"
            }
          }
        }
      },
      "SourceAccountUpdated": {
        "title": "Source Account Updated",
        "type": "object",
        "required": [
          "uuid",
          "id",
          "nativeIdentifier",
          "sourceId",
          "sourceName",
          "identityId",
          "identityName",
          "attributes"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identity's universal unique identifier (UUID) on the source. The source system generates the UUID.",
            "example": "b7264868-7201-415f-9118-b581d431c688"
          },
          "id": {
            "type": "string",
            "description": "SailPoint generated unique identifier.",
            "example": "ee769173319b41d19ccec35ba52f237b"
          },
          "nativeIdentifier": {
            "type": "string",
            "description": "Account's unique ID on the source.",
            "example": "E009"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID.",
            "example": "2c918082814e693601816e09471b29b6"
          },
          "sourceName": {
            "type": "string",
            "description": "Source name.",
            "example": "Active Directory"
          },
          "identityId": {
            "type": "string",
            "description": "ID of the identity correlated with the account.",
            "example": "ee769173319b41d19ccec6c235423237b"
          },
          "identityName": {
            "type": "string",
            "description": "Name of the identity correlated with the account.",
            "example": "john.doe"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true,
            "description": "Account attributes. The attributes' contents depend on the source's account schema.",
            "example": {
              "firstname": "John",
              "lastname": "Doe",
              "email": "john.doe@gmail.com",
              "department": "Sales",
              "displayName": "John Doe",
              "created": "2020-04-27T16:48:33.597Z",
              "employeeNumber": "E009",
              "uid": "E009",
              "inactive": "true",
              "phone": null,
              "identificationNumber": "E009"
            }
          }
        }
      },
      "SourceCreated": {
        "title": "Source Created",
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "created",
          "connector",
          "actor"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Source's unique ID.",
            "example": "2c9180866166b5b0016167c32ef31a66"
          },
          "name": {
            "type": "string",
            "description": "Source name.",
            "example": "Test source"
          },
          "type": {
            "type": "string",
            "description": "Connection type.",
            "example": "DIRECT_CONNECT"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the source was created.",
            "example": "2021-03-29T22:01:50.474Z"
          },
          "connector": {
            "type": "string",
            "description": "Connector type used to connect to the source.",
            "example": "active-directory"
          },
          "actor": {
            "required": [
              "id",
              "name",
              "type"
            ],
            "type": "object",
            "description": "Identity who created the source.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity who created the source.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity who created the source.",
                "example": "2c7180a46faadee4016fb4e018c20648"
              },
              "name": {
                "type": "string",
                "description": "Name of the identity who created the source.",
                "example": "William Wilson"
              }
            }
          }
        }
      },
      "SourceDeleted": {
        "title": "Source Deleted",
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "deleted",
          "connector",
          "actor"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Source's unique ID.",
            "example": "2c9180866166b5b0016167c32ef31a66"
          },
          "name": {
            "type": "string",
            "description": "Source name.",
            "example": "Test source"
          },
          "type": {
            "type": "string",
            "description": "Connection type.",
            "example": "DIRECT_CONNECT"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the source was deleted.",
            "example": "2021-03-29T22:01:50.474Z"
          },
          "connector": {
            "type": "string",
            "description": "Connector type used to connect to the source.",
            "example": "active-directory"
          },
          "actor": {
            "required": [
              "id",
              "name",
              "type"
            ],
            "type": "object",
            "description": "Identity who deleted the source.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity who deleted the source.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity who deleted the source.",
                "example": "2c7180a46faadee4016fb4e018c20648"
              },
              "name": {
                "type": "string",
                "description": "Name of the identity who deleted the source.",
                "example": "William Wilson"
              }
            }
          }
        }
      },
      "SourceUpdated": {
        "title": "Source Updated",
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "modified",
          "connector",
          "actor"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Source's unique ID.",
            "example": "2c9180866166b5b0016167c32ef31a66"
          },
          "name": {
            "type": "string",
            "description": "Source name.",
            "example": "Test source"
          },
          "type": {
            "type": "string",
            "description": "Connection type.",
            "example": "DIRECT_CONNECT"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the source was modified.",
            "example": "2021-03-29T22:01:50.474Z"
          },
          "connector": {
            "type": "string",
            "description": "Connector type used to connect to the source.",
            "example": "active-directory"
          },
          "actor": {
            "required": [
              "id",
              "name",
              "type"
            ],
            "type": "object",
            "description": "Identity who updated the source.",
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity who updated the source.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "ID of the identity who updated the source.",
                "example": "2c7180a46faadee4016fb4e018c20648"
              },
              "name": {
                "type": "string",
                "description": "Name of the identity who updated the source.",
                "example": "William Wilson"
              }
            }
          }
        }
      },
      "VAClusterStatusChangeEvent": {
        "title": "VA Cluster Status Change Event",
        "type": "object",
        "required": [
          "created",
          "type",
          "application",
          "healthCheckResult",
          "previousHealthCheckResult"
        ],
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the status change occurred.",
            "example": "2020-06-29T22:01:50.474Z"
          },
          "type": {
            "enum": [
              "SOURCE",
              "CLUSTER"
            ],
            "description": "Type of the object that initiated the event.",
            "example": "CLUSTER"
          },
          "application": {
            "type": "object",
            "description": "Details about the `CLUSTER` or `SOURCE` that initiated the event.",
            "required": [
              "id",
              "name",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Application's globally unique identifier (GUID).",
                "example": "2c9180866166b5b0016167c32ef31a66"
              },
              "name": {
                "type": "string",
                "description": "Application name.",
                "example": "Production VA Cluster"
              },
              "attributes": {
                "type": "object",
                "description": "Custom map of attributes for a source. Attributes only populate if the type is `SOURCE` and the source has a proxy.",
                "additionalProperties": true,
                "nullable": true,
                "example": null
              }
            }
          },
          "healthCheckResult": {
            "type": "object",
            "description": "Results of the most recent health check.",
            "required": [
              "message",
              "resultType",
              "status"
            ],
            "properties": {
              "message": {
                "type": "string",
                "description": "Detailed message of the health check result..",
                "example": "Test Connection failed with exception. Error message - java.lang Exception"
              },
              "resultType": {
                "type": "string",
                "description": "Health check result type.",
                "example": "SOURCE_STATE_ERROR_CLUSTER"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Succeeded",
                  "Failed"
                ],
                "description": "Health check status.",
                "example": "Succeeded"
              }
            }
          },
          "previousHealthCheckResult": {
            "type": "object",
            "description": "Results of the last health check.",
            "required": [
              "message",
              "resultType",
              "status"
            ],
            "properties": {
              "message": {
                "type": "string",
                "description": "Detailed message of the health check result.",
                "example": "Test Connection failed with exception. Error message - java.lang Exception"
              },
              "resultType": {
                "type": "string",
                "description": "Health check result type.",
                "example": "SOURCE_STATE_ERROR_CLUSTER"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Succeeded",
                  "Failed"
                ],
                "description": "Health check status.",
                "example": "Failed"
              }
            }
          }
        }
      },
      "AccessRequestDynamicApprover-2": {
        "title": "Access Request Dynamic Approver",
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the identity to add to the approver list for the access request.",
            "example": "2c91808b6ef1d43e016efba0ce470906"
          },
          "name": {
            "type": "string",
            "description": "The name of the identity to add to the approver list for the access request.",
            "example": "Adam Adams"
          },
          "type": {
            "enum": [
              "IDENTITY",
              "GOVERNANCE_GROUP"
            ],
            "description": "The type of object being referenced.",
            "example": "IDENTITY"
          }
        }
      },
      "AccessRequestPreApproval-2": {
        "title": "Access Request Pre Approval",
        "type": "object",
        "required": [
          "approved",
          "comment",
          "approver"
        ],
        "properties": {
          "approved": {
            "type": "boolean",
            "description": "Whether or not to approve the access request.",
            "example": false
          },
          "comment": {
            "type": "string",
            "description": "A comment about the decision to approve or deny the request.",
            "example": "This access should be denied, because this will cause an SOD violation."
          },
          "approver": {
            "type": "string",
            "description": "The name of the entity that approved or denied the request.",
            "example": "AcmeCorpExternalIntegration"
          }
        }
      },
      "Trigger": {
        "type": "object",
        "title": "Trigger",
        "required": [
          "id",
          "name",
          "type",
          "inputSchema",
          "exampleInput"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the trigger.",
            "example": "idn:access-request-dynamic-approver"
          },
          "name": {
            "type": "string",
            "description": "Trigger Name.",
            "example": "Access Request Dynamic Approver"
          },
          "type": {
            "$ref": "#/components/schemas/TriggerType",
            "example": "REQUEST_RESPONSE"
          },
          "description": {
            "type": "string",
            "description": "Trigger Description.",
            "example": "Trigger for getting a dynamic approver."
          },
          "inputSchema": {
            "type": "string",
            "description": "The JSON schema of the payload that will be sent by the trigger to the subscribed service.",
            "example": "{\"definitions\":{\"record:AccessRequestDynamicApproverInput\":{\"type\":\"object\",\"required\":[\"accessRequestId\",\"requestedFor\",\"requestedItems\",\"requestedBy\"],\"additionalProperties\":true,\"properties\":{\"accessRequestId\":{\"type\":\"string\"},\"requestedFor\":{\"$ref\":\"#/definitions/record:requestedForIdentityRef\"},\"requestedItems\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/record:requestedObjectRef\"}},\"requestedBy\":{\"$ref\":\"#/definitions/record:requestedByIdentityRef\"}}},\"record:requestedForIdentityRef\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"type\"],\"additionalProperties\":true,\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}},\"record:requestedObjectRef\":{\"type\":\"object\",\"optional\":[\"description\",\"comment\"],\"required\":[\"id\",\"name\",\"type\",\"operation\"],\"additionalProperties\":true,\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"description\":{\"oneOf\":[{\"type\":\"null\"},{\"type\":\"string\"}]},\"type\":{\"type\":\"string\"},\"operation\":{\"type\":\"string\"},\"comment\":{\"oneOf\":[{\"type\":\"null\"},{\"type\":\"string\"}]}}},\"record:requestedByIdentityRef\":{\"type\":\"object\",\"required\":[\"type\",\"id\",\"name\"],\"additionalProperties\":true,\"properties\":{\"type\":{\"type\":\"string\"},\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}}}},\"$ref\":\"#/definitions/record:AccessRequestDynamicApproverInput\"}"
          },
          "exampleInput": {
            "description": "An example of the JSON payload that will be sent by the trigger to the subscribed service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccessRequestDynamicApprover"
              },
              {
                "$ref": "#/components/schemas/AccessRequestPostApproval"
              },
              {
                "$ref": "#/components/schemas/AccessRequestPreApproval"
              },
              {
                "$ref": "#/components/schemas/AccountAggregationCompleted"
              },
              {
                "$ref": "#/components/schemas/AccountAttributesChanged"
              },
              {
                "$ref": "#/components/schemas/AccountCorrelated"
              },
              {
                "$ref": "#/components/schemas/AccountsCollectedForAggregation"
              },
              {
                "$ref": "#/components/schemas/AccountUncorrelated"
              },
              {
                "$ref": "#/components/schemas/CampaignActivated"
              },
              {
                "$ref": "#/components/schemas/CampaignEnded"
              },
              {
                "$ref": "#/components/schemas/CampaignGenerated"
              },
              {
                "$ref": "#/components/schemas/CertificationSignedOff"
              },
              {
                "$ref": "#/components/schemas/IdentityAttributesChanged"
              },
              {
                "$ref": "#/components/schemas/IdentityCreated"
              },
              {
                "$ref": "#/components/schemas/IdentityDeleted"
              },
              {
                "$ref": "#/components/schemas/ProvisioningCompleted"
              },
              {
                "$ref": "#/components/schemas/SavedSearchComplete"
              },
              {
                "$ref": "#/components/schemas/SourceAccountCreated"
              },
              {
                "$ref": "#/components/schemas/SourceAccountDeleted"
              },
              {
                "$ref": "#/components/schemas/SourceAccountUpdated"
              },
              {
                "$ref": "#/components/schemas/SourceCreated"
              },
              {
                "$ref": "#/components/schemas/SourceDeleted"
              },
              {
                "$ref": "#/components/schemas/SourceUpdated"
              },
              {
                "$ref": "#/components/schemas/VAClusterStatusChangeEvent"
              }
            ]
          },
          "outputSchema": {
            "type": "string",
            "description": "The JSON schema of the response that will be sent by the subscribed service to the trigger in response to an event.  This only applies to a trigger type of `REQUEST_RESPONSE`.",
            "nullable": true,
            "example": "{\"definitions\":{\"record:AccessRequestDynamicApproverOutput\":{\"type\":[\"null\",\"object\"],\"required\":[\"id\",\"name\",\"type\"],\"additionalProperties\":true,\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}}},\"$ref\":\"#/definitions/record:AccessRequestDynamicApproverOutput\"}"
          },
          "exampleOutput": {
            "description": "An example of the JSON payload that will be sent by the subscribed service to the trigger in response to an event.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccessRequestDynamicApprover-2"
              },
              {
                "$ref": "#/components/schemas/AccessRequestPreApproval-2"
              }
            ]
          }
        }
      },
      "SubscriptionType": {
        "type": "string",
        "enum": [
          "HTTP",
          "EVENTBRIDGE",
          "INLINE",
          "SCRIPT",
          "WORKFLOW"
        ],
        "description": "Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required.",
        "example": "HTTP"
      },
      "HttpDispatchMode": {
        "type": "string",
        "description": "HTTP response modes, i.e. SYNC, ASYNC, or DYNAMIC.",
        "enum": [
          "SYNC",
          "ASYNC",
          "DYNAMIC"
        ],
        "example": "SYNC"
      },
      "HttpAuthenticationType": {
        "type": "string",
        "description": "Defines the HTTP Authentication type. Additional values may be added in the future.\n\nIf *NO_AUTH* is selected, no extra information will be in HttpConfig.\n\nIf *BASIC_AUTH* is selected, HttpConfig will include BasicAuthConfig with Username and Password as strings.\n\nIf *BEARER_TOKEN* is selected, HttpConfig will include BearerTokenAuthConfig with Token as string.",
        "enum": [
          "NO_AUTH",
          "BASIC_AUTH",
          "BEARER_TOKEN"
        ],
        "default": "NO_AUTH",
        "example": "BASIC_AUTH"
      },
      "BasicAuthConfig": {
        "type": "object",
        "title": "Basic Auth Config",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The username to authenticate.",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "The password to authenticate. On response, this field is set to null as to not return secrets.",
            "example": null
          }
        },
        "nullable": true,
        "description": "Config required if BASIC_AUTH is used."
      },
      "BearerTokenAuthConfig": {
        "type": "object",
        "title": "Bearer Token Auth Config",
        "properties": {
          "bearerToken": {
            "type": "string",
            "nullable": true,
            "description": "Bearer token",
            "example": null
          }
        },
        "nullable": true,
        "description": "Config required if BEARER_TOKEN authentication is used. On response, this field is set to null as to not return secrets."
      },
      "HttpConfig": {
        "type": "object",
        "title": "Http Config",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the external/custom integration.",
            "example": "https://www.example.com"
          },
          "httpDispatchMode": {
            "$ref": "#/components/schemas/HttpDispatchMode"
          },
          "httpAuthenticationType": {
            "$ref": "#/components/schemas/HttpAuthenticationType"
          },
          "basicAuthConfig": {
            "$ref": "#/components/schemas/BasicAuthConfig"
          },
          "bearerTokenAuthConfig": {
            "$ref": "#/components/schemas/BearerTokenAuthConfig"
          }
        },
        "required": [
          "url",
          "httpDispatchMode"
        ]
      },
      "EventBridgeConfig": {
        "type": "object",
        "title": "Event Bridge Config",
        "properties": {
          "awsAccount": {
            "type": "string",
            "description": "AWS Account Number (12-digit number) that has the EventBridge Partner Event Source Resource.",
            "example": "123456789012"
          },
          "awsRegion": {
            "type": "string",
            "description": "AWS Region that has the EventBridge Partner Event Source Resource. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a full list of available values.",
            "example": "us-west-1"
          }
        },
        "required": [
          "awsAccount",
          "awsRegion"
        ]
      },
      "Subscription": {
        "type": "object",
        "title": "Subscription",
        "required": [
          "id",
          "triggerId",
          "type",
          "name",
          "triggerName",
          "enabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Subscription ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "name": {
            "type": "string",
            "description": "Subscription name.",
            "example": "Access request subscription"
          },
          "description": {
            "type": "string",
            "description": "Subscription description.",
            "example": "Access requested to site xyz"
          },
          "triggerId": {
            "type": "string",
            "description": "ID of trigger subscribed to.",
            "example": "idn:access-request-post-approval"
          },
          "triggerName": {
            "type": "string",
            "description": "Trigger name of trigger subscribed to.",
            "example": "Access Requested"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "responseDeadline": {
            "type": "string",
            "description": "Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.",
            "example": "PT1H",
            "default": "PT1H"
          },
          "httpConfig": {
            "description": "Config required if HTTP subscription type is used.",
            "$ref": "#/components/schemas/HttpConfig"
          },
          "eventBridgeConfig": {
            "description": "Config required if EVENTBRIDGE subscription type is used.",
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether subscription should receive real-time trigger invocations or not.\nTest trigger invocations are always enabled regardless of this option.",
            "default": true,
            "example": true
          },
          "filter": {
            "type": "string",
            "description": "JSONPath filter to conditionally invoke trigger when expression evaluates to true.",
            "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
            "externalDocs": {
              "description": "JSONPath filter documentation",
              "url": "https://developer.sailpoint.com/idn/docs/event-triggers/filtering-events"
            }
          }
        }
      },
      "SubscriptionPostRequest": {
        "type": "object",
        "title": "Subscription Post Request",
        "required": [
          "triggerId",
          "type",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Subscription name.",
            "example": "Access request subscription"
          },
          "description": {
            "type": "string",
            "description": "Subscription description.",
            "example": "Access requested to site xyz"
          },
          "triggerId": {
            "type": "string",
            "description": "ID of trigger subscribed to.",
            "example": "idn:access-requested"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "responseDeadline": {
            "type": "string",
            "description": "Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.",
            "example": "PT1H",
            "default": "PT1H"
          },
          "httpConfig": {
            "description": "Config required if HTTP subscription type is used.",
            "$ref": "#/components/schemas/HttpConfig"
          },
          "eventBridgeConfig": {
            "description": "Config required if EVENTBRIDGE subscription type is used.",
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether subscription should receive real-time trigger invocations or not.\n\nTest trigger invocations are always enabled regardless of this option.",
            "default": true,
            "example": true
          },
          "filter": {
            "type": "string",
            "description": "JSONPath filter to conditionally invoke trigger when expression evaluates to true.",
            "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
            "externalDocs": {
              "description": "JSONPath filter documentation",
              "url": "https://developer.sailpoint.com/idn/docs/event-triggers/filtering-events"
            }
          }
        }
      },
      "SubscriptionPutRequest": {
        "type": "object",
        "title": "Subscription Put Request",
        "properties": {
          "name": {
            "type": "string",
            "description": "Subscription name.",
            "example": "Access request subscription"
          },
          "description": {
            "type": "string",
            "description": "Subscription description.",
            "example": "Access requested to site xyz"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionType"
          },
          "responseDeadline": {
            "type": "string",
            "description": "Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.",
            "example": "PT1H",
            "default": "PT1H"
          },
          "httpConfig": {
            "description": "Config required if HTTP subscription type is used.",
            "$ref": "#/components/schemas/HttpConfig"
          },
          "eventBridgeConfig": {
            "description": "Config required if EVENTBRIDGE subscription type is used.",
            "$ref": "#/components/schemas/EventBridgeConfig"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether subscription should receive real-time trigger invocations or not.\n\nTest trigger invocations are always enabled regardless of this option.",
            "default": true,
            "example": true
          },
          "filter": {
            "type": "string",
            "description": "JSONPath filter to conditionally invoke trigger when expression evaluates to true.",
            "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
            "externalDocs": {
              "description": "JSONPath filter documentation",
              "url": "https://developer.sailpoint.com/idn/docs/event-triggers/filtering-events"
            }
          }
        }
      },
      "SubscriptionPatchRequest": {
        "description": "Operations to be applied",
        "type": "array",
        "items": {
          "type": "object",
          "description": "A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
          "required": [
            "op",
            "path"
          ],
          "properties": {
            "op": {
              "type": "string",
              "description": "The operation to be performed",
              "enum": [
                "add",
                "remove",
                "replace",
                "move",
                "copy"
              ],
              "example": "replace"
            },
            "path": {
              "type": "string",
              "description": "A string JSON Pointer representing the target path to an element to be affected by the operation",
              "example": "/description"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  }
                }
              ],
              "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
              "example": "New description"
            }
          }
        },
        "example": [
          {
            "op": "replace",
            "path": "/description",
            "value": "A new description"
          },
          {
            "op": "replace",
            "path": "/name",
            "value": "A new name"
          }
        ]
      },
      "ValidateFilterInputDto": {
        "type": "object",
        "title": "Validate Filter Input Dto",
        "properties": {
          "input": {
            "type": "object",
            "description": "Mock input to evaluate filter expression against.",
            "example": {
              "identityId": "201327fda1c44704ac01181e963d463c"
            }
          },
          "filter": {
            "type": "string",
            "description": "JSONPath filter to conditionally invoke trigger when expression evaluates to true.",
            "example": "$[?($.identityId == \"201327fda1c44704ac01181e963d463c\")]",
            "externalDocs": {
              "description": "JSONPath filter documentation",
              "url": "https://developer.sailpoint.com/idn/docs/event-triggers/filtering-events"
            }
          }
        },
        "required": [
          "input",
          "filter"
        ]
      },
      "ValidateFilterOutputDto": {
        "type": "object",
        "title": "Validate Filter Output Dto",
        "properties": {
          "isValid": {
            "type": "boolean",
            "default": false,
            "description": "When this field is true, the filter expression is valid against the input.",
            "example": true
          },
          "isValidJSONPath": {
            "type": "boolean",
            "default": false,
            "description": "When this field is true, the filter expression is using a valid JSON path.",
            "example": true
          },
          "isPathExist": {
            "type": "boolean",
            "default": false,
            "description": "When this field is true, the filter expression is using an existing path.",
            "example": true
          }
        }
      },
      "InvocationStatusType": {
        "type": "string",
        "description": "Defines the Invocation type.\n\n**TEST** The trigger was invocated as a test, either via the test subscription button in the UI or via the start test invocation API.\n\n**REAL_TIME** The trigger subscription is live and was invocated by a real event in IdentityNow.",
        "enum": [
          "TEST",
          "REAL_TIME"
        ],
        "example": "TEST"
      },
      "StartInvocationInput": {
        "type": "object",
        "title": "Start Invocation Input",
        "properties": {
          "triggerId": {
            "type": "string",
            "description": "Trigger ID",
            "example": "idn:access-requested"
          },
          "input": {
            "type": "object",
            "example": {
              "identityId": "201327fda1c44704ac01181e963d463c"
            },
            "description": "Trigger input payload. Its schema is defined in the trigger definition."
          },
          "contentJson": {
            "type": "object",
            "example": {
              "workflowId": 1234
            },
            "description": "JSON map of invocation metadata"
          }
        }
      },
      "CompleteInvocationInput": {
        "type": "object",
        "title": "Complete Invocation Input",
        "properties": {
          "localizedError": {
            "$ref": "#/components/schemas/LocalizedMessage"
          },
          "output": {
            "type": "object",
            "nullable": true,
            "example": {
              "approved": false
            },
            "description": "Trigger output that completed the invocation. Its schema is defined in the trigger definition."
          }
        }
      },
      "InvocationStatus": {
        "type": "object",
        "title": "Invocation Status",
        "required": [
          "id",
          "triggerId",
          "subscriptionId",
          "startInvocationInput",
          "type",
          "subscriptionName",
          "created"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Invocation ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "triggerId": {
            "type": "string",
            "description": "Trigger ID",
            "example": "idn:access-request-post-approval"
          },
          "subscriptionName": {
            "type": "string",
            "description": "Subscription name",
            "example": "Access request subscription"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "type": {
            "$ref": "#/components/schemas/InvocationStatusType"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Invocation created timestamp. ISO-8601 in UTC.",
            "example": "2020-03-27T20:40:10.738Z"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "description": "Invocation completed timestamp; empty fields imply invocation is in-flight or not completed. ISO-8601 in UTC.",
            "example": "2020-03-27T20:42:14.738Z"
          },
          "startInvocationInput": {
            "$ref": "#/components/schemas/StartInvocationInput",
            "description": "Data related to start of trigger invocation."
          },
          "completeInvocationInput": {
            "$ref": "#/components/schemas/CompleteInvocationInput",
            "description": "Data related to end of trigger invocation."
          }
        }
      },
      "CompleteInvocation": {
        "type": "object",
        "title": "Complete Invocation",
        "properties": {
          "secret": {
            "type": "string",
            "description": "Unique invocation secret that was generated when the invocation was created. Required to authenticate to the endpoint.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "error": {
            "type": "string",
            "description": "The error message to indicate a failed invocation or error if any.",
            "example": "Access request is denied."
          },
          "output": {
            "type": "object",
            "example": {
              "approved": false
            },
            "description": "Trigger output to complete the invocation. Its schema is defined in the trigger definition."
          }
        },
        "required": [
          "secret",
          "output"
        ]
      },
      "TestInvocation": {
        "type": "object",
        "title": "Test Invocation",
        "properties": {
          "triggerId": {
            "type": "string",
            "example": "idn:access-request-post-approval",
            "description": "Trigger ID"
          },
          "input": {
            "type": "object",
            "example": {
              "identityId": "201327fda1c44704ac01181e963d463c"
            },
            "description": "Mock input to use for test invocation.  This must adhere to the input schema defined in the trigger being invoked.  If this property is omitted, then the default trigger sample payload will be sent."
          },
          "contentJson": {
            "type": "object",
            "example": {
              "workflowId": 1234
            },
            "description": "JSON map of invocation metadata."
          },
          "subscriptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
            ],
            "description": "Only send the test event to the subscription IDs listed.  If omitted, the test event will be sent to all subscribers."
          }
        },
        "required": [
          "triggerId",
          "contentJson"
        ]
      },
      "Invocation": {
        "type": "object",
        "title": "Invocation",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invocation ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "triggerId": {
            "type": "string",
            "description": "Trigger ID",
            "example": "idn:access-requested"
          },
          "secret": {
            "type": "string",
            "description": "Unique invocation secret.",
            "example": "0f979022-08be-44f2-b6f9-7393ec73ed9b"
          },
          "contentJson": {
            "type": "object",
            "example": {
              "workflowId": 1234
            },
            "description": "JSON map of invocation metadata."
          }
        }
      },
      "TenantUiMetadataItemResponse": {
        "type": "object",
        "properties": {
          "iframeWhiteList": {
            "type": "string",
            "nullable": true,
            "description": "Parameter that organizational administrators can adjust to permit another domain to encapsulate IDN within an iframe. If you would like to reset the value use \"null\". It will only allow include into iframe non authenticated portions of the product, such as password reset.",
            "example": "http://example.com http://example2.com"
          },
          "usernameLabel": {
            "type": "string",
            "nullable": true,
            "description": "Descriptor for the username input field. If you would like to reset the value use \"null\".",
            "example": "Email"
          },
          "usernameEmptyText": {
            "type": "string",
            "nullable": true,
            "description": "Placeholder text displayed in the username input field. If you would like to reset the value use \"null\".",
            "example": "Please provide your work email address..."
          }
        }
      },
      "TenantUiMetadataItemUpdateRequest": {
        "type": "object",
        "properties": {
          "iframeWhiteList": {
            "type": "string",
            "nullable": true,
            "description": "Parameter that organizational administrators can adjust to permit another domain to encapsulate IDN within an iframe. If you would like to reset the value use \"null\". It will only allow include into iframe non authenticated portions of the product, such as password reset.",
            "example": "http://example.com http://example2.com"
          },
          "usernameLabel": {
            "type": "string",
            "nullable": true,
            "description": "Descriptor for the username input field. If you would like to reset the value use \"null\".",
            "example": "Email"
          },
          "usernameEmptyText": {
            "type": "string",
            "nullable": true,
            "description": "Placeholder text displayed in the username input field. If you would like to reset the value use \"null\".",
            "example": "Please provide your work email address..."
          }
        }
      },
      "UserApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user app id",
            "example": "2c91808874ff91550175097daaec161c"
          },
          "created": {
            "type": "string",
            "description": "Time when the user app was created",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "modified": {
            "type": "string",
            "description": "Time when the user app was last modified",
            "format": "date-time",
            "example": "2020-10-08T18:33:52.029Z"
          },
          "hasMultipleAccounts": {
            "type": "boolean",
            "default": false,
            "description": "True if the owner has multiple accounts for the source",
            "example": false
          },
          "useForPasswordManagement": {
            "type": "boolean",
            "default": false,
            "description": "True if the source has password feature",
            "example": true
          },
          "provisionRequestEnabled": {
            "type": "boolean",
            "default": false,
            "description": "True if the source app related to the user app is provision request enabled",
            "example": true
          },
          "appCenterEnabled": {
            "type": "boolean",
            "default": true,
            "description": "True if the source app related to the user app is shown in the app center",
            "example": true
          },
          "sourceApp": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "the source app ID",
                "example": "edcb0951812949d085b60cd8bf35bc78"
              },
              "type": {
                "type": "string",
                "description": "It will always be \"APPLICATION\"",
                "example": "APPLICATION"
              },
              "name": {
                "type": "string",
                "description": "the source app name",
                "example": "test-app"
              }
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "the source ID",
                "example": "9870808a7190d06e01719938fcd20792"
              },
              "type": {
                "type": "string",
                "description": "It will always be \"SOURCE\"",
                "example": "SOURCE"
              },
              "name": {
                "type": "string",
                "description": "the source name",
                "example": "test-source"
              }
            }
          },
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "the account ID",
                "example": "85d173e7d57e496569df763231d6deb6a"
              },
              "type": {
                "type": "string",
                "description": "It will always be \"ACCOUNT\"",
                "example": "ACCOUNT"
              },
              "name": {
                "type": "string",
                "description": "the account name",
                "example": "test account"
              }
            }
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identity ID",
                "example": "2c9180827ca885d7017ca8ce28a000eb"
              },
              "type": {
                "type": "string",
                "description": "It will always be \"IDENTITY\"",
                "example": "IDENTITY"
              },
              "name": {
                "type": "string",
                "description": "The identity name",
                "example": "John"
              },
              "alias": {
                "type": "string",
                "description": "The identity alias",
                "example": "John.Doe"
              }
            }
          }
        }
      },
      "AppAccountDetails": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": "The source app ID",
            "example": "fbf4f72280304f1a8bc808fc2a3bcf7b"
          },
          "appDisplayName": {
            "type": "string",
            "description": "The source app display name",
            "example": "AD source app"
          },
          "sourceAccount": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The account ID",
                "example": "fbf4f72280304f1a8bc808fc2a3bcf7b"
              },
              "nativeIdentity": {
                "type": "string",
                "description": "The native identity of account",
                "example": "CN=Abby Smith,OU=Austin,OU=Americas,OU=Demo,DC=seri,DC=acme,DC=com"
              },
              "displayName": {
                "type": "string",
                "description": "The display name of account",
                "example": "Abby Smith"
              },
              "sourceId": {
                "type": "string",
                "description": "The source ID of account",
                "example": "10efa58ea3954883b52bf74f489ce8f9"
              },
              "sourceDisplayName": {
                "type": "string",
                "description": "The source name of account",
                "example": "ODS-AD-SOURCE"
              }
            }
          }
        }
      },
      "EmailStatusDto": {
        "type": "object",
        "title": "Email Status Dto",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "example": "sender@example.com"
          },
          "isVerifiedByDomain": {
            "type": "boolean",
            "example": false
          },
          "verificationStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED"
            ]
          }
        }
      },
      "DkimAttributes": {
        "type": "object",
        "title": "Dkim Attributes",
        "properties": {
          "id": {
            "type": "string",
            "example": "123b45b0-aaaa-bbbb-a7db-123456a56abc",
            "description": "UUID associated with domain to be verified"
          },
          "address": {
            "type": "string",
            "example": "BobSmith@sailpoint.com",
            "description": "The identity or domain address"
          },
          "dkimEnabled": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "Whether or not DKIM has been enabled for this domain / identity"
          },
          "dkimTokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "uq1m3jjk25ckd3whl4n7y46c56r5l6aq",
              "u7pm38jky9ckdawhlsn7y4dcj6f5lpgq",
              "uhpm3jjkjjckdkwhlqn7yw6cjer5tpay"
            ],
            "description": "The tokens to be added to a DNS for verification"
          },
          "dkimVerificationStatus": {
            "type": "string",
            "example": "Success",
            "description": "The current status if the domain /identity has been verified. Ie Success, Failed, Pending"
          }
        },
        "description": "DKIM attributes for a domain or identity"
      },
      "DomainAddress": {
        "type": "object",
        "title": "Domain Address",
        "properties": {
          "domain": {
            "type": "string",
            "example": "sailpoint.com",
            "description": "A domain address"
          }
        }
      },
      "DomainStatusDto": {
        "type": "object",
        "title": "Domain Status Dto",
        "properties": {
          "id": {
            "type": "string",
            "example": "123b45b0-aaaa-bbbb-a7db-123456a56abc",
            "description": "New UUID associated with domain to be verified"
          },
          "domain": {
            "type": "string",
            "example": "sailpoint.com",
            "description": "A domain address"
          },
          "dkimEnabled": {
            "default": false,
            "example": true,
            "description": "DKIM is enabled for this domain"
          },
          "dkimTokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "token1",
              "token2",
              "token3"
            ],
            "description": "DKIM tokens required for authentication"
          },
          "dkimVerificationStatus": {
            "type": "string",
            "example": "PENDING",
            "description": "Status of DKIM authentication"
          }
        },
        "description": "Domain status DTO containing everything required to verify via DKIM"
      },
      "ViolationOwnerAssignmentConfig": {
        "type": "object",
        "title": "Violation Owner Assignment Config",
        "properties": {
          "assignmentRule": {
            "type": "string",
            "enum": [
              "MANAGER",
              "STATIC",
              null
            ],
            "description": "Details about the violations owner.\nMANAGER - identity's manager\nSTATIC - Governance Group or Identity",
            "example": "MANAGER",
            "nullable": true
          },
          "ownerRef": {
            "type": "object",
            "description": "The owner of the violation assignment config.",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "description": "Owner type.",
                "enum": [
                  "IDENTITY",
                  "GOVERNANCE_GROUP",
                  "MANAGER",
                  null
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner's ID.",
                "example": "2c9180a46faadee4016fb4e018c20639"
              },
              "name": {
                "type": "string",
                "description": "Owner's name.",
                "example": "Support"
              }
            }
          }
        }
      },
      "AccessCriteria": {
        "type": "object",
        "title": "Access Criteria",
        "properties": {
          "name": {
            "type": "string",
            "description": "Business name for the access construct list",
            "example": "money-in"
          },
          "criteriaList": {
            "type": "array",
            "description": "List of criteria.  There is a min of 1 and max of 50 items in the list.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "ENTITLEMENT"
                  ],
                  "description": "DTO type",
                  "example": "ENTITLEMENT"
                },
                "id": {
                  "type": "string",
                  "description": "ID of the object to which this reference applies to",
                  "example": "2c91808568c529c60168cca6f90c1313"
                },
                "name": {
                  "type": "string",
                  "description": "Human-readable display name of the object to which this reference applies to",
                  "example": "Administrator"
                }
              }
            },
            "example": [
              {
                "type": "ENTITLEMENT",
                "id": "2c9180866166b5b0016167c32ef31a66",
                "name": "Administrator"
              },
              {
                "type": "ENTITLEMENT",
                "id": "2c9180866166b5b0016167c32ef31a67",
                "name": "Administrator"
              }
            ]
          }
        }
      },
      "ConflictingAccessCriteria": {
        "type": "object",
        "title": "Conflicting Access Criteria",
        "properties": {
          "leftCriteria": {
            "$ref": "#/components/schemas/AccessCriteria"
          },
          "rightCriteria": {
            "$ref": "#/components/schemas/AccessCriteria"
          }
        }
      },
      "SodPolicy": {
        "type": "object",
        "title": "Sod Policy",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Policy business name.",
            "example": "policy-xyz"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this SOD policy is created.",
            "example": "2020-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this SOD policy is modified.",
            "example": "2020-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Optional description of the SOD policy.",
            "example": "This policy ensures compliance of xyz",
            "nullable": true
          },
          "ownerRef": {
            "type": "object",
            "description": "The owner of the SOD policy.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Owner type.",
                "enum": [
                  "IDENTITY",
                  "GOVERNANCE_GROUP"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner's ID.",
                "example": "2c9180a46faadee4016fb4e018c20639"
              },
              "name": {
                "type": "string",
                "description": "Owner's name.",
                "example": "Support"
              }
            }
          },
          "externalPolicyReference": {
            "type": "string",
            "description": "Optional external policy reference.",
            "example": "XYZ policy",
            "nullable": true
          },
          "policyQuery": {
            "type": "string",
            "description": "Search query of the SOD policy.",
            "example": "@access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdg) AND @access(id:0f11f2a4-7c94-4bf3-a2bd-742580fe3bdf)"
          },
          "compensatingControls": {
            "type": "string",
            "description": "Optional compensating controls (Mitigating Controls).",
            "example": "Have a manager review the transaction decisions for their \"out of compliance\" employee",
            "nullable": true
          },
          "correctionAdvice": {
            "type": "string",
            "description": "Optional correction advice.",
            "example": "Based on the role of the employee, managers should remove access that is not required for their job function.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "Whether the policy is enforced or not.",
            "enum": [
              "ENFORCED",
              "NOT_ENFORCED"
            ],
            "example": "ENFORCED"
          },
          "tags": {
            "type": "array",
            "description": "Tags for the policy object.",
            "example": [
              "TAG1",
              "TAG2"
            ],
            "items": {
              "type": "string"
            }
          },
          "creatorId": {
            "type": "string",
            "description": "Policy's creator ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
            "readOnly": true
          },
          "modifierId": {
            "type": "string",
            "description": "Policy's modifier ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde",
            "nullable": true,
            "readOnly": true
          },
          "violationOwnerAssignmentConfig": {
            "$ref": "#/components/schemas/ViolationOwnerAssignmentConfig",
            "nullable": true
          },
          "scheduled": {
            "type": "boolean",
            "description": "Defines whether a policy has been scheduled or not.",
            "example": true,
            "default": false
          },
          "type": {
            "type": "string",
            "description": "Whether a policy is query based or conflicting access based.",
            "default": "GENERAL",
            "enum": [
              "GENERAL",
              "CONFLICTING_ACCESS_BASED"
            ],
            "example": "GENERAL"
          },
          "conflictingAccessCriteria": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConflictingAccessCriteria"
              },
              {
                "nullable": true
              }
            ]
          }
        }
      },
      "ScheduleType": {
        "description": "Enum representing the currently supported schedule types.\n\nAdditional values may be added in the future without notice.\n",
        "type": "string",
        "enum": [
          "DAILY",
          "WEEKLY",
          "MONTHLY",
          "CALENDAR",
          "ANNUALLY"
        ],
        "example": "WEEKLY"
      },
      "SelectorType": {
        "description": "Enum representing the currently supported selector types.\n\nLIST - the *values* array contains one or more distinct values.\n\nRANGE - the *values* array contains two values: the start and end of the range, inclusive.\n\nAdditional values may be added in the future without notice.\n",
        "type": "string",
        "enum": [
          "LIST",
          "RANGE"
        ],
        "example": "LIST"
      },
      "Selector": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SelectorType"
          },
          "values": {
            "description": "The selected values.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "MON",
              "WED"
            ]
          },
          "interval": {
            "nullable": true,
            "description": "The selected interval for RANGE selectors.\n",
            "type": "integer",
            "format": "int32",
            "example": 3
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "DateTime": {
        "type": "string",
        "nullable": true,
        "format": "date-time",
        "example": "2018-06-25T20:22:28.104Z",
        "description": "A date-time in ISO-8601 format"
      },
      "Schedule-2": {
        "type": "object",
        "description": "The schedule information.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ScheduleType"
          },
          "months": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Selector"
              },
              {
                "description": "The months to execute the search. This only applies to schedules with a type of `ANNUALLY`.\n",
                "example": {
                  "type": "LIST",
                  "values": [
                    "3",
                    "6",
                    "9",
                    "12"
                  ]
                },
                "nullable": true
              }
            ]
          },
          "days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Selector"
              },
              {
                "description": "The days to execute the search.\n\nIf `type` is `WEEKLY`, the values will be `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, and `SUN`.\n\nIf `type` is `MONTHLY` or `ANNUALLY`, the values will be a number in double quotes, like `\"1\"`, `\"10\"`, or `\"28\"`.  Optionally, the value `\"L\"` can be used to refer to the last day of the month.\n",
                "example": {
                  "type": "LIST",
                  "values": [
                    "MON",
                    "WED",
                    "FRI"
                  ]
                },
                "nullable": true
              }
            ]
          },
          "hours": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Selector"
              },
              {
                "description": "The hours selected.",
                "example": {
                  "type": "RANGE",
                  "values": [
                    "9",
                    "18"
                  ],
                  "interval": 3
                }
              }
            ]
          },
          "expiration": {
            "description": "The schedule expiration date. Latest possible expiration date is '2038-01-19T03:14:07+0000'",
            "$ref": "#/components/schemas/DateTime"
          },
          "timeZoneId": {
            "description": "The canonical TZ identifier the schedule will run in (ex. America/New_York).  If no timezone is specified, the org's default timezone is used.",
            "nullable": true,
            "type": "string",
            "example": "America/Chicago"
          }
        },
        "required": [
          "type",
          "hours"
        ]
      },
      "SodRecipient": {
        "type": "object",
        "title": "Sod Recipient",
        "description": "SOD policy recipient.",
        "properties": {
          "type": {
            "type": "string",
            "description": "SOD policy recipient DTO type.",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "SOD policy recipient's identity ID.",
            "example": "2c7180a46faadee4016fb4e018c20642"
          },
          "name": {
            "type": "string",
            "description": "SOD policy recipient's display name.",
            "example": "Michael Michaels"
          }
        }
      },
      "SodPolicySchedule": {
        "type": "object",
        "title": "Sod Policy Schedule",
        "properties": {
          "name": {
            "type": "string",
            "description": "SOD Policy schedule name",
            "example": "SCH-1584312283015"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this SOD policy schedule is created.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The time when this SOD policy schedule is modified.",
            "example": "2020-01-01T00:00:00.000000Z"
          },
          "description": {
            "type": "string",
            "description": "SOD Policy schedule description",
            "example": "Schedule for policy xyz"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule-2"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SodRecipient"
            }
          },
          "emailEmptyResults": {
            "type": "boolean",
            "description": "Indicates if empty results need to be emailed",
            "example": false
          },
          "creatorId": {
            "type": "string",
            "description": "Policy's creator ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "modifierId": {
            "type": "string",
            "description": "Policy's modifier ID",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          }
        }
      },
      "IdentityWithNewAccess": {
        "description": "An identity with a set of access to be added",
        "required": [
          "identityId",
          "accessRefs"
        ],
        "type": "object",
        "properties": {
          "identityId": {
            "description": "Identity id to be checked.",
            "type": "string",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "accessRefs": {
            "description": "The list of entitlements to consider for possible violations in a preventive check.",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Entitlement including a specific set of access.",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Entitlement's DTO type.",
                  "enum": [
                    "ENTITLEMENT"
                  ],
                  "example": "ENTITLEMENT",
                  "nullable": false
                },
                "id": {
                  "type": "string",
                  "description": "Entitlement's ID.",
                  "example": "2c91809773dee32014e13e122092014e",
                  "nullable": false
                }
              }
            },
            "example": [
              {
                "type": "ENTITLEMENT",
                "id": "2c918087682f9a86016839c050861ab1"
              },
              {
                "type": "ENTITLEMENT",
                "id": "2c918087682f9a86016839c0509c1ab2"
              }
            ]
          }
        }
      },
      "SodPolicyDto-2": {
        "type": "object",
        "description": "SOD policy.",
        "properties": {
          "type": {
            "type": "string",
            "description": "SOD policy DTO type.",
            "enum": [
              "SOD_POLICY"
            ],
            "example": "SOD_POLICY"
          },
          "id": {
            "type": "string",
            "description": "SOD policy ID.",
            "example": "0f11f2a4-7c94-4bf3-a2bd-742580fe3bde"
          },
          "name": {
            "type": "string",
            "description": "SOD policy display name.",
            "example": "Business SOD Policy"
          }
        }
      },
      "ExceptionCriteriaAccess": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DtoType",
            "description": "DTO type"
          },
          "id": {
            "type": "string",
            "description": "ID of the object to which this reference applies",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of the object to which this reference applies",
            "example": "CN=HelpDesk,OU=test,OU=test-service,DC=TestAD,DC=local"
          },
          "existing": {
            "type": "boolean",
            "description": "Whether the subject identity already had that access or not",
            "example": true
          }
        },
        "description": "Access reference with addition of boolean existing flag to indicate whether the access was extant"
      },
      "ExceptionCriteria": {
        "type": "object",
        "properties": {
          "criteriaList": {
            "type": "array",
            "description": "List of exception criteria. There is a min of 1 and max of 50 items in the list.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExceptionCriteriaAccess"
                }
              ],
              "description": "The types of objects supported for SOD violations",
              "properties": {
                "type": {
                  "enum": [
                    "ENTITLEMENT"
                  ],
                  "example": "ENTITLEMENT",
                  "description": "The type of object that is referenced"
                }
              }
            },
            "example": [
              {
                "type": "ENTITLEMENT",
                "id": "2c9180866166b5b0016167c32ef31a66",
                "existing": true
              },
              {
                "type": "ENTITLEMENT",
                "id": "2c9180866166b5b0016167c32ef31a67",
                "existing": false
              }
            ]
          }
        }
      },
      "ExceptionAccessCriteria": {
        "type": "object",
        "properties": {
          "leftCriteria": {
            "$ref": "#/components/schemas/ExceptionCriteria"
          },
          "rightCriteria": {
            "$ref": "#/components/schemas/ExceptionCriteria"
          }
        }
      },
      "ViolationContext": {
        "type": "object",
        "properties": {
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SodPolicyDto-2"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "SOD_POLICY"
                  },
                  "name": {
                    "type": "string",
                    "example": "A very cool policy name"
                  }
                }
              }
            ],
            "description": "The types of objects supported for SOD policy violations.",
            "properties": {
              "type": {
                "enum": [
                  "ENTITLEMENT"
                ],
                "example": "ENTITLEMENT",
                "description": "The type of object supported for SOD policy violations."
              }
            }
          },
          "conflictingAccessCriteria": {
            "$ref": "#/components/schemas/ExceptionAccessCriteria",
            "nullable": false
          }
        }
      },
      "ViolationPrediction": {
        "description": "An object containing a listing of the SOD violation reasons detected by this check.",
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "violationContexts": {
            "type": "array",
            "description": "List of Violation Contexts",
            "items": {
              "$ref": "#/components/schemas/ViolationContext"
            }
          }
        }
      },
      "MultiPolicyRequest": {
        "type": "object",
        "title": "Multi Policy Request",
        "properties": {
          "filteredPolicyList": {
            "type": "array",
            "description": "Multi-policy report will be run for this list of ids",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkItemState": {
        "type": "string",
        "nullable": true,
        "enum": [
          "Finished",
          "Rejected",
          "Returned",
          "Expired",
          "Pending",
          "Canceled",
          null
        ],
        "example": "Pending",
        "description": "The state of a work item"
      },
      "WorkItemType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Generic",
          "Certification",
          "Remediation",
          "Delegation",
          "Approval",
          "ViolationReview",
          "Form",
          "PolicyViolation",
          "Challenge",
          "ImpactAnalysis",
          "Signoff",
          "Event",
          "ManualAction",
          "Test"
        ],
        "example": "Generic",
        "description": "The type of the work item"
      },
      "RemediationItemDetails": {
        "type": "object",
        "title": "Remediation Item Details",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certification",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the certification target",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "targetName": {
            "type": "string",
            "description": "The name of the certification target",
            "example": "john.smith"
          },
          "targetDisplayName": {
            "type": "string",
            "description": "The display name of the certification target",
            "example": "emailAddress"
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application/source",
            "example": "Active Directory"
          },
          "attributeName": {
            "type": "string",
            "description": "The name of the attribute being certified",
            "example": "phoneNumber"
          },
          "attributeOperation": {
            "type": "string",
            "description": "The operation of the certification on the attribute",
            "example": "update"
          },
          "attributeValue": {
            "type": "string",
            "description": "The value of the attribute being certified",
            "example": "512-555-1212"
          },
          "nativeIdentity": {
            "type": "string",
            "description": "The native identity of the target",
            "example": "jason.smith2"
          }
        }
      },
      "ApprovalItemDetails": {
        "type": "object",
        "title": "Approval Item Details",
        "properties": {
          "id": {
            "type": "string",
            "description": "The approval item's ID",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "account": {
            "type": "string",
            "nullable": true,
            "description": "The account referenced by the approval item",
            "example": "john.smith"
          },
          "application": {
            "type": "string",
            "description": "The name of the application/source",
            "example": "Active Directory"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The attribute's name",
            "example": "emailAddress"
          },
          "operation": {
            "type": "string",
            "description": "The attribute's operation",
            "example": "update"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "The attribute's value",
            "example": "a@b.com"
          },
          "state": {
            "$ref": "#/components/schemas/WorkItemState"
          }
        }
      },
      "FormItemDetails": {
        "type": "object",
        "title": "Form Item Details",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the FormItem",
            "example": "Field1"
          }
        }
      },
      "SectionDetails": {
        "type": "object",
        "title": "Section Details",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormItemDetails"
          },
          {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "Label of the section",
                "example": "Section 1"
              },
              "formItems": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of FormItems. FormItems can be SectionDetails and/or FieldDetails",
                "example": []
              }
            }
          }
        ]
      },
      "FormDetails": {
        "type": "object",
        "title": "Form Details",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the form",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the form",
            "example": "AccountSelection Form"
          },
          "title": {
            "type": "string",
            "description": "The form title",
            "example": "Account Selection for John.Doe"
          },
          "subtitle": {
            "type": "string",
            "description": "The form subtitle.",
            "example": "Please select from the following"
          },
          "targetUser": {
            "type": "string",
            "description": "The name of the user that should be shown this form",
            "example": "Jane.Doe"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectionDetails"
            }
          }
        }
      },
      "WorkItemForward": {
        "type": "object",
        "title": "Work Item Forward",
        "required": [
          "targetOwnerId",
          "comment"
        ],
        "properties": {
          "targetOwnerId": {
            "type": "string",
            "description": "The ID of the identity to forward this work item to.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "comment": {
            "type": "string",
            "description": "Comments to send to the target owner",
            "example": "I'm going on vacation."
          },
          "sendNotifications": {
            "type": "boolean",
            "description": "If true, send a notification to the target owner.",
            "default": true,
            "example": true
          }
        }
      },
      "WorkflowModifiedBy": {
        "type": "object",
        "title": "Workflow Modified By",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY"
          },
          "id": {
            "type": "string",
            "description": "Identity ID",
            "example": "2c9180a46faadee4016fb4e018c20639"
          },
          "name": {
            "type": "string",
            "description": "Human-readable display name of identity.",
            "example": "Thomas Edison"
          }
        }
      },
      "WorkflowDefinition": {
        "type": "object",
        "title": "Workflow Definition",
        "description": "The map of steps that the workflow will execute.",
        "properties": {
          "start": {
            "type": "string",
            "description": "The name of the starting step.",
            "example": "Send Email Test"
          },
          "steps": {
            "type": "object",
            "description": "One or more step objects that comprise this workflow.  Please see the Workflow documentation to see the JSON schema for each step type.",
            "additionalProperties": true,
            "example": {
              "Send Email": {
                "actionId": "sp:send-email",
                "attributes": {
                  "body": "This is a test",
                  "from": "sailpoint@sailpoint.com",
                  "recipientId.$": "$.identity.id",
                  "subject": "test"
                },
                "nextStep": "success",
                "selectResult": null,
                "type": "ACTION"
              },
              "success": {
                "type": "success"
              }
            }
          }
        }
      },
      "EventAttributes": {
        "title": "Event Trigger Attributes",
        "type": "object",
        "description": "Attributes related to an IdentityNow ETS event",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the trigger",
            "example": "idn:identity-attributes-changed",
            "nullable": true
          },
          "filter.$": {
            "type": "string",
            "description": "JSON path expression that will limit which events the trigger will fire on",
            "example": "$.changes[?(@.attribute == 'manager')]",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the event trigger",
            "example": "Triggered when an identity's manager attribute changes",
            "nullable": true
          },
          "attributeToFilter": {
            "type": "string",
            "description": "The attribute to filter on",
            "example": "LifecycleState",
            "nullable": true
          },
          "formDefinitionId": {
            "type": "string",
            "description": "Form definition's unique identifier.",
            "example": "Admin_Access_Request_Form",
            "nullable": true
          }
        }
      },
      "ExternalAttributes": {
        "title": "External Trigger Attributes",
        "type": "object",
        "description": "Attributes related to an external trigger",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the external trigger",
            "example": "search-and-notify",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Additional context about the external trigger",
            "example": "Run a search and notify the results",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "description": "OAuth Client ID to authenticate with this trigger",
            "example": "87e239b2-b85b-4bde-b9a7-55bf304ddcdc",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to invoke this workflow",
            "example": "https://tenant.api.identitynow.com/beta/workflows/execute/external/c79e0079-562c-4df5-aa73-60a9e25c916d",
            "nullable": true
          }
        }
      },
      "ScheduledAttributes": {
        "title": "Scheduled Trigger Attributes",
        "type": "object",
        "description": "Attributes related to a scheduled trigger",
        "additionalProperties": false,
        "required": [
          "frequency"
        ],
        "properties": {
          "frequency": {
            "type": "string",
            "description": "Frequency of execution",
            "example": "daily",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly",
              "cronSchedule",
              null
            ],
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone identifier",
            "example": "America/Chicago",
            "nullable": true
          },
          "cronString": {
            "type": "string",
            "description": "A valid CRON expression",
            "externalDocs": {
              "description": "CRON expression editor",
              "url": "https://crontab.guru/"
            },
            "example": "0 9 * * 1",
            "nullable": true
          },
          "weeklyDays": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "Monday",
            "description": "Scheduled days of the week for execution",
            "nullable": true
          },
          "weeklyTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "Monday",
            "description": "Scheduled execution times",
            "nullable": true
          },
          "yearlyTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "1969-12-31T09:00:00.000Z",
            "description": "Scheduled execution times",
            "nullable": true
          }
        }
      },
      "WorkflowTrigger": {
        "type": "object",
        "title": "Workflow Trigger",
        "description": "The trigger that starts the workflow",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EVENT",
              "EXTERNAL",
              "SCHEDULED",
              ""
            ],
            "example": "EVENT",
            "description": "The trigger type"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/EventAttributes"
              },
              {
                "$ref": "#/components/schemas/ExternalAttributes"
              },
              {
                "$ref": "#/components/schemas/ScheduledAttributes"
              }
            ],
            "description": "Workflow Trigger Attributes."
          }
        }
      },
      "WorkflowBody": {
        "type": "object",
        "title": "Workflow Body",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the workflow",
            "example": "Send Email"
          },
          "owner": {
            "type": "object",
            "description": "The identity that owns the workflow.  The owner's permissions in IDN will determine what actions the workflow is allowed to perform.  Ownership can be changed by updating the owner in a PUT or PATCH request.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY",
                "description": "The type of object that is referenced"
              },
              "id": {
                "type": "string",
                "description": "The unique ID of the object",
                "example": "2c91808568c529c60168cca6f90c1313"
              },
              "name": {
                "type": "string",
                "description": "The name of the object",
                "example": "William Wilson"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "Description of what the workflow accomplishes",
            "example": "Send an email to the identity who's attributes changed."
          },
          "definition": {
            "$ref": "#/components/schemas/WorkflowDefinition"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable the workflow.  Workflows cannot be created in an enabled state.",
            "default": false,
            "example": false
          },
          "trigger": {
            "$ref": "#/components/schemas/WorkflowTrigger",
            "description": "Workflow Trigger."
          }
        }
      },
      "Workflow": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Workflow ID. This is a UUID generated upon creation.",
                "example": "d201c5e9-d37b-4aff-af14-66414f39d569"
              },
              "modified": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time the workflow was modified.",
                "example": "2023-12-05T15:18:27.699132301Z"
              },
              "modifiedBy": {
                "$ref": "#/components/schemas/WorkflowModifiedBy"
              },
              "executionCount": {
                "type": "integer",
                "format": "int32",
                "description": "The number of times this workflow has been executed.",
                "example": 2
              },
              "failureCount": {
                "type": "integer",
                "format": "int32",
                "description": "The number of times this workflow has failed during execution.",
                "example": 0
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time the workflow was created.",
                "example": "2022-01-10T16:06:16.636381447Z"
              },
              "creator": {
                "type": "object",
                "description": "Workflow creator's identity.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Workflow creator's DTO type.",
                    "enum": [
                      "IDENTITY"
                    ],
                    "example": "IDENTITY"
                  },
                  "id": {
                    "type": "string",
                    "description": "Workflow creator's identity ID.",
                    "example": "2c7180a46faadee4016fb4e018c20642"
                  },
                  "name": {
                    "type": "string",
                    "description": "Workflow creator's display name.",
                    "example": "Michael Michaels"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/WorkflowBody"
          }
        ]
      },
      "WorkflowExecution": {
        "type": "object",
        "title": "Workflow Execution",
        "properties": {
          "id": {
            "type": "string",
            "description": "Workflow execution ID.",
            "example": "b393f4e2-4785-4d7f-ab27-3a6b8ded4c81"
          },
          "workflowId": {
            "type": "string",
            "description": "Workflow ID.",
            "example": "d201c5d9-d37b-4a2f-af14-66414f39d568"
          },
          "requestId": {
            "type": "string",
            "description": "Backend ID that tracks a workflow request in the system. Provide this ID in a customer support ticket for debugging purposes.",
            "example": "41e12a74fa7b4a6a98ae47887b64acdb"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when the workflow started.",
            "example": "2022-02-07T20:13:29.356648026Z"
          },
          "closeTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when the workflow ended.",
            "example": "2022-02-07T20:13:31.682410165Z"
          },
          "status": {
            "description": "Workflow execution status.",
            "type": "string",
            "enum": [
              "Completed",
              "Failed",
              "Canceled",
              "Queued",
              "Running"
            ],
            "example": "Completed"
          }
        }
      },
      "WorkflowExecutionEvent": {
        "type": "object",
        "title": "Workflow Execution Event",
        "properties": {
          "type": {
            "description": "The type of event",
            "enum": [
              "WorkflowExecutionScheduled",
              "WorkflowExecutionStarted",
              "WorkflowExecutionCompleted",
              "WorkflowExecutionFailed",
              "WorkflowTaskScheduled",
              "WorkflowTaskStarted",
              "WorkflowTaskCompleted",
              "WorkflowTaskFailed",
              "ActivityTaskScheduled",
              "ActivityTaskStarted",
              "ActivityTaskCompleted",
              "ActivityTaskFailed"
            ],
            "example": "WorkflowTaskScheduled"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the event occurred",
            "example": "2022-02-07T20:13:31.640618296Z"
          },
          "attributes": {
            "type": "object",
            "description": "Additional attributes associated with the event",
            "example": {}
          }
        }
      },
      "WorkflowLibraryFormFields": {
        "type": "object",
        "title": "Workflow Library Form Fields",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the form field",
            "example": "First value to compare"
          },
          "helpText": {
            "type": "string",
            "description": "Describes the form field in the UI",
            "example": "The name to give to this certification campaign."
          },
          "label": {
            "type": "string",
            "description": "A human readable name for this form field in the UI",
            "example": "Campaign Name"
          },
          "name": {
            "type": "string",
            "description": "The name of the input attribute",
            "example": "name"
          },
          "required": {
            "type": "boolean",
            "description": "Denotes if this field is a required attribute",
            "example": false
          },
          "type": {
            "description": "The type of the form field",
            "type": "string",
            "nullable": true,
            "enum": [
              "text",
              "textarea",
              "boolean",
              "email",
              "url",
              "number",
              "json",
              "checkbox",
              "jsonpath",
              "select",
              "multiType",
              "duration",
              "toggle",
              "formPicker",
              "identityPicker",
              "governanceGroupPicker",
              "string",
              "object",
              "array",
              "secret",
              "keyValuePairs",
              "emailPicker",
              "advancedToggle",
              "variableCreator",
              "htmlEditor"
            ],
            "example": "text"
          }
        }
      },
      "WorkflowLibraryAction": {
        "title": "Workflow Action",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Action ID. This is a static namespaced ID for the action",
            "example": "sp:create-campaign"
          },
          "name": {
            "type": "string",
            "description": "Action Name",
            "example": "Create Certification Campaign"
          },
          "type": {
            "type": "string",
            "description": "Action type",
            "example": "ACTION"
          },
          "description": {
            "type": "string",
            "description": "Action Description",
            "example": "Generates a certification campaign."
          },
          "formFields": {
            "nullable": true,
            "type": "array",
            "description": "One or more inputs that the action accepts",
            "items": {
              "$ref": "#/components/schemas/WorkflowLibraryFormFields"
            }
          },
          "exampleOutput": {
            "oneOf": [
              {
                "type": "object",
                "description": "Example output"
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecatedBy": {
            "type": "string",
            "format": "date-time"
          },
          "versionNumber": {
            "type": "integer",
            "description": "Version number"
          },
          "isSimulationEnabled": {
            "type": "boolean"
          },
          "isDynamicSchema": {
            "type": "boolean",
            "description": "Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.",
            "example": false
          },
          "outputSchema": {
            "type": "object",
            "description": "Defines the output schema, if any, that this action produces.",
            "example": {
              "definitions": {},
              "properties": {
                "autoRevokeAllowed": {
                  "$id": "#sp:create-campaign/autoRevokeAllowed",
                  "default": true,
                  "examples": [
                    false
                  ],
                  "title": "autoRevokeAllowed",
                  "type": "boolean"
                },
                "deadline": {
                  "$id": "#sp:create-campaign/deadline",
                  "default": "",
                  "examples": [
                    "2020-12-25T06:00:00.468Z"
                  ],
                  "format": "date-time",
                  "pattern": "^.*$",
                  "title": "deadline",
                  "type": "string"
                },
                "description": {
                  "$id": "#sp:create-campaign/description",
                  "default": "",
                  "examples": [
                    "A review of everyone's access by their manager."
                  ],
                  "pattern": "^.*$",
                  "title": "description",
                  "type": "string"
                },
                "emailNotificationEnabled": {
                  "$id": "#sp:create-campaign/emailNotificationEnabled",
                  "default": true,
                  "examples": [
                    false
                  ],
                  "title": "emailNotificationEnabled",
                  "type": "boolean"
                },
                "filter": {
                  "$id": "#sp:create-campaign/filter",
                  "properties": {
                    "id": {
                      "$id": "#sp:create-campaign/filter/id",
                      "default": "",
                      "examples": [
                        "e0adaae69852e8fe8b8a3d48e5ce757c"
                      ],
                      "pattern": "^.*$",
                      "title": "id",
                      "type": "string"
                    },
                    "type": {
                      "$id": "#sp:create-campaign/filter/type",
                      "default": "",
                      "examples": [
                        "CAMPAIGN_FILTER"
                      ],
                      "pattern": "^.*$",
                      "title": "type",
                      "type": "string"
                    }
                  },
                  "title": "filter",
                  "type": "object"
                },
                "id": {
                  "$id": "#sp:create-campaign/id",
                  "default": "",
                  "examples": [
                    "2c918086719eec070171a7e3355a360a"
                  ],
                  "pattern": "^.*$",
                  "title": "id",
                  "type": "string"
                },
                "name": {
                  "$id": "#sp:create-campaign/name",
                  "default": "",
                  "examples": [
                    "Manager Review"
                  ],
                  "pattern": "^.*$",
                  "title": "name",
                  "type": "string"
                },
                "recommendationsEnabled": {
                  "$id": "#sp:create-campaign/recommendationsEnabled",
                  "default": true,
                  "examples": [
                    false
                  ],
                  "title": "recommendationEnabled",
                  "type": "boolean"
                },
                "type": {
                  "$id": "#sp:create-campaign/type",
                  "default": "",
                  "examples": [
                    "MANAGER"
                  ],
                  "pattern": "^.*$",
                  "title": "type",
                  "type": "string"
                }
              },
              "title": "sp:create-campaign",
              "type": "object"
            }
          }
        }
      },
      "WorkflowLibraryTrigger": {
        "title": "Workflow Trigger",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Trigger ID. This is a static namespaced ID for the trigger.",
            "example": "idn:identity-attributes-changed"
          },
          "type": {
            "description": "Trigger type",
            "type": "string",
            "enum": [
              "EVENT",
              "SCHEDULED",
              "EXTERNAL"
            ],
            "example": "EVENT"
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecatedBy": {
            "type": "string",
            "format": "date-time"
          },
          "isSimulationEnabled": {
            "type": "boolean"
          },
          "outputSchema": {
            "type": "object",
            "description": "Example output schema"
          },
          "name": {
            "type": "string",
            "description": "Trigger Name",
            "example": "Identity Attributes Changed"
          },
          "description": {
            "type": "string",
            "description": "Trigger Description",
            "example": "One or more identity attributes changed."
          },
          "isDynamicSchema": {
            "type": "boolean",
            "description": "Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.",
            "example": false
          },
          "inputExample": {
            "type": "object",
            "description": "Example trigger payload if applicable",
            "nullable": true,
            "externalDocs": {
              "description": "List of triggers and their input schemas",
              "url": "https://developer.sailpoint.com/idn/docs/event-triggers/available"
            },
            "example": {
              "changes": [
                {
                  "attribute": "department",
                  "newValue": "marketing",
                  "oldValue": "sales"
                },
                {
                  "attribute": "manager",
                  "newValue": {
                    "id": "ee769173319b41d19ccec6c235423236c",
                    "name": "mean.guy",
                    "type": "IDENTITY"
                  },
                  "oldValue": {
                    "id": "ee769173319b41d19ccec6c235423237b",
                    "name": "nice.guy",
                    "type": "IDENTITY"
                  }
                },
                {
                  "attribute": "email",
                  "newValue": "john.doe@gmail.com",
                  "oldValue": "john.doe@hotmail.com"
                }
              ],
              "identity": {
                "id": "ee769173319b41d19ccec6cea52f237b",
                "name": "john.doe",
                "type": "IDENTITY"
              }
            }
          },
          "formFields": {
            "type": "array",
            "nullable": true,
            "description": "One or more inputs that the trigger accepts",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/WorkflowLibraryFormFields"
            }
          }
        }
      },
      "WorkflowLibraryOperator": {
        "title": "Workflow Operator",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Operator ID.",
            "example": "sp:compare-boolean"
          },
          "name": {
            "type": "string",
            "description": "Operator friendly name",
            "example": "Compare Boolean Values"
          },
          "type": {
            "description": "Operator type",
            "type": "string",
            "example": "OPERATOR"
          },
          "description": {
            "type": "string",
            "description": "Description of the operator",
            "example": "Compare two boolean values and decide what happens based on the result."
          },
          "isDynamicSchema": {
            "type": "boolean",
            "description": "Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.",
            "example": false
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecatedBy": {
            "type": "string",
            "format": "date-time"
          },
          "isSimulationEnabled": {
            "type": "boolean"
          },
          "formFields": {
            "type": "array",
            "nullable": true,
            "description": "One or more inputs that the operator accepts",
            "items": {
              "$ref": "#/components/schemas/WorkflowLibraryFormFields"
            },
            "example": [
              {
                "description": "Enter the JSONPath to a value from the input to compare to Variable B.",
                "helpText": "",
                "label": "Variable A",
                "name": "variableA.$",
                "required": true,
                "type": "text"
              },
              {
                "helpText": "Select an operation.",
                "label": "Operation",
                "name": "operator",
                "options": [
                  {
                    "label": "Equals",
                    "value": "BooleanEquals"
                  }
                ],
                "required": true,
                "type": "select"
              },
              {
                "description": "Enter the JSONPath to a value from the input to compare to Variable A.",
                "helpText": "",
                "label": "Variable B",
                "name": "variableB.$",
                "required": false,
                "type": "text"
              },
              {
                "description": "Enter True or False.",
                "helpText": "",
                "label": "Variable B",
                "name": "variableB",
                "required": false,
                "type": "text"
              }
            ]
          }
        }
      },
      "WorkflowOAuthClient": {
        "type": "object",
        "title": "Workflow O Auth Client",
        "properties": {
          "id": {
            "type": "string",
            "description": "OAuth client ID for the trigger. This is a UUID generated upon creation.",
            "example": "1a58c03a6bf64dc2876f6988c6e2c7b7"
          },
          "secret": {
            "type": "string",
            "description": "OAuthClient secret.",
            "example": "00cc24a7fe810fe06a7cb38bc168ae104d703c7abb296f9944dc68e69ddb578b"
          },
          "url": {
            "type": "string",
            "description": "URL for the external trigger to invoke",
            "example": "https://tenant.api.identitynow.com/beta/workflows/execute/external/c17bea3a-574d-453c-9e04-4365fbf5af0b"
          }
        }
      },
      "WorkgroupDto": {
        "type": "object",
        "properties": {
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnerDto"
              },
              {
                "type": "object",
                "properties": {
                  "displayName": {
                    "readOnly": true,
                    "description": "The display name of the identity",
                    "type": "string",
                    "example": "Support"
                  },
                  "emailAddress": {
                    "readOnly": true,
                    "description": "The primary email address of the identity",
                    "type": "string",
                    "example": "support@sailpoint.com"
                  }
                },
                "description": "Governance group owner."
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "Governance group ID.",
            "example": "2c91808568c529c60168cca6f90c1313",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Governance group name.",
            "example": "DB Access Governance Group"
          },
          "description": {
            "type": "string",
            "description": "Governance group description.",
            "example": "Description of the Governance Group"
          },
          "memberCount": {
            "type": "integer",
            "format": "int64",
            "example": 1641498673000,
            "readOnly": true,
            "description": "Number of members in the governance group."
          },
          "connectionCount": {
            "type": "integer",
            "format": "int64",
            "example": 1641498673000,
            "description": "Number of connections in the governance group.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-06T19:51:13Z"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-06T19:51:13Z"
          }
        }
      },
      "WorkgroupBulkDeleteRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "List of IDs of Governance Groups to be deleted.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "567a697e-885b-495a-afc5-d55e1c23a302",
              "c7b0f7b2-1e78-4063-b294-a555333dacd2"
            ]
          }
        }
      },
      "WorkgroupDeleteItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the Governance Group.",
            "type": "string",
            "example": "464ae7bf791e49fdb74606a2e4a89635"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "\nThe HTTP response status code returned for an individual Governance Group that is requested for deletion during a bulk delete operation.\n\n> 204   -  Governance Group deleted successfully.\n\n> 409   - Governance Group is in use,hence can not be deleted.\n\n> 404   - Governance Group not found.\n",
            "example": 204
          },
          "description": {
            "description": "Human readable status description and containing additional context information about success or failures etc.\n",
            "example": "\n> Governance Group deleted successfully.\n\n> Unable to delete Governance Group f80bba83-98c4-4ec2-81c8-373c00e9663b because it is in use.\n\n> Referenced Governance Group 2b711763-ed35-42a2-a80c-8f1ce0dc4a7f was not found.\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "WorkgroupBulkDeleteResponse": {
        "description": "Bulk remove Governance Groups Response.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkgroupDeleteItem"
        },
        "example": [
          {
            "id": "464ae7bf791e49fdb74606a2e4a89635",
            "status": 204,
            "description": "Governance Group deleted successfully."
          }
        ]
      },
      "ConnectedObjectType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE",
          "ROLE",
          "SOD_POLICY",
          "SOURCE"
        ],
        "description": "An enumeration of the types of Objects associated with a Governance Group. Supported object types are ACCESS_PROFILE, ROLE, SOD_POLICY and SOURCE.",
        "example": "ACCESS_PROFILE"
      },
      "ConnectedObject": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConnectedObjectType",
            "description": "Connection Object type"
          },
          "id": {
            "type": "string",
            "description": "ID of the object to which this reference applies",
            "example": "2c91808568c529c60168cca6f90c1313"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of Connected object",
            "example": "Employee-database-read-write"
          },
          "description": {
            "type": "string",
            "description": "Description of the Connected object.",
            "example": "Collection of entitlements to read/write the employee database."
          }
        }
      },
      "WorkgroupConnectionDto": {
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/ConnectedObject",
            "description": "Connected object to Governance Group"
          },
          "connectionType": {
            "description": "Connection Type.",
            "type": "string",
            "enum": [
              "AccessRequestReviewer",
              "Owner",
              "ManagementWorkgroup"
            ],
            "example": "AccessRequestReviewer"
          }
        }
      },
      "BulkWorkgroupMembersRequest": {
        "description": "List of identities to be added or removed to a Governance Group members list.",
        "type": "array",
        "items": {
          "type": "object",
          "description": "Identity's basic details.",
          "properties": {
            "type": {
              "type": "string",
              "description": "Identity's DTO type.",
              "enum": [
                "IDENTITY"
              ],
              "example": "IDENTITY"
            },
            "id": {
              "type": "string",
              "description": "Identity ID.",
              "example": "2c7180a46faadee4016fb4e018c20642"
            },
            "name": {
              "type": "string",
              "description": "Identity's display name.",
              "example": "Michael Michaels"
            }
          }
        },
        "example": [
          {
            "type": "IDENTITY",
            "id": "464ae7bf791e49fdb74606a2e4a89635",
            "name": "Addie Smith"
          }
        ]
      },
      "WorkgroupMemberAddItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifier of identity in bulk member add request.",
            "type": "string",
            "example": "464ae7bf791e49fdb74606a2e4a89635"
          },
          "status": {
            "description": "\nThe HTTP response status code returned for an individual member that is requested for addition during a bulk add operation.\nThe HTTP response status code returned for an individual Governance Group is requested for deletion.\n\n> 201   - Identity is added into Governance Group members list.\n\n> 409   - Identity is already member of  Governance Group.\n",
            "type": "integer",
            "format": "int32",
            "example": 201
          },
          "description": {
            "description": "Human readable status description and containing additional context information about success or failures etc.\n",
            "type": "string",
            "example": "\n> Identity is added into Governance Group members list.\n\n> Unable to set Membership of Identity \"3244d5f2d04447498520f54c6789ae33\" to Governance Group \"f80bba83-98c4-4ec2-81c8-373c00e9663b\"; the relationship already exists.\n"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "WorkgroupMemberBulkAddResponse": {
        "description": "Bulk add Governance Group members Response.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkgroupMemberAddItem"
        },
        "example": [
          {
            "id": "464ae7bf791e49fdb74606a2e4a89635",
            "status": 201,
            "description": "Identity added to Governance Group members list."
          }
        ]
      },
      "WorkgroupMemberDeleteItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifier of identity in bulk member add /remove request.",
            "type": "string",
            "example": "464ae7bf791e49fdb74606a2e4a89635"
          },
          "status": {
            "description": "The HTTP response status code returned for an individual  member that is requested for deletion during a bulk delete operation.\n\n> 204   - Identity is removed from Governance Group members list.\n\n> 404   - Identity is not member of Governance Group.\n",
            "type": "integer",
            "format": "int32",
            "example": 204
          },
          "description": {
            "description": "Human readable status description and containing additional context information about success or failures etc.\n",
            "type": "string",
            "example": "\n> Identity deleted from Governance Group members list.\n\n> Referenced Governance Group Member with Identity Id \"bc3a744678534eb78a8002ee2085df64\" was not found.\n"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "WorkgroupMemberBulkDeleteResponse": {
        "description": "Bulk add Governance Group members Response.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WorkgroupMemberDeleteItem"
        },
        "example": [
          {
            "id": "464ae7bf791e49fdb74606a2e4a89635",
            "status": 204,
            "description": "Identity deleted from Governance Group members list."
          }
        ]
      },
      "FormOwner": {
        "properties": {
          "type": {
            "description": "FormOwnerType value.\nIDENTITY FormOwnerTypeIdentity",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY",
            "type": "string",
            "x-go-enum-desc": "IDENTITY FormOwnerTypeIdentity",
            "x-go-name": "Type"
          },
          "id": {
            "description": "Unique identifier of the form's owner.",
            "example": "2c9180867624cbd7017642d8c8c81f67",
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "description": "Name of the form's owner.",
            "example": "Grant Smith",
            "type": "string"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormUsedBy": {
        "properties": {
          "type": {
            "description": "FormUsedByType value. \nWORKFLOW FormUsedByTypeWorkflow\nSOURCE FormUsedByTypeSource\nMySailPoint FormUsedByType",
            "enum": [
              "WORKFLOW",
              "SOURCE",
              "MySailPoint"
            ],
            "example": "WORKFLOW",
            "type": "string",
            "x-go-enum-desc": "WORKFLOW FormUsedByTypeWorkflow\nSOURCE FormUsedByTypeSource",
            "x-go-name": "Type"
          },
          "id": {
            "description": "Unique identifier of the system using the form.",
            "example": "61940a92-5484-42bc-bc10-b9982b218cdf",
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "description": "Name of the system using the form.",
            "example": "Access Request Form",
            "type": "string"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormDefinitionInput": {
        "properties": {
          "id": {
            "description": "Unique identifier for the form input.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "ID"
          },
          "type": {
            "description": "FormDefinitionInputType value.\nSTRING FormDefinitionInputTypeString",
            "enum": [
              "STRING",
              "ARRAY"
            ],
            "example": "STRING",
            "type": "string",
            "x-go-enum-desc": "STRING FormDefinitionInputTypeString",
            "x-go-name": "Type"
          },
          "label": {
            "description": "Name for the form input.",
            "example": "input1",
            "type": "string",
            "x-go-name": "Label"
          },
          "description": {
            "description": "Form input's description.",
            "example": "A single dynamic scalar value (i.e. number, string, date, etc.) that can be passed into the form for use in conditional logic",
            "type": "string",
            "x-go-name": "Description"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormElementValidationsSet": {
        "description": "Set of FormElementValidation items.",
        "type": "object",
        "properties": {
          "validationType": {
            "description": "The type of data validation that you wish to enforce, e.g., a required field, a minimum length, etc.",
            "example": "REQUIRED",
            "type": "string",
            "enum": [
              "REQUIRED",
              "MIN_LENGTH",
              "MAX_LENGTH",
              "REGEX",
              "DATE",
              "MAX_DATE",
              "MIN_DATE",
              "LESS_THAN_DATE",
              "PHONE",
              "EMAIL",
              "DATA_SOURCE",
              "TEXTAREA"
            ]
          }
        },
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormElement": {
        "properties": {
          "id": {
            "description": "Form element identifier.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "ID"
          },
          "elementType": {
            "description": "FormElementType value. \nTEXT FormElementTypeText\nTOGGLE FormElementTypeToggle\nTEXTAREA FormElementTypeTextArea\nHIDDEN FormElementTypeHidden\nPHONE FormElementTypePhone\nEMAIL FormElementTypeEmail\nSELECT FormElementTypeSelect\nDATE FormElementTypeDate\nSECTION FormElementTypeSection\nCOLUMN_SET FormElementTypeColumns\nIMAGE FormElementTypeImage\nDESCRIPTION FormElementTypeDescription",
            "enum": [
              "TEXT",
              "TOGGLE",
              "TEXTAREA",
              "HIDDEN",
              "PHONE",
              "EMAIL",
              "SELECT",
              "DATE",
              "SECTION",
              "COLUMN_SET",
              "IMAGE",
              "DESCRIPTION"
            ],
            "example": "TEXT",
            "type": "string",
            "x-go-name": "ElementType"
          },
          "config": {
            "additionalProperties": true,
            "description": "Config object.",
            "example": {
              "label": "Department"
            },
            "type": "object",
            "x-go-name": "Config",
            "x-go-enum-desc": "TEXT FormElementTypeText\nTOGGLE FormElementTypeToggle\nTEXTAREA FormElementTypeTextArea\nHIDDEN FormElementTypeHidden\nPHONE FormElementTypePhone\nEMAIL FormElementTypeEmail\nSELECT FormElementTypeSelect\nDATE FormElementTypeDate\nSECTION FormElementTypeSection\nCOLUMNS FormElementTypeColumns"
          },
          "key": {
            "description": "Technical key.",
            "example": "department",
            "type": "string",
            "x-go-name": "Key"
          },
          "validations": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormElementValidationsSet"
            }
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "ConditionRule": {
        "properties": {
          "sourceType": {
            "description": "Defines the type of object being selected. It will be either a reference to a form input (by input name) or a form element (by technical key).\nINPUT ConditionRuleSourceTypeInput\nELEMENT ConditionRuleSourceTypeElement",
            "enum": [
              "INPUT",
              "ELEMENT"
            ],
            "example": "ELEMENT",
            "type": "string",
            "x-go-enum-desc": "INPUT ConditionRuleSourceTypeInput\nELEMENT ConditionRuleSourceTypeElement",
            "x-go-name": "SourceType"
          },
          "source": {
            "description": "Source - if the sourceType is ConditionRuleSourceTypeInput, the source type is the name of the form input to accept. However, if the sourceType is ConditionRuleSourceTypeElement,\nthe source is the name of a technical key of an element to retrieve its value.",
            "example": "department",
            "type": "string",
            "x-go-name": "Source"
          },
          "operator": {
            "description": "ConditionRuleComparisonOperatorType value.\nEQ ConditionRuleComparisonOperatorTypeEquals  This comparison operator compares the source and target for equality.\nNE ConditionRuleComparisonOperatorTypeNotEquals  This comparison operator compares the source and target for inequality.\nCO ConditionRuleComparisonOperatorTypeContains  This comparison operator searches the source to see whether it contains the value.\nNOT_CO ConditionRuleComparisonOperatorTypeNotContains\nIN ConditionRuleComparisonOperatorTypeIncludes  This comparison operator searches the source if it equals any of the values.\nNOT_IN ConditionRuleComparisonOperatorTypeNotIncludes\nEM ConditionRuleComparisonOperatorTypeEmpty\nNOT_EM ConditionRuleComparisonOperatorTypeNotEmpty\nSW ConditionRuleComparisonOperatorTypeStartsWith  Checks whether a string starts with another substring of the same string. This operator is case-sensitive.\nNOT_SW ConditionRuleComparisonOperatorTypeNotStartsWith\nEW ConditionRuleComparisonOperatorTypeEndsWith  Checks whether a string ends with another substring of the same string. This operator is case-sensitive.\nNOT_EW ConditionRuleComparisonOperatorTypeNotEndsWith",
            "enum": [
              "EQ",
              "NE",
              "CO",
              "NOT_CO",
              "IN",
              "NOT_IN",
              "EM",
              "NOT_EM",
              "SW",
              "NOT_SW",
              "EW",
              "NOT_EW"
            ],
            "example": "EQ",
            "type": "string",
            "x-go-enum-desc": "EQ ConditionRuleComparisonOperatorTypeEquals  This comparison operator compares the source and target for equality.\nNE ConditionRuleComparisonOperatorTypeNotEquals  This comparison operator compares the source and target for inequality.\nCO ConditionRuleComparisonOperatorTypeContains  This comparison operator searches the source to see whether it contains the value.\nNOT_CO ConditionRuleComparisonOperatorTypeNotContains\nIN ConditionRuleComparisonOperatorTypeIncludes  This comparison operator searches the source if it equals any of the values.\nNOT_IN ConditionRuleComparisonOperatorTypeNotIncludes\nEM ConditionRuleComparisonOperatorTypeEmpty\nNOT_EM ConditionRuleComparisonOperatorTypeNotEmpty\nSW ConditionRuleComparisonOperatorTypeStartsWith  Checks whether a string starts with another substring of the same string. This operator is case-sensitive.\nNOT_SW ConditionRuleComparisonOperatorTypeNotStartsWith\nEW ConditionRuleComparisonOperatorTypeEndsWith  Checks whether a string ends with another substring of the same string. This operator is case-sensitive.\nNOT_EW ConditionRuleComparisonOperatorTypeNotEndsWith",
            "x-go-name": "Operator"
          },
          "valueType": {
            "description": "ConditionRuleValueType type.\nSTRING ConditionRuleValueTypeString  This value is a static string.\nSTRING_LIST ConditionRuleValueTypeStringList  This value is an array of string values.\nINPUT ConditionRuleValueTypeInput  This value is a reference to a form input.\nELEMENT ConditionRuleValueTypeElement  This value is a reference to a form element (by technical key).\nLIST ConditionRuleValueTypeList\nBOOLEAN ConditionRuleValueTypeBoolean",
            "enum": [
              "STRING",
              "STRING_LIST",
              "INPUT",
              "ELEMENT",
              "LIST",
              "BOOLEAN"
            ],
            "example": "STRING",
            "type": "string",
            "x-go-enum-desc": "STRING ConditionRuleValueTypeString  This value is a static string.\nSTRING_LIST ConditionRuleValueTypeStringList   This value is an array of string values.\nINPUT ConditionRuleValueTypeInput  This value is a reference to a form input.\nELEMENT ConditionRuleValueTypeElement  This value is a reference to a form element (by technical key).\nLIST ConditionRuleValueTypeList\nBOOLEAN ConditionRuleValueTypeBoolean",
            "x-go-name": "ValueType"
          },
          "value": {
            "type": "string",
            "description": "Based on the ValueType.",
            "example": "Engineering",
            "x-go-name": "Value"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "ConditionEffect": {
        "description": "Effect produced by a condition.",
        "properties": {
          "effectType": {
            "description": "Type of effect to perform when the conditions are evaluated for this logic block.\nHIDE ConditionEffectTypeHide  Disables validations.\nSHOW ConditionEffectTypeShow  Enables validations.\nDISABLE ConditionEffectTypeDisable  Disables validations.\nENABLE ConditionEffectTypeEnable  Enables validations.\nREQUIRE ConditionEffectTypeRequire\nOPTIONAL ConditionEffectTypeOptional\nSUBMIT_MESSAGE ConditionEffectTypeSubmitMessage\nSUBMIT_NOTIFICATION ConditionEffectTypeSubmitNotification\nSET_DEFAULT_VALUE ConditionEffectTypeSetDefaultValue  This value is ignored on purpose.",
            "enum": [
              "HIDE",
              "SHOW",
              "DISABLE",
              "ENABLE",
              "REQUIRE",
              "OPTIONAL",
              "SUBMIT_MESSAGE",
              "SUBMIT_NOTIFICATION",
              "SET_DEFAULT_VALUE"
            ],
            "example": "HIDE",
            "type": "string",
            "x-go-enum-desc": "HIDE ConditionEffectTypeHide  Disables validations.\nSHOW ConditionEffectTypeShow  Enables validations.\nDISABLE ConditionEffectTypeDisable  Disables validations.\nENABLE ConditionEffectTypeEnable  Enables validations.\nREQUIRE ConditionEffectTypeRequire\nOPTIONAL ConditionEffectTypeOptional\nSUBMIT_MESSAGE ConditionEffectTypeSubmitMessage\nSUBMIT_NOTIFICATION ConditionEffectTypeSubmitNotification\nSET_DEFAULT_VALUE ConditionEffectTypeSetDefaultValue  This value is ignored on purpose.",
            "x-go-name": "EffectType"
          },
          "config": {
            "description": "Arbitrary map containing a configuration based on the EffectType.",
            "type": "object",
            "properties": {
              "defaultValueLabel": {
                "type": "string",
                "description": "Effect type's label.",
                "example": "Access to Remove"
              },
              "element": {
                "type": "string",
                "description": "Element's identifier.",
                "example": 8110662963316867
              }
            },
            "x-go-name": "Config"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormCondition": {
        "description": "Represent a form conditional.",
        "properties": {
          "ruleOperator": {
            "description": "ConditionRuleLogicalOperatorType value.\nAND ConditionRuleLogicalOperatorTypeAnd\nOR ConditionRuleLogicalOperatorTypeOr",
            "enum": [
              "AND",
              "OR"
            ],
            "example": "AND",
            "type": "string",
            "x-go-enum-desc": "AND ConditionRuleLogicalOperatorTypeAnd\nOR ConditionRuleLogicalOperatorTypeOr",
            "x-go-name": "RuleOperator"
          },
          "rules": {
            "description": "List of rules.",
            "items": {
              "$ref": "#/components/schemas/ConditionRule"
            },
            "type": "array",
            "x-go-name": "Rules"
          },
          "effects": {
            "description": "List of effects.",
            "items": {
              "$ref": "#/components/schemas/ConditionEffect"
            },
            "type": "array",
            "x-go-name": "Effects"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormDefinitionResponse": {
        "properties": {
          "id": {
            "description": "Unique guid identifying the form definition.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "FormDefinitionID"
          },
          "name": {
            "description": "Name of the form definition.",
            "example": "My form",
            "type": "string",
            "x-go-name": "Name"
          },
          "description": {
            "description": "Form definition's description.",
            "example": "My form description",
            "type": "string",
            "x-go-name": "Description"
          },
          "owner": {
            "$ref": "#/components/schemas/FormOwner"
          },
          "usedBy": {
            "description": "List of objects using the form definition. Whenever a system uses a form, the API reaches out to the form service to record that the system is currently using it.",
            "items": {
              "$ref": "#/components/schemas/FormUsedBy"
            },
            "type": "array",
            "x-go-name": "UsedBy"
          },
          "formInput": {
            "description": "List of form inputs required to create a form-instance object.",
            "items": {
              "$ref": "#/components/schemas/FormDefinitionInput"
            },
            "type": "array",
            "x-go-name": "FormInput"
          },
          "formElements": {
            "description": "List of nested form elements.",
            "items": {
              "$ref": "#/components/schemas/FormElement"
            },
            "type": "array",
            "x-go-name": "FormElements"
          },
          "formConditions": {
            "description": "Conditional logic that can dynamically modify the form as the recipient is interacting with it.",
            "items": {
              "$ref": "#/components/schemas/FormCondition"
            },
            "type": "array",
            "x-go-name": "FormConditions"
          },
          "created": {
            "description": "Created is the date the form definition was created",
            "example": "2023-07-12T20:14:57.74486Z",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Created"
          },
          "modified": {
            "description": "Modified is the last date the form definition was modified",
            "example": "2023-07-12T20:14:57.74486Z",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Modified"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "ListFormDefinitionsByTenantResponse": {
        "properties": {
          "count": {
            "description": "Count number of results.",
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "results": {
            "description": "List of FormDefinitionResponse items.",
            "items": {
              "$ref": "#/components/schemas/FormDefinitionResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ErrorMessage": {
        "title": "ErrorMessage is the standard API error response message type.",
        "type": "object",
        "properties": {
          "locale": {
            "description": "Locale is the current Locale",
            "example": "en-US",
            "type": "string",
            "x-go-name": "Locale"
          },
          "localeOrigin": {
            "description": "LocaleOrigin holds possible values of how the locale was selected",
            "example": "DEFAULT",
            "type": "string",
            "x-go-name": "LocaleOrigin"
          },
          "text": {
            "description": "Text is the actual text of the error message",
            "example": "This is an error",
            "type": "string",
            "x-go-name": "Text"
          }
        },
        "x-go-package": "github.com/sailpoint/atlas-go/atlas/web"
      },
      "Error": {
        "title": "Error is the standard API error response type.",
        "type": "object",
        "properties": {
          "detailCode": {
            "description": "DetailCode is the text of the status code returned",
            "example": "Internal Server Error",
            "type": "string",
            "x-go-name": "DetailCode"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "x-go-name": "Messages"
          },
          "trackingId": {
            "description": "TrackingID is the request tracking unique identifier",
            "example": "9cd03ef80e6a425eb6b11bdbb057cdb4",
            "type": "string",
            "x-go-name": "TrackingID"
          }
        },
        "x-go-package": "github.com/sailpoint/atlas-go/atlas/web"
      },
      "CreateFormDefinitionRequest": {
        "properties": {
          "description": {
            "description": "Description is the form definition description",
            "example": "My form description",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "x-go-name": "Description"
          },
          "formConditions": {
            "description": "FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form",
            "items": {
              "$ref": "#/components/schemas/FormCondition"
            },
            "type": "array",
            "x-go-name": "FormConditions"
          },
          "formElements": {
            "description": "FormElements is a list of nested form elements",
            "items": {
              "$ref": "#/components/schemas/FormElement"
            },
            "type": "array",
            "x-go-name": "FormElements"
          },
          "formInput": {
            "description": "FormInput is a list of form inputs that are required when creating a form-instance object",
            "items": {
              "$ref": "#/components/schemas/FormDefinitionInput"
            },
            "type": "array",
            "x-go-name": "FormInput"
          },
          "name": {
            "description": "Name is the form definition name",
            "example": "My form",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Name"
          },
          "owner": {
            "$ref": "#/components/schemas/FormOwner"
          },
          "usedBy": {
            "description": "UsedBy is a list of objects where when any system uses a particular form it reaches out to the form service to record it is currently being used",
            "items": {
              "$ref": "#/components/schemas/FormUsedBy"
            },
            "type": "array",
            "x-go-name": "UsedBy"
          }
        },
        "required": [
          "name",
          "owner"
        ],
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "Nil": {
        "title": "Nil represents the predeclared value nil.",
        "type": "object",
        "x-go-package": "go/types"
      },
      "Operation": {
        "title": "Operation is a single JSON-Patch step, such as a single 'add' operation.",
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {}
        },
        "x-go-package": "github.com/evanphx/json-patch"
      },
      "Patch": {
        "title": "Patch is an ordered collection of Operations.",
        "description": "Patch is an ordered collection of Operations.",
        "type": "array",
        "example": [
          {
            "op": "replace",
            "path": "/description",
            "value": "a new description"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Operation"
        },
        "x-go-package": "github.com/evanphx/json-patch"
      },
      "FormElementDynamicDataSourceConfig": {
        "properties": {
          "aggregationBucketField": {
            "description": "AggregationBucketField is the aggregation bucket field name",
            "example": "attributes.cloudStatus.exact",
            "type": "string",
            "x-go-name": "AggregationBucketField"
          },
          "indices": {
            "description": "Indices is a list of indices to use",
            "example": [
              "identities"
            ],
            "items": {
              "enum": [
                "accessprofiles",
                "accountactivities",
                "entitlements",
                "identities",
                "events",
                "roles",
                "*"
              ],
              "type": "string",
              "x-go-enum-desc": "accessprofiles SearchIndexAccessProfiles\naccountactivities SearchIndexAccountActivities\nentitlements SearchIndexEntitlements\nidentities SearchIndexIdentities\nevents SearchIndexEvents\nroles SearchIndexRoles\n* SearchIndexWildcard"
            },
            "type": "array",
            "x-go-name": "Indices"
          },
          "objectType": {
            "description": "ObjectType is a PreDefinedSelectOption value\nIDENTITY PreDefinedSelectOptionIdentity\nACCESS_PROFILE PreDefinedSelectOptionAccessProfile\nSOURCES PreDefinedSelectOptionSources\nROLE PreDefinedSelectOptionRole\nENTITLEMENT PreDefinedSelectOptionEntitlement",
            "enum": [
              "IDENTITY",
              "ACCESS_PROFILE",
              "SOURCES",
              "ROLE",
              "ENTITLEMENT"
            ],
            "example": "IDENTITY",
            "type": "string",
            "x-go-enum-desc": "IDENTITY PreDefinedSelectOptionIdentity\nACCESS_PROFILE PreDefinedSelectOptionAccessProfile\nSOURCES PreDefinedSelectOptionSources\nROLE PreDefinedSelectOptionRole\nENTITLEMENT PreDefinedSelectOptionEntitlement",
            "x-go-name": "ObjectType"
          },
          "query": {
            "description": "Query is a text",
            "example": "*",
            "type": "string",
            "x-go-name": "Query"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormElementDynamicDataSource": {
        "properties": {
          "config": {
            "$ref": "#/components/schemas/FormElementDynamicDataSourceConfig"
          },
          "dataSourceType": {
            "description": "DataSourceType is a FormElementDataSourceType value\nSTATIC FormElementDataSourceTypeStatic\nINTERNAL FormElementDataSourceTypeInternal\nSEARCH FormElementDataSourceTypeSearch\nFORM_INPUT FormElementDataSourceTypeFormInput",
            "enum": [
              "STATIC",
              "INTERNAL",
              "SEARCH",
              "FORM_INPUT"
            ],
            "example": "STATIC",
            "type": "string",
            "x-go-enum-desc": "STATIC FormElementDataSourceTypeStatic\nINTERNAL FormElementDataSourceTypeInternal\nSEARCH FormElementDataSourceTypeSearch\nFORM_INPUT FormElementDataSourceTypeFormInput",
            "x-go-name": "DataSourceType"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormElementPreviewRequest": {
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/FormElementDynamicDataSource"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormElementDataSourceConfigOptions": {
        "type": "object",
        "properties": {
          "label": {
            "description": "Label is the main label to display to the user when selecting this option",
            "type": "string",
            "example": "regression-test-access-request-07c55dd6-3056-430a-86b5-fccc395bb6c5",
            "x-go-name": "Label"
          },
          "subLabel": {
            "description": "SubLabel is the sub label to display below the label in diminutive styling to help describe or identify this option",
            "type": "string",
            "example": "",
            "x-go-name": "SubLabel"
          },
          "value": {
            "description": "Value is the value to save as an entry when the user selects this option",
            "type": "string",
            "example": "e96674448eba4ca1ba04eee999a8f3cd",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "PreviewDataSourceResponse": {
        "description": "PreviewDataSourceResponse is the response sent by `/form-definitions/{formDefinitionID}/data-source` endpoint",
        "properties": {
          "results": {
            "description": "Results holds a list of FormElementDataSourceConfigOptions items",
            "example": "{\"results\":[{\"label\":\"Alfred 255e71dfc6e\",\"subLabel\":\"Alfred.255e71dfc6e@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e16676\"},{\"label\":\"Alize eba9d4cd27da\",\"subLabel\":\"Alize.eba9d4cd27da@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2f1667c\"},{\"label\":\"Antonina 01f69c3ea\",\"subLabel\":\"Antonina.01f69c3ea@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2f9667e\"},{\"label\":\"Ardella 21e78ce155\",\"subLabel\":\"Ardella.21e78ce155@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e6667a\"},{\"label\":\"Arnaldo d8582b6e17\",\"subLabel\":\"Arnaldo.d8582b6e17@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced3426686\"},{\"label\":\"Aurelia admin24828\",\"subLabel\":\"Aurelia.admin24828@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e16674\"},{\"label\":\"Barbara 72ca418fdd\",\"subLabel\":\"Barbara.72ca418fdd@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2fb6680\"},{\"label\":\"Barbara ee1a2436ee\",\"subLabel\":\"Barbara.ee1a2436ee@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e56678\"},{\"label\":\"Baylee 652d72432f3\",\"subLabel\":\"Baylee.652d72432f3@testmail.identitysoon.com\",\"value\":\"2c91808582184782018227ced28b6aee\"},{\"label\":\"Brock e76b56ae4d49\",\"subLabel\":\"Brock.e76b56ae4d49@testmail.identitysoon.com\",\"value\":\"2c91808582184782018227ced28b6aef\"}]}",
            "items": {
              "$ref": "#/components/schemas/FormElementDataSourceConfigOptions"
            },
            "type": "array",
            "x-go-name": "Results"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormDefinitionSelfImportExportDto": {
        "type": "object",
        "description": "Self block for imported/exported object.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Imported/exported object's DTO type.",
            "enum": [
              "FORM_DEFINITION"
            ],
            "example": "FORM_DEFINITION"
          },
          "id": {
            "type": "string",
            "description": "Imported/exported object's ID.",
            "example": "2c9180835d191a86015d28455b4b232a"
          },
          "name": {
            "type": "string",
            "description": "Imported/exported object's display name.",
            "example": "Temporary User Level Permissions - Requester"
          }
        }
      },
      "FormDefinitionDynamicSchemaRequest": {
        "properties": {
          "attributes": {
            "properties": {
              "formDefinitionId": {
                "description": "FormDefinitionID is a unique guid identifying this form definition",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string",
                "x-go-name": "FormDefinitionID"
              }
            },
            "type": "object",
            "x-go-name": "Attributes"
          },
          "description": {
            "description": "Description is the form definition dynamic schema description text",
            "example": "A description",
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "description": "ID is a unique identifier",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "ID"
          },
          "type": {
            "description": "Type is the form definition dynamic schema type",
            "example": "action",
            "type": "string",
            "x-go-name": "Type"
          },
          "versionNumber": {
            "description": "VersionNumber is the form definition dynamic schema version number",
            "example": 1,
            "format": "int64",
            "type": "integer",
            "x-go-name": "VersionNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormDefinitionDynamicSchemaResponse": {
        "properties": {
          "outputSchema": {
            "additionalProperties": {},
            "description": "OutputSchema holds a JSON schema generated dynamically",
            "example": {
              "outputSchema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "additionalProperties": false,
                "properties": {
                  "firstName": {
                    "title": "First Name",
                    "type": "string"
                  },
                  "fullName": {
                    "title": "Full Name",
                    "type": "string"
                  },
                  "lastName": {
                    "title": "Last Name",
                    "type": "string"
                  },
                  "startDate": {
                    "format": "date-time",
                    "title": "Start Date",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "x-go-name": "OutputSchema"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormDefinitionFileUploadResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "Created is the date the file was uploaded",
            "example": "2023-07-12T20:14:57.74486Z",
            "x-go-name": "Created"
          },
          "fileId": {
            "type": "string",
            "description": "fileId is a unique ULID that serves as an identifier for the form definition file",
            "example": "01FHZXHK8PTP9FVK99Z66GXQTX.png",
            "x-go-name": "FileID"
          },
          "formDefinitionId": {
            "type": "string",
            "description": "FormDefinitionID is a unique guid identifying this form definition",
            "example": "00000000-0000-0000-0000-000000000000",
            "x-go-name": "FormDefinitionID"
          }
        },
        "x-go-package": "github.com/sailpoint/sp-forms/internal/rest/response"
      },
      "FormInstanceCreatedBy": {
        "properties": {
          "id": {
            "description": "ID is a unique identifier",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "ID"
          },
          "type": {
            "description": "Type is a form instance created by type enum value\nWORKFLOW_EXECUTION FormInstanceCreatedByTypeWorkflowExecution\nSOURCE FormInstanceCreatedByTypeSource",
            "enum": [
              "WORKFLOW_EXECUTION",
              "SOURCE"
            ],
            "example": "WORKFLOW_EXECUTION",
            "type": "string",
            "x-go-enum-desc": "WORKFLOW_EXECUTION FormInstanceCreatedByTypeWorkflowExecution\nSOURCE FormInstanceCreatedByTypeSource",
            "x-go-name": "Type"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormError": {
        "properties": {
          "key": {
            "description": "Key is the technical key",
            "example": "department",
            "type": "string",
            "x-go-name": "Key"
          },
          "messages": {
            "description": "Messages is a list of web.ErrorMessage items",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "type": "array",
            "x-go-name": "Messages"
          },
          "value": {
            "description": "Value is the value associated with a Key",
            "example": "Engineering",
            "x-go-name": "Value"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormInstanceRecipient": {
        "properties": {
          "id": {
            "description": "ID is a unique identifier",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "ID"
          },
          "type": {
            "description": "Type is a FormInstanceRecipientType value\nIDENTITY FormInstanceRecipientIdentity",
            "enum": [
              "IDENTITY"
            ],
            "example": "IDENTITY",
            "type": "string",
            "x-go-enum-desc": "IDENTITY FormInstanceRecipientIdentity",
            "x-go-name": "Type"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "FormInstanceResponse": {
        "properties": {
          "id": {
            "description": "Unique guid identifying this form instance",
            "example": "06a2d961-07fa-44d1-8d0a-2f6470e30fd2",
            "type": "string",
            "x-go-name": "FormInstanceID"
          },
          "expire": {
            "description": "Expire is the maximum amount of time that a form can be in progress. After this time is reached then the form will be moved to a CANCELED state automatically. The user will no longer be able to complete the submission. When a form instance is expires an audit log will be generated for that record",
            "example": "2023-08-12T20:14:57.74486Z",
            "type": "string",
            "x-go-name": "Expire"
          },
          "state": {
            "description": "State the state of the form instance\nASSIGNED FormInstanceStateAssigned\nIN_PROGRESS FormInstanceStateInProgress\nSUBMITTED FormInstanceStateSubmitted\nCOMPLETED FormInstanceStateCompleted\nCANCELLED FormInstanceStateCancelled",
            "enum": [
              "ASSIGNED",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "CANCELLED"
            ],
            "example": "ASSIGNED",
            "type": "string",
            "x-go-enum-desc": "ASSIGNED FormInstanceStateAssigned\nIN_PROGRESS FormInstanceStateInProgress\nSUBMITTED FormInstanceStateSubmitted\nCOMPLETED FormInstanceStateCompleted\nCANCELLED FormInstanceStateCancelled",
            "x-go-name": "State"
          },
          "standAloneForm": {
            "default": false,
            "description": "StandAloneForm is a boolean flag to indicate if this form should be available for users to complete via the standalone form UI or should this only be available to be completed by as an embedded form",
            "example": false,
            "type": "boolean",
            "x-go-name": "StandAloneForm"
          },
          "standAloneFormUrl": {
            "description": "StandAloneFormURL is the URL where this form may be completed by the designated recipients using the standalone form UI",
            "example": "https://my-org.identitynow.com/ui/d/forms/00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "StandAloneFormURL"
          },
          "createdBy": {
            "$ref": "#/components/schemas/FormInstanceCreatedBy"
          },
          "formDefinitionId": {
            "description": "FormDefinitionID is the id of the form definition that created this form",
            "example": "49841cb8-00a5-4fbd-9888-8bbb28d48331",
            "type": "string",
            "x-go-name": "FormDefinitionID"
          },
          "formInput": {
            "additionalProperties": {},
            "nullable": true,
            "description": "FormInput is an object of form input labels to value",
            "example": {
              "input1": "Sales"
            },
            "type": "object",
            "x-go-name": "FormInput"
          },
          "formElements": {
            "description": "FormElements is the configuration of the form, this would be a repeat of the fields from the form-config",
            "items": {
              "$ref": "#/components/schemas/FormElement"
            },
            "type": "array",
            "x-go-name": "FormElements"
          },
          "formData": {
            "nullable": true,
            "additionalProperties": true,
            "description": "FormData is the data provided by the form on submit. The data is in a key -> value map",
            "example": {
              "department": "Engineering"
            },
            "type": "object",
            "x-go-name": "FormData"
          },
          "formErrors": {
            "description": "FormErrors is an array of form validation errors from the last time the form instance was transitioned to the SUBMITTED state. If the form instance had validation errors then it would be moved to the IN PROGRESS state where the client can retrieve these errors",
            "items": {
              "$ref": "#/components/schemas/FormError"
            },
            "type": "array",
            "x-go-name": "FormErrors"
          },
          "formConditions": {
            "description": "FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form",
            "items": {
              "$ref": "#/components/schemas/FormCondition"
            },
            "type": "array",
            "x-go-name": "FormConditions"
          },
          "created": {
            "description": "Created is the date the form instance was assigned",
            "example": "2023-07-12T20:14:57.74486Z",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Created"
          },
          "modified": {
            "description": "Modified is the last date the form instance was modified",
            "example": "2023-07-12T20:14:57.74486Z",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Modified"
          },
          "recipients": {
            "description": "Recipients references to the recipient of a form. The recipients are those who are responsible for filling out a form and completing it",
            "items": {
              "$ref": "#/components/schemas/FormInstanceRecipient"
            },
            "type": "array",
            "x-go-name": "Recipients"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "CreateFormInstanceRequest": {
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/FormInstanceCreatedBy"
          },
          "expire": {
            "description": "Expire is required",
            "example": "2023-08-12T20:14:57.74486Z",
            "type": "string",
            "x-go-name": "Expire"
          },
          "formDefinitionId": {
            "description": "FormDefinitionID is the id of the form definition that created this form",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string",
            "x-go-name": "FormDefinitionID"
          },
          "formInput": {
            "additionalProperties": true,
            "description": "FormInput is an object of form input labels to value",
            "example": {
              "input1": "Sales"
            },
            "type": "object",
            "x-go-name": "FormInput"
          },
          "recipients": {
            "description": "Recipients is required",
            "items": {
              "$ref": "#/components/schemas/FormInstanceRecipient"
            },
            "type": "array",
            "x-go-name": "Recipients"
          },
          "standAloneForm": {
            "default": false,
            "description": "StandAloneForm is a boolean flag to indicate if this form should be available for users to complete via the standalone form UI or should this only be available to be completed by as an embedded form",
            "example": false,
            "type": "boolean",
            "x-go-name": "StandAloneForm"
          },
          "state": {
            "description": "State is required, if not present initial state is FormInstanceStateAssigned\nASSIGNED FormInstanceStateAssigned\nIN_PROGRESS FormInstanceStateInProgress\nSUBMITTED FormInstanceStateSubmitted\nCOMPLETED FormInstanceStateCompleted\nCANCELLED FormInstanceStateCancelled",
            "enum": [
              "ASSIGNED",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "CANCELLED"
            ],
            "example": "ASSIGNED",
            "type": "string",
            "x-go-enum-desc": "ASSIGNED FormInstanceStateAssigned\nIN_PROGRESS FormInstanceStateInProgress\nSUBMITTED FormInstanceStateSubmitted\nCOMPLETED FormInstanceStateCompleted\nCANCELLED FormInstanceStateCancelled",
            "x-go-name": "State"
          },
          "ttl": {
            "description": "TTL an epoch timestamp in seconds, it most be in seconds or dynamodb will ignore it\nSEE: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-before-you-start.html",
            "example": 1571827560,
            "format": "int64",
            "type": "integer",
            "x-go-name": "TTL"
          }
        },
        "required": [
          "expire",
          "recipients",
          "createdBy",
          "formDefinitionId"
        ],
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "ListFormElementDataByElementIDResponse": {
        "properties": {
          "results": {
            "description": "Results holds a list of FormElementDataSourceConfigOptions items",
            "example": "{\"results\":[{\"label\":\"Alfred 255e71dfc6e\",\"subLabel\":\"Alfred.255e71dfc6e@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e16676\"},{\"label\":\"Alize eba9d4cd27da\",\"subLabel\":\"Alize.eba9d4cd27da@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2f1667c\"},{\"label\":\"Antonina 01f69c3ea\",\"subLabel\":\"Antonina.01f69c3ea@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2f9667e\"},{\"label\":\"Ardella 21e78ce155\",\"subLabel\":\"Ardella.21e78ce155@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e6667a\"},{\"label\":\"Arnaldo d8582b6e17\",\"subLabel\":\"Arnaldo.d8582b6e17@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced3426686\"},{\"label\":\"Aurelia admin24828\",\"subLabel\":\"Aurelia.admin24828@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e16674\"},{\"label\":\"Barbara 72ca418fdd\",\"subLabel\":\"Barbara.72ca418fdd@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2fb6680\"},{\"label\":\"Barbara ee1a2436ee\",\"subLabel\":\"Barbara.ee1a2436ee@testmail.identitysoon.com\",\"value\":\"2c918084821847c5018227ced2e56678\"},{\"label\":\"Baylee 652d72432f3\",\"subLabel\":\"Baylee.652d72432f3@testmail.identitysoon.com\",\"value\":\"2c91808582184782018227ced28b6aee\"},{\"label\":\"Brock e76b56ae4d49\",\"subLabel\":\"Brock.e76b56ae4d49@testmail.identitysoon.com\",\"value\":\"2c91808582184782018227ced28b6aef\"}]}",
            "items": {
              "$ref": "#/components/schemas/FormElementDataSourceConfigOptions"
            },
            "type": "array",
            "x-go-name": "Results"
          }
        },
        "type": "object",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "PreDefinedSelectOption": {
        "type": "string",
        "description": "PreDefinedSelectOption pre-defined select options",
        "example": "IDENTITY",
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "ListPredefinedSelectOptionsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results holds a list of PreDefinedSelectOption items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreDefinedSelectOption"
            },
            "x-go-name": "Results"
          }
        },
        "x-go-package": "github.com/sailpoint/sp-forms/domain"
      },
      "AccessRequestIdentityMetrics": {
        "type": "object",
        "title": "Access Request Identity Metrics",
        "properties": {
          "identitiesWithAccess": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "A count of the provided manager's direct reports that have already been granted the access item in question.",
            "example": 8
          },
          "identitiesWithActivity": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "A count of the provided manager's direct reports that have activity within the associated source.",
            "example": 5
          },
          "totalIdentities": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Total number of identities who share a manager with the identity requesting access.",
            "example": 10
          },
          "squadAvailable": {
            "type": "boolean",
            "default": false,
            "description": "True if the manager's ID can be found. False if the manager's ID cannot be found.",
            "example": true
          },
          "validActivityObject": {
            "type": "boolean",
            "default": false,
            "description": "True if the requested access item is associated with a single Activity Data Insights connector source.  False if the requested access item type is a role. If it's a role, it matches to multiple sources, so a single relevant source can't be determined for activity metrics.",
            "example": true
          },
          "activitySourceConfigured": {
            "type": "boolean",
            "default": false,
            "description": "True if the Activity Data Insights connector is configured for the source associated with the requested access item. False if the matching Activity Data Insights connector is not configured.",
            "example": true
          },
          "requestedObjectActive": {
            "type": "boolean",
            "default": false,
            "description": "True if the requested access item exists and is available. False if the requested access item is either missing or deleted.",
            "example": true
          }
        }
      },
      "ManualDiscoverApplicationsTemplate": {
        "type": "object",
        "title": "Manual Discover Applications Template",
        "properties": {
          "application_name": {
            "type": "string",
            "description": "Name of the example application.",
            "example": "Example Application"
          },
          "description": {
            "type": "string",
            "description": "Description of the example application.",
            "example": "Example Description"
          }
        }
      },
      "ManualDiscoverApplications": {
        "type": "object",
        "title": "Manual Discover Applications",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The CSV file to upload containing `application_name` and `description` columns. Each row represents an application to be discovered.",
            "example": "application_name,description\n\"Sample App\",\"This is a sample description for Sample App.\"\n\"Another App\",\"Description for Another App.\""
          }
        },
        "required": [
          "file"
        ]
      },
      "SlimDiscoveredApplications": {
        "type": "object",
        "description": "Discovered applications",
        "title": "Slim Discovered Application",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the discovered application.",
            "example": "2d9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Name of the discovered application.",
            "example": "ExampleApp"
          },
          "discoverySource": {
            "type": "string",
            "description": "Source from which the application was discovered.",
            "example": "csv"
          },
          "discoveredVendor": {
            "type": "string",
            "description": "The vendor associated with the discovered application.",
            "example": "ExampleVendor"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the discovered application.",
            "example": "An application for managing examples."
          },
          "recommendedConnectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of recommended connectors for the application.",
            "example": [
              "ConnectorA",
              "ConnectorB"
            ]
          },
          "discoveredAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the application was last received via an entitlement aggregation invocation  or a manual csv upload, in ISO 8601 format.",
            "example": "2023-01-01T12:00:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the application was first discovered, in ISO 8601 format.",
            "example": "2023-01-01T12:00:00Z"
          },
          "status": {
            "type": "string",
            "description": "The status of an application within the discovery source.\n\nBy default this field is set to \"ACTIVE\" when the application is discovered.\n\nIf an application has been deleted from within the discovery source, the status will be set to \"INACTIVE\".",
            "example": "ACTIVE"
          }
        }
      },
      "FullDiscoveredApplications": {
        "type": "object",
        "description": "Discovered applications with their respective associated sources",
        "title": "Discovered Application",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the discovered application.",
            "example": "2d9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Name of the discovered application.",
            "example": "ExampleApp"
          },
          "discoverySource": {
            "type": "string",
            "description": "Source from which the application was discovered.",
            "example": "csv"
          },
          "discoveredVendor": {
            "type": "string",
            "description": "The vendor associated with the discovered application.",
            "example": "ExampleVendor"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the discovered application.",
            "example": "An application for managing examples."
          },
          "recommendedConnectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of recommended connectors for the application.",
            "example": [
              "ConnectorA",
              "ConnectorB"
            ]
          },
          "discoveredAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the application was last received via an entitlement aggregation invocation  or a manual csv upload, in ISO 8601 format.",
            "example": "2023-01-01T12:00:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the application was first discovered, in ISO 8601 format.",
            "example": "2023-01-01T12:00:00Z"
          },
          "status": {
            "type": "string",
            "description": "The status of an application within the discovery source.\n\nBy default this field is set to \"ACTIVE\" when the application is discovered.\n\nIf an application has been deleted from within the discovery source, the status will be set to \"INACTIVE\".",
            "example": "ACTIVE"
          },
          "associatedSources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of associated sources related to this discovered application.",
            "example": [
              "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923",
              "a0303682-5e4a-44f7-bdc2-6ce6112549c1"
            ]
          }
        }
      },
      "JsonPatchOperations": {
        "type": "object",
        "description": "A limited JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace"
            ],
            "example": "replace"
          },
          "path": {
            "type": "string",
            "description": "A string representing the target path to an element to be affected by the operation",
            "example": "/dismissed"
          },
          "value": {
            "oneOf": [
              {
                "type": "string",
                "example": "New description",
                "title": "string"
              },
              {
                "type": "boolean",
                "example": true,
                "title": "boolean"
              },
              {
                "type": "array",
                "title": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    }
                  ],
                  "example": [
                    "4e2d7605-833f-4c34-8d03-5b2c7d2f4f66",
                    "f9b7e2ce-aced-4117-a95f-4ffad8b33989",
                    "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f"
                  ]
                }
              }
            ],
            "description": "The value to be used for the operation, required for \"add\" and \"replace\" operations",
            "example": true
          }
        }
      },
      "VendorConnectorMapping": {
        "type": "object",
        "title": "Vendor Connector Mapping",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the vendor-connector mapping.",
            "example": "78733556-9ea3-4f59-bf69-e5cd92b011b4"
          },
          "vendor": {
            "type": "string",
            "description": "The name of the vendor.",
            "example": "Example vendor"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector.",
            "example": "Example connector"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The creation timestamp of the mapping.",
            "example": "2024-03-13T12:56:19.391294Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The identifier of the user who created the mapping.",
            "example": "admin"
          },
          "updatedAt": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Time": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the mapping was last updated, represented in ISO 8601 format.",
                "example": "2024-03-14T12:56:19.391294Z"
              },
              "Valid": {
                "type": "boolean",
                "description": "A flag indicating if the 'Time' field is set and valid.",
                "default": false,
                "example": true
              }
            },
            "description": "An object representing the nullable timestamp of the last update."
          },
          "updatedBy": {
            "type": "object",
            "nullable": true,
            "properties": {
              "String": {
                "type": "string",
                "description": "The identifier of the user who last updated the mapping, if available.",
                "example": "user-67891"
              },
              "Valid": {
                "type": "boolean",
                "description": "A flag indicating if the 'String' field is set and valid.",
                "default": false,
                "example": true
              }
            },
            "description": "An object representing the nullable identifier of the user who last updated the mapping."
          },
          "deletedAt": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Time": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the mapping was deleted, represented in ISO 8601 format, if applicable.",
                "example": "0001-01-01T00:00:00Z"
              },
              "Valid": {
                "type": "boolean",
                "description": "A flag indicating if the 'Time' field is set and valid, i.e., if the mapping has been deleted.",
                "default": false,
                "example": false
              }
            },
            "description": "An object representing the nullable timestamp of when the mapping was deleted."
          },
          "deletedBy": {
            "type": "object",
            "nullable": true,
            "properties": {
              "String": {
                "type": "string",
                "description": "The identifier of the user who deleted the mapping, if applicable.",
                "example": ""
              },
              "Valid": {
                "type": "boolean",
                "description": "A flag indicating if the 'String' field is set and valid, i.e., if the mapping has been deleted.",
                "default": false,
                "example": false
              }
            },
            "description": "An object representing the nullable identifier of the user who deleted the mapping."
          }
        }
      },
      "SedBatchStats": {
        "description": "Sed Batch Stats",
        "type": "object",
        "title": "Sed Batch Stats",
        "properties": {
          "batchComplete": {
            "description": "batch complete",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "batchId": {
            "description": "batch Id",
            "format": "uuid",
            "type": "string",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          },
          "discoveredCount": {
            "description": "discovered count",
            "format": "int64",
            "type": "integer",
            "example": 100
          },
          "discoveryComplete": {
            "description": "discovery complete",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "processedCount": {
            "description": "processed count",
            "format": "int64",
            "example": 100,
            "type": "integer"
          }
        }
      },
      "Sed": {
        "description": "Suggested Entitlement Description",
        "type": "object",
        "title": "Sed",
        "properties": {
          "Name": {
            "type": "string",
            "description": "name of the entitlement",
            "example": "BatchInvoiceProcessing"
          },
          "approved_by": {
            "type": "string",
            "description": "entitlement approved by",
            "example": "2c918086-76de-afbf-0176-f6d28f65565a"
          },
          "approved_type": {
            "type": "string",
            "description": "entitlement approved type",
            "example": "admin"
          },
          "approved_when": {
            "format": "date-time",
            "type": "string",
            "example": "2024-03-22 16:32:16.308857",
            "description": "entitlement approved then"
          },
          "attribute": {
            "type": "string",
            "description": "entitlement attribute",
            "example": "Role"
          },
          "description": {
            "type": "string",
            "description": "description of entitlement",
            "example": "This entitlement allows automated processing of invoices in batches on a scheduled basis to streamline accounts payable procedures."
          },
          "displayName": {
            "type": "string",
            "description": "entitlement display name",
            "example": "AWS-Cloud-Billing"
          },
          "id": {
            "format": "uuid",
            "type": "string",
            "description": "sed id",
            "example": "ead281ee-12a9-40ac-9534-36b5d7d65d53"
          },
          "sourceId": {
            "type": "string",
            "description": "entitlement source id",
            "example": "103f567b93ee49b991c40f9412f87643"
          },
          "sourceName": {
            "type": "string",
            "description": "entitlement source name",
            "example": "IDN Salesforce"
          },
          "status": {
            "type": "string",
            "description": "entitlement status",
            "example": "suggested"
          },
          "suggestedDescription": {
            "type": "string",
            "description": "llm suggested entitlement description",
            "example": "This entitlement allows automated processing of invoices in batches on a scheduled basis to streamline accounts payable"
          },
          "type": {
            "type": "string",
            "description": "entitlement type",
            "example": "group"
          },
          "value": {
            "type": "string",
            "description": "entitlement value",
            "example": "group"
          }
        }
      },
      "SearchCriteria": {
        "description": "Represents the search criteria for querying entitlements.",
        "type": "object",
        "title": "Search Criteria",
        "properties": {
          "indices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of indices to search within. Must contain exactly one item, typically \"entitlements\".",
            "example": [
              "entitlements"
            ]
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of filter, e.g., \"TERMS\" or \"RANGE\".",
                  "example": "TERMS"
                },
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Terms to filter by (for \"TERMS\" type).",
                  "example": [
                    "active",
                    "inactive"
                  ]
                },
                "range": {
                  "type": "object",
                  "properties": {
                    "lower": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The lower bound value.",
                          "example": "10"
                        },
                        "inclusive": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the lower bound is inclusive.",
                          "example": true
                        }
                      }
                    },
                    "upper": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The upper bound value.",
                          "example": "20"
                        },
                        "inclusive": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the upper bound is inclusive.",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "A map of filters applied to the search. Keys are filter names, and values are filter definitions.",
            "example": {
              "status": {
                "type": "TERMS",
                "terms": [
                  "active",
                  "inactive"
                ]
              }
            }
          },
          "query": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "A structured query for advanced search.",
                "example": "status:active"
              }
            }
          },
          "queryType": {
            "type": "string",
            "description": "Specifies the type of query. Must be \"TEXT\" if `textQuery` is used.",
            "example": "TEXT"
          },
          "textQuery": {
            "type": "object",
            "properties": {
              "terms": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Terms to search for.",
                "example": [
                  "admin",
                  "user"
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Fields to search within.",
                "example": [
                  "role",
                  "name"
                ]
              },
              "matchAny": {
                "type": "boolean",
                "default": false,
                "description": "Whether to match any of the terms.",
                "example": true
              }
            }
          },
          "includeNested": {
            "type": "boolean",
            "default": false,
            "description": "Whether to include nested objects in the search results.",
            "example": true
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies the sorting order for the results.",
            "example": [
              "name:asc",
              "createdAt:desc"
            ]
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Used for pagination to fetch results after a specific point.",
            "example": [
              "12345",
              "67890"
            ]
          }
        },
        "required": [
          "indices"
        ]
      },
      "SedBatchRequest": {
        "description": "Sed Batch Request",
        "type": "object",
        "title": "Sed Batch Request",
        "minProperties": 1,
        "properties": {
          "entitlements": {
            "description": "list of entitlement ids",
            "type": "array",
            "nullable": true,
            "minItems": 1,
            "items": {
              "type": "string",
              "example": "016629d1-1d25-463f-97f3-c6686846650"
            }
          },
          "seds": {
            "description": "list of sed ids",
            "type": "array",
            "nullable": true,
            "minItems": 1,
            "items": {
              "type": "string",
              "example": "016629d1-1d25-463f-97f3-c6686846650"
            }
          },
          "searchCriteria": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SearchCriteria"
            },
            "nullable": true,
            "description": "Search criteria for the batch request."
          }
        }
      },
      "SedBatchResponse": {
        "description": "Sed Batch Response",
        "type": "object",
        "title": "Sed Batch Response",
        "properties": {
          "batchId": {
            "description": "BatchId that groups all the ids together",
            "format": "uuid",
            "type": "string",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          }
        }
      },
      "SedApproval": {
        "description": "Sed Approval Request Body",
        "type": "object",
        "title": "Sed Approval",
        "properties": {
          "items": {
            "description": "List of SED id's",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          }
        }
      },
      "SedApprovalStatus": {
        "description": "SED Approval Status",
        "type": "object",
        "title": "Sed Approval Status",
        "properties": {
          "failedReason": {
            "description": "failed reason will be display if status is failed",
            "type": "string",
            "example": "invalid status"
          },
          "id": {
            "description": "Sed id",
            "format": "uuid",
            "type": "string",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          },
          "status": {
            "description": "SUCCESS | FAILED",
            "example": "SUCCESS",
            "type": "string"
          }
        }
      },
      "SedAssignee": {
        "description": "Sed Assignee",
        "type": "object",
        "title": "Sed Assignee",
        "properties": {
          "type": {
            "description": "Type of assignment\nWhen value is PERSONA, the value MUST be SOURCE_OWNER or ENTITLEMENT_OWNER\nIDENTITY SED_ASSIGNEE_IDENTITY_TYPE\nGROUP SED_ASSIGNEE_GROUP_TYPE\nSOURCE_OWNER SED_ASSIGNEE_SOURCE_OWNER_TYPE\nENTITLEMENT_OWNER SED_ASSIGNEE_ENTITLEMENT_OWNER_TYPE",
            "enum": [
              "IDENTITY",
              "GROUP",
              "SOURCE_OWNER",
              "ENTITLEMENT_OWNER"
            ],
            "type": "string",
            "example": "SOURCE_OWNER"
          },
          "value": {
            "description": "Identity or Group identifier\nEmpty when using source/entitlement owner personas",
            "type": "string",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          }
        },
        "required": [
          "type"
        ]
      },
      "SedAssignment": {
        "description": "Sed Assignment",
        "type": "object",
        "title": "Sed Assignment",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/SedAssignee"
          },
          "items": {
            "description": "List of SED id's",
            "items": {
              "format": "uuid",
              "type": "string",
              "example": "016629d1-1d25-463f-97f3-c6686846650"
            },
            "type": "array"
          }
        }
      },
      "SedAssignmentResponse": {
        "description": "Sed Assignment Response",
        "type": "object",
        "title": "Sed Assignment Response",
        "properties": {
          "batchId": {
            "description": "BatchId that groups all the ids together",
            "format": "uuid",
            "type": "string",
            "example": "016629d1-1d25-463f-97f3-c6686846650"
          }
        }
      },
      "SedPatch": {
        "description": "Patch for Suggested Entitlement Description",
        "type": "object",
        "title": "Sed Patch",
        "properties": {
          "op": {
            "description": "desired operation",
            "type": "string",
            "example": "replace"
          },
          "path": {
            "description": "field to be patched",
            "type": "string",
            "example": "status"
          },
          "value": {
            "description": "value to replace with",
            "example": "approved"
          }
        }
      },
      "Launcher": {
        "type": "object",
        "title": "Launcher",
        "required": [
          "id",
          "created",
          "modified",
          "owner",
          "name",
          "description",
          "disabled",
          "type",
          "config"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the Launcher",
            "example": "1b630bed-0941-4792-a712-57a5868ca34d",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "description": "Date the Launcher was created",
            "example": "2024-04-16T20:07:30.601016489Z",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "Date the Launcher was last modified",
            "example": "2024-04-17T18:02:07.320143194Z",
            "format": "date-time"
          },
          "owner": {
            "type": "object",
            "description": "Owner of the Launcher",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Owner type",
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Owner ID",
                "example": "123180847373330f0173c7e1756b6890"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the Launcher, limited to 255 characters",
            "example": "Group Create"
          },
          "description": {
            "type": "string",
            "description": "Description of the Launcher, limited to 2000 characters",
            "example": "Create a new Active Directory Group"
          },
          "type": {
            "type": "string",
            "description": "Launcher type",
            "example": "INTERACTIVE_PROCESS",
            "enum": [
              "INTERACTIVE_PROCESS"
            ]
          },
          "disabled": {
            "type": "boolean",
            "description": "State of the Launcher",
            "example": false
          },
          "reference": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of Launcher reference",
                "example": "WORKFLOW",
                "enum": [
                  "WORKFLOW"
                ]
              },
              "id": {
                "type": "string",
                "description": "ID of Launcher reference",
                "example": "2fd6ff94-2081-4d29-acbc-83a0a2f744a5"
              }
            }
          },
          "config": {
            "type": "string",
            "description": "JSON configuration associated with this Launcher, restricted to a max size of 4KB\n",
            "example": "{\"workflowId\" : \"6b42d9be-61b6-46af-827e-ea29ba8aa3d9\"}",
            "pattern": "^\\{\\}$"
          }
        }
      },
      "LauncherRequest": {
        "type": "object",
        "title": "Launcher Request",
        "required": [
          "name",
          "description",
          "type",
          "disabled",
          "config"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Launcher, limited to 255 characters",
            "example": "Group Create"
          },
          "description": {
            "type": "string",
            "description": "Description of the Launcher, limited to 2000 characters",
            "example": "Create a new Active Directory Group"
          },
          "type": {
            "type": "string",
            "description": "Launcher type",
            "example": "INTERACTIVE_PROCESS",
            "enum": [
              "INTERACTIVE_PROCESS"
            ]
          },
          "disabled": {
            "type": "boolean",
            "description": "State of the Launcher",
            "example": false
          },
          "reference": {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of Launcher reference",
                "example": "WORKFLOW",
                "enum": [
                  "WORKFLOW"
                ]
              },
              "id": {
                "type": "string",
                "description": "ID of Launcher reference",
                "example": "2fd6ff94-2081-4d29-acbc-83a0a2f744a5"
              }
            }
          },
          "config": {
            "type": "string",
            "description": "JSON configuration associated with this Launcher, restricted to a max size of 4KB\n",
            "example": "{\"workflowId\" : \"6b42d9be-61b6-46af-827e-ea29ba8aa3d9\"}",
            "pattern": "^\\{\\}$"
          }
        }
      },
      "FieldDetails": {
        "type": "object",
        "title": "Field Details",
        "allOf": [
          {
            "$ref": "#/components/schemas/FormItemDetails"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display name of the field",
                "example": "Field 1"
              },
              "displayType": {
                "type": "string",
                "description": "Type of the field to display",
                "example": "checkbox"
              },
              "required": {
                "type": "boolean",
                "description": "True if the field is required"
              },
              "allowedValuesList": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of allowed values for the field",
                "example": [
                  {
                    "Val1Display": null,
                    "Val1Value": null
                  },
                  {
                    "Val2Display": null,
                    "Val2Value": null
                  }
                ]
              },
              "value": {
                "type": "object",
                "description": "Value of the field"
              }
            }
          }
        ]
      },
      "FormSubmitted": {
        "title": "Form Submitted",
        "type": "object",
        "required": [
          "submittedAt",
          "tenantId",
          "formInstanceId",
          "formDefinitionId",
          "name",
          "createdBy",
          "submittedBy",
          "formData"
        ],
        "properties": {
          "submittedAt": {
            "type": "date-time",
            "description": "Date and time when the user submitted the form.",
            "example": "2020-06-29T22:01:50.474Z"
          },
          "tenantId": {
            "type": "string",
            "description": "ISC tenant's unique identifier.",
            "example": "2c9180845d1edece015d27a9717c3e19"
          },
          "formInstanceId": {
            "type": "string",
            "description": "Form instance's unique identifier.",
            "example": "2c9180835d2e5168015d32f890ca1582"
          },
          "formDefinitionId": {
            "type": "string",
            "description": "Form definition's unique identifier.",
            "example": "2c9180835d2e5168015d32f890ca1581"
          },
          "name": {
            "type": "string",
            "description": "Form's name.",
            "example": "Open Service Request"
          },
          "createdBy": {
            "type": "object",
            "description": "Origin of the form creation.",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Form creation origin's type.",
                "enum": [
                  "WORKFLOW_EXECUTION",
                  "SOURCE"
                ],
                "example": "WORKFLOW_EXECUTION"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the origin of the form creation.",
                "example": "2c9180845d1edece015d27a9717c3e19"
              }
            }
          },
          "submittedBy": {
            "type": "object",
            "description": "Identity who submitted the form.",
            "required": [
              "type",
              "id",
              "name"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "DTO type of the identity who submitted the form.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the identity who submitted the form.",
                "example": "2c9180845d1edece015d27a9717c3e19"
              },
              "name": {
                "type": "string",
                "description": "Name of the identity who submitted the form.",
                "example": "Rob.Robertson"
              }
            }
          },
          "formData": {
            "type": "object",
            "description": "Data in the submitted form.",
            "nullable": true,
            "additionalProperties": true,
            "example": {
              "department": "IT",
              "requestType": "New Laptop",
              "laptop": "New Laptop type for Engineer",
              "comments": "My laptop is running slowly, and I need to get a shiny new laptop to get my work done. Thanks!"
            }
          }
        }
      },
      "OutlierDetected": {
        "title": "Outlier Detected",
        "type": "object",
        "required": [
          "identity",
          "outlierType",
          "score"
        ],
        "properties": {
          "identity": {
            "required": [
              "id",
              "type",
              "name"
            ],
            "type": "object",
            "description": "Identity with unusual access, relative to its peers.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Identity's DTO type.",
                "enum": [
                  "IDENTITY"
                ],
                "example": "IDENTITY"
              },
              "id": {
                "type": "string",
                "description": "Identity's unique ID.",
                "example": "2c7180a46faadee4016fb4e018c20642"
              },
              "name": {
                "type": "string",
                "description": "Identity's name.",
                "example": "Michael Michaels"
              }
            }
          },
          "outlierType": {
            "type": "string",
            "description": "Identity's outlier type.",
            "enum": [
              "LOW_SIMILARITY"
            ],
            "example": "LOW_SIMILARITY"
          },
          "score": {
            "type": "number",
            "description": "Dissimilarity score that determines whether the identity is an outlier, ranging from `0.0` to `1.0`. The higher the score, the more likely the identity is an outlier.",
            "format": "decimal",
            "example": 0.82
          }
        }
      }
    },
    "parameters": {
      "offset": {
        "in": "query",
        "name": "offset",
        "description": "Offset into the full result set. Usually specified with *limit* to paginate through the results.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
        "required": false,
        "example": 0,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "default": 0
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "description": "Max number of results to return.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
        "required": false,
        "example": 250,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 250,
          "default": 250
        }
      },
      "count": {
        "in": "query",
        "name": "count",
        "description": "If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.\n\nSince requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.\n\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
        "required": false,
        "example": true,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "limit50": {
        "in": "query",
        "name": "limit",
        "description": "Note that for this API the maximum value for limit is 50.\nSee [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.",
        "required": false,
        "example": 50,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 50,
          "default": 50
        }
      }
    },
    "responses": {
      "202": {
        "description": "Accepted - Returned if the request was successfully accepted into the system.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "204": {
        "description": "No content - indicates the request was successful but there is no content to be returned in the response."
      },
      "400": {
        "description": "Client Error - Returned if the request body is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseDto"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - Returned if there is no authorization header, or if the JWT token is expired.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "description": "A message describing the error",
                  "example": "JWT validation failed: JWT is expired"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden - Returned if the user you are running as, doesn't have access to this end-point.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseDto"
            },
            "examples": {
              "403": {
                "summary": "An example of a 403 response object",
                "value": {
                  "detailCode": "403 Forbidden",
                  "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                  "messages": [
                    {
                      "locale": "en-US",
                      "localeOrigin": "DEFAULT",
                      "text": "The server understood the request but refuses to authorize it."
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found - returned if the request URL refers to a resource or object that does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseDto"
            },
            "examples": {
              "404": {
                "summary": "An example of a 404 response object",
                "value": {
                  "detailCode": "404 Not found",
                  "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                  "messages": [
                    {
                      "locale": "en-US",
                      "localeOrigin": "DEFAULT",
                      "text": "The server did not find a current representation for the target resource."
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "405": {
        "description": "Method Not Allowed - indicates that the server knows the request method, but the target resource doesn't support this method.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorName": {
                  "description": "A message describing the error",
                  "example": "NotSupportedException"
                },
                "errorMessage": {
                  "description": "Description of the error",
                  "example": "Cannot consume content type"
                },
                "trackingId": {
                  "type": "string",
                  "description": "Unique tracking id for the error.",
                  "example": "e7eab60924f64aa284175b9fa3309599"
                }
              }
            }
          }
        }
      },
      "412": {
        "description": "Precondition Failed - Returned in response if API/Feature not enabled for an organization.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "A message describing the error",
                  "example": " API/Feature not enabled for your organization."
                }
              }
            }
          }
        }
      },
      "429": {
        "description": "Too Many Requests - Returned in response to too many requests in a given period of time - rate limited. The Retry-After header in the response includes how long to wait before trying again.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "A message describing the error",
                  "example": " Rate Limit Exceeded "
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - Returned if there is an unexpected error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseDto"
            },
            "examples": {
              "500": {
                "summary": "An example of a 500 response object",
                "value": {
                  "detailCode": "500.0 Internal Fault",
                  "trackingId": "b21b1f7ce4da4d639f2c62a57171b427",
                  "messages": [
                    {
                      "locale": "en-US",
                      "localeOrigin": "DEFAULT",
                      "text": "An internal fault occurred."
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "SlimCampaigns": {
        "description": "List of Slim Campaigns that would result from not specifying *detail* or specifying SLIM",
        "value": [
          {
            "id": "2c918086719eec070171a7e3355a360a",
            "name": "Manager Review",
            "description": "A review of everyone's access by their manager.",
            "deadline": "2020-12-25T06:00:00.123Z",
            "type": "MANAGER",
            "status": "ACTIVE",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "created": "2022-08-02T20:29:51.065Z",
            "totalCertifications": 10,
            "completedCertifications": 3,
            "alerts": [
              {
                "level": "ERROR",
                "localizations": [
                  {
                    "locale": "en",
                    "localeOrigin": "DEFAULT",
                    "text": "Composite criterion must have children non-composite criterion must not."
                  }
                ]
              }
            ]
          },
          {
            "id": "7e1a731e3fb845cfbe58112ba4673ee4",
            "name": "Search Campaign",
            "description": "Search Campaign Info",
            "deadline": "2022-07-26T15:42:44Z",
            "type": "SEARCH",
            "status": "ACTIVE",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "created": "2022-08-02T19:00:27.731Z",
            "totalCertifications": 5,
            "completedCertifications": 3,
            "alerts": null
          },
          {
            "id": "2c918086719eec070171a7e3355a412b",
            "name": "AD Source Review",
            "description": "A review of our AD source.",
            "deadline": "2020-12-25T06:00:00.123Z",
            "type": "SOURCE_OWNER",
            "status": "STAGED",
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "created": "2022-07-25T15:42:18.276Z",
            "totalCertifications": 7,
            "completedCertifications": 3,
            "alerts": [
              {
                "level": "WARN",
                "localizations": [
                  {
                    "locale": "en",
                    "localeOrigin": "DEFAULT",
                    "text": "Composite criterion is in wrong format."
                  }
                ]
              }
            ],
            "correlatedStatus": "CORRELATED"
          },
          {
            "id": "3b2e2e5821e84127b6d693d41c40623b",
            "name": "Role Composition Campaign",
            "description": "A review done by a role owner.",
            "deadline": "2020-12-25T06:00:00.468Z",
            "type": "ROLE_COMPOSITION",
            "status": "ACTIVE",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "created": "2022-07-27T17:04:19.027Z",
            "totalCertifications": 1,
            "completedCertifications": 1,
            "alerts": null
          }
        ]
      },
      "FullCampaigns": {
        "description": "List of Campaigns that would result from specifying *detail* as FULL",
        "value": [
          {
            "id": "078696a575e045c68d6722ccdb9f101d",
            "name": "Role Composition Campaign",
            "description": "A review done by a role owner.",
            "deadline": "2020-12-25T06:00:00.468Z",
            "type": "ROLE_COMPOSITION",
            "status": "ERROR",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "modified": "2022-08-02T20:29:51.331Z",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
              "name": "Test Role Composition Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": {
              "remediatorRef": {
                "type": "IDENTITY",
                "id": "7ec252acbd4245548bc25df22348cb75",
                "name": "SailPoint Support"
              },
              "reviewerId": null,
              "reviewer": null,
              "roleIds": [
                "b15d609fc5c8434b865fe552315fda8f"
              ],
              "query": null,
              "description": null
            },
            "sourcesWithOrphanEntitlements": null,
            "mandatoryCommentRequirement": "NO_DECISIONS"
          },
          {
            "id": "1be8fc1103914bf0a4e14e316b6a7b7c",
            "name": "Manager Review",
            "description": "A review of everyone's access by their manager.",
            "deadline": "2020-12-25T06:00:00.468Z",
            "type": "MANAGER",
            "status": "STAGED",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "modified": "2022-08-02T19:00:34.391Z",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
              "name": "Test Manager Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": null,
            "sourcesWithOrphanEntitlements": [],
            "mandatoryCommentRequirement": "NO_DECISIONS"
          },
          {
            "id": "7e1a731e3fb845cfbe58112ba4673ee4",
            "name": "Search Campaign",
            "description": "Search Campaign for Identities",
            "deadline": "2022-07-26T15:42:44Z",
            "type": "SEARCH",
            "status": "ACTIVE",
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "modified": "2022-07-25T15:42:53.718Z",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
              "name": "Test Search Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": {
              "type": "IDENTITY",
              "description": "Example of Search Campaign",
              "reviewer": {
                "type": "IDENTITY",
                "id": "7ec252acbd4245548bc25df22348cb75",
                "name": null
              },
              "query": "user",
              "identityIds": null,
              "accessConstraints": []
            },
            "roleCompositionCampaignInfo": null,
            "sourcesWithOrphanEntitlements": [],
            "mandatoryCommentRequirement": "NO_DECISIONS"
          },
          {
            "id": "ad3cf3dd50394b1bad646de4bc51b999",
            "name": "Source Owner Campaign",
            "description": "Example for Source Owner Campaign",
            "deadline": "2022-08-10T17:09:02Z",
            "type": "SOURCE_OWNER",
            "status": "ACTIVE",
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "modified": "2022-07-27T17:09:13.925Z",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
              "name": "Test Source Owner Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": {
              "sourceIds": [
                "2c91808781fd5aea01821200dc88318e"
              ]
            },
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": null,
            "sourcesWithOrphanEntitlements": [],
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        ]
      },
      "CreateCampaignManager": {
        "value": {
          "name": "Manager Review",
          "description": "A review of everyone's access by their manager.",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "MANAGER",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0c46fb26c6b20967a55517ee90d15b93"
          },
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "CreateCampaignSearch": {
        "value": {
          "name": "Search Campaign",
          "description": "Search Campaign",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "SEARCH",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0c46fb26c6b20967a55517ee90d15b93"
          },
          "searchCampaignInfo": {
            "type": "ACCESS",
            "query": "user"
          },
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "CreateCampaignSourceOwner": {
        "value": {
          "name": "Source Owner",
          "description": "Source Owner Info",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "SOURCE_OWNER",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0c46fb26c6b20967a55517ee90d15b93"
          },
          "sourceOwnerCampaignInfo": {
            "sourceIds": [
              "612b31b1a0f04aaf83123bdb80e70db6"
            ]
          },
          "correlatedStatus": "CORRELATED",
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "CreateCampaignRoleComposition": {
        "value": {
          "name": "Role Composition Campaign",
          "description": "A review done by a role owner.",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "ROLE_COMPOSITION",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0c46fb26c6b20967a55517ee90d15b93"
          },
          "roleCompositionCampaignInfo": {
            "remediatorRef": {
              "type": "IDENTITY",
              "id": "7ec252acbd4245548bc25df22348cb75",
              "name": "SailPoint Support"
            },
            "roleIds": [
              "b15d609fc5c8434b865fe552315fda8f"
            ],
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CreateCampaignMachineAccount": {
        "value": {
          "name": "Machine Account Owner Campaign",
          "description": "A review done by a Machine Account's owner.",
          "deadline": "2024-12-25T06:00:00.468Z",
          "type": "MACHINE_ACCOUNT",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0c46fb26c6b20967a55517ee90d15b93"
          },
          "machineAccountCampaignInfo": {
            "sourceIds": [
              "d988f117b7624a16ab0b64c439d5dbb8"
            ],
            "reviewerType": "ACCOUNT_OWNER"
          }
        }
      },
      "FullCampaignManager": {
        "value": {
          "id": "5594f43b76804a6980ece5fdccf74be7",
          "name": "Manager Review",
          "description": "A review of everyone's access by their manager.",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "MANAGER",
          "status": "PENDING",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "created": "2022-08-02T20:21:18.421Z",
          "modified": null,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
            "name": "Test Manager Filter"
          },
          "sunsetCommentsRequired": true,
          "sourceOwnerCampaignInfo": null,
          "searchCampaignInfo": null,
          "roleCompositionCampaignInfo": null,
          "machineAccountCampaignInfo": null,
          "alerts": null,
          "totalCertifications": 0,
          "completedCertifications": 0,
          "sourcesWithOrphanEntitlements": null,
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "FullCampaignSearch": {
        "value": {
          "id": "ec041831cb2147778b594feb9d8db44a",
          "name": "Search Campaign",
          "description": "Search Campaign",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "SEARCH",
          "status": "PENDING",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "created": "2022-08-03T13:54:34.344Z",
          "modified": null,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
            "name": "Test Search Filter"
          },
          "sunsetCommentsRequired": true,
          "sourceOwnerCampaignInfo": null,
          "searchCampaignInfo": {
            "type": "ACCESS",
            "description": "user",
            "reviewer": {
              "type": "IDENTITY",
              "id": "7ec252acbd4245548bc25df22348cb75",
              "name": null
            },
            "query": "user",
            "identityIds": null,
            "accessConstraints": []
          },
          "roleCompositionCampaignInfo": null,
          "machineAccountCampaignInfo": null,
          "alerts": null,
          "totalCertifications": 0,
          "completedCertifications": 0,
          "sourcesWithOrphanEntitlements": null,
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "FullCampaignSourceOwner": {
        "value": {
          "id": "fd7b76ba4ea042de8a9414aa12fc977a",
          "name": "Source Owner",
          "description": "Source Owner Info",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "SOURCE_OWNER",
          "status": "PENDING",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "created": "2022-08-03T13:34:19.541Z",
          "modified": null,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
            "name": "Test Source Owner Filter"
          },
          "sunsetCommentsRequired": true,
          "sourceOwnerCampaignInfo": null,
          "sourceIds": [
            "612b31b1a0f04aaf83123bdb80e70db6"
          ],
          "searchCampaignInfo": null,
          "roleCompositionCampaignInfo": null,
          "machineAccountCampaignInfo": null,
          "alerts": null,
          "totalCertifications": 0,
          "completedCertifications": 0,
          "sourcesWithOrphanEntitlements": null,
          "correlatedStatus": "CORRELATED",
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "FullCampaignRoleComposition": {
        "value": {
          "id": "3b2e2e5821e84127b6d693d41c40623b",
          "name": "Role Composition Campaign",
          "description": "A review done by a role owner.",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "ROLE_COMPOSITION",
          "status": "PENDING",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "created": "2022-08-02T20:30:46.083Z",
          "modified": null,
          "filter": {
            "type": "CAMPAIGN_FILTER",
            "id": "0fbe863c063c4c88a35fd7f17e8a3df5",
            "name": "Test Role Composition Filter"
          },
          "sunsetCommentsRequired": true,
          "sourceOwnerCampaignInfo": null,
          "searchCampaignInfo": null,
          "roleCompositionCampaignInfo": {
            "remediatorRef": {
              "type": "IDENTITY",
              "id": "7ec252acbd4245548bc25df22348cb75",
              "name": "SailPoint Support"
            },
            "reviewerId": null,
            "reviewer": null,
            "roleIds": [
              "b15d609fc5c8434b865fe552315fda8f"
            ],
            "query": null,
            "description": null
          },
          "alerts": null,
          "totalCertifications": 0,
          "completedCertifications": 0,
          "sourcesWithOrphanEntitlements": null,
          "machineAccountCampaignInfo": null,
          "mandatoryCommentRequirement": "NO_DECISIONS"
        }
      },
      "FullCampaignMachineAccount": {
        "value": {
          "id": "3e9ff3d6555e4721b74695d5b578e847",
          "name": "Machine Account Owner Campaign",
          "description": "A review done by a Machine Account's owner.",
          "deadline": "2024-05-07T19:43:38.186Z",
          "type": "MACHINE_ACCOUNT",
          "status": "PENDING",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "created": "2024-04-23T19:43:38.355Z",
          "modified": "2024-04-23T19:43:38.355Z",
          "filter": null,
          "sunsetCommentsRequired": true,
          "mandatoryCommentRequirement": "NO_DECISIONS",
          "sourceOwnerCampaignInfo": null,
          "searchCampaignInfo": null,
          "roleCompositionCampaignInfo": null,
          "totalCertifications": 0,
          "completedCertifications": 0,
          "alerts": null,
          "correlatedStatus": "CORRELATED",
          "sourcesWithOrphanEntitlements": [],
          "machineAccountCampaignInfo": {
            "sourceIds": [
              "d988f117b7624a16ab0b64c439d5dbb8"
            ],
            "reviewerType": "ACCOUNT_OWNER"
          }
        }
      },
      "SlimCampaignManager": {
        "value": {
          "id": "2c918086719eec070171a7e3355a360a",
          "name": "Manager Review",
          "description": "A review of everyone's access by their manager.",
          "deadline": "2020-12-25T06:00:00.123Z",
          "type": "MANAGER",
          "status": "ACTIVE",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false
        }
      },
      "SlimCampaignSearch": {
        "value": {
          "id": "7e1a731e3fb845cfbe58112ba4673ee4",
          "name": "Search Campaign",
          "description": "Search Campaign Info",
          "deadline": "2022-07-26T15:42:44Z",
          "type": "SEARCH",
          "status": "ACTIVE",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false
        }
      },
      "SlimCampaignSourceOwner": {
        "value": {
          "id": "2c918086719eec070171a7e3355a412b",
          "name": "AD Source Review",
          "description": "A review of our AD source.",
          "deadline": "2020-12-25T06:00:00.123Z",
          "type": "SOURCE_OWNER",
          "status": "STAGED",
          "emailNotificationEnabled": true,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false,
          "correlatedStatus": "CORRELATED"
        }
      },
      "SlimCampaignRoleComposition": {
        "value": {
          "id": "3b2e2e5821e84127b6d693d41c40623b",
          "name": "Role Composition Campaign",
          "description": "A review done by a role owner.",
          "deadline": "2020-12-25T06:00:00.468Z",
          "type": "ROLE_COMPOSITION",
          "status": "ACTIVE",
          "emailNotificationEnabled": false,
          "autoRevokeAllowed": false,
          "recommendationsEnabled": false
        }
      },
      "CreateCampaignTemplateManager": {
        "description": "This creates a template that can be used to generate manager campaigns. The campaigns will have a due date that is two weeks after their creation date, and will be named \"{current date} Manager Review\" (e.g. \"2020-03-16 Manager Review\").",
        "value": {
          "name": "Manager Review",
          "description": "A review of everyone's access by their manager.",
          "deadlineDuration": "P2W",
          "campaign": {
            "name": "Manager Review",
            "description": "Review everyone's access.",
            "type": "MANAGER",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
            },
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CreateCampaignTemplateSearch": {
        "description": "This creates a template that can be used to generate search access campaigns. The campaigns will cover the \"reporter\" access item for across all identities.",
        "value": {
          "name": "Reporting Access Review",
          "description": "A review of everyone's access to the reporting system.",
          "deadlineDuration": "P2W",
          "campaign": {
            "name": "Search Review",
            "description": "Review everyone's access to the reporting system.",
            "type": "SEARCH",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
            },
            "searchCampaignInfo": {
              "type": "ACCESS",
              "query": "@access(name: (\"reporter\"))",
              "description": "Identities with reporting abilities"
            },
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CreateCampaignTemplateSourceOwner": {
        "description": "This creates a template that can be used to generate source owner campaigns. The campaigns will have a due date that is one month after their creation date, and will review one source.",
        "value": {
          "name": "AD Source Review",
          "description": "A review of our AD source.",
          "deadlineDuration": "P1M",
          "campaign": {
            "name": "Source Review",
            "description": "Review everyone's access.",
            "type": "SOURCE_OWNER",
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c"
            },
            "sourceOwnerCampaignInfo": {
              "sourceIds": [
                "2c918084707deba501709d45ce4e5569"
              ]
            },
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CreateCampaignTemplateRoleComposition": {
        "description": "This creates a template that can be used to generate role composition campaigns. The campaigns will have a due date that is two weeks after their creation date, and will be named \"{current date} Role Composition Review\" (e.g. \"2020-03-16 Role Composition Review\").",
        "value": {
          "name": "Role Composition Review",
          "description": "A review of every role's access items, by the specified reviewer.",
          "deadlineDuration": "P2W",
          "campaign": {
            "name": "Role Composition Review",
            "description": "Review all our roles.",
            "type": "ROLE_COMPOSITION",
            "roleCompositionCampaignInfo": {
              "remediatorRef": {
                "type": "IDENTITY",
                "id": "2c9180876ab2c053016ab6f65dfd5aaa"
              }
            },
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CampaignTemplateManager": {
        "value": {
          "id": "e7dbec99d49349c8951bd84f58a05120",
          "name": "Manager Review",
          "created": "2022-08-02T19:16:42.632Z",
          "modified": null,
          "description": "A review of everyone's access by their manager.",
          "deadlineDuration": "P14D",
          "ownerRef": {
            "email": "support@testmail.identitysoon.com",
            "type": "IDENTITY",
            "id": "7ec252acbd4245548bc25df22348cb75",
            "name": "SailPoint Support"
          },
          "scheduled": false,
          "campaign": {
            "created": null,
            "modified": null,
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
              "name": "Test Manager Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": null,
            "alerts": null,
            "totalCertifications": null,
            "completedCertifications": null,
            "sourcesWithOrphanEntitlements": null,
            "id": null,
            "name": "Manager Review",
            "description": "Review everyone's access.",
            "deadline": null,
            "type": "MANAGER",
            "status": null,
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CampaignTemplateSearch": {
        "value": {
          "id": "b7e6459eed5247ac8b98a5fed81fe27f",
          "name": "Reporting Access Review",
          "created": "2022-07-28T19:19:40.035Z",
          "modified": null,
          "description": "A review of everyone's access to the reporting system.",
          "deadlineDuration": "P14D",
          "ownerRef": {
            "email": "support@testmail.identitysoon.com",
            "type": "IDENTITY",
            "id": "7ec252acbd4245548bc25df22348cb75",
            "name": "SailPoint Support"
          },
          "scheduled": false,
          "campaign": {
            "created": null,
            "modified": null,
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
              "name": "Test Search Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": {
              "type": "ACCESS",
              "description": "Identities with reporting abilities",
              "reviewerId": null,
              "reviewer": null,
              "query": "@access(name: (\"reporter\"))",
              "identityIds": null,
              "accessConstraints": []
            },
            "roleCompositionCampaignInfo": null,
            "alerts": null,
            "totalCertifications": null,
            "completedCertifications": null,
            "sourcesWithOrphanEntitlements": null,
            "id": null,
            "name": "Search Campaign Review",
            "description": "Review everyone's access to the reporting system.",
            "deadline": null,
            "type": "SEARCH",
            "status": null,
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CampaignTemplateSourceOwner": {
        "value": {
          "id": "b9f41bc69e7a4291b9de0630396d030d",
          "name": "AD Source Review",
          "created": "2022-08-02T13:40:36.857Z",
          "modified": null,
          "description": "A review of our AD source.",
          "deadlineDuration": "P1M",
          "ownerRef": {
            "email": "support@testmail.identitysoon.com",
            "type": "IDENTITY",
            "id": "7ec252acbd4245548bc25df22348cb75",
            "name": "SailPoint Support"
          },
          "scheduled": false,
          "campaign": {
            "created": null,
            "modified": null,
            "filter": {
              "type": "CAMPAIGN_FILTER",
              "id": "e0adaae69852e8fe8b8a3d48e5ce757c",
              "name": "Test Source Owner Filter"
            },
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": {
              "sourceIds": [
                "2c918084707deba501709d45ce4e5569"
              ]
            },
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": null,
            "alerts": null,
            "totalCertifications": null,
            "completedCertifications": null,
            "sourcesWithOrphanEntitlements": null,
            "id": null,
            "name": "AD Source Review",
            "description": "Review everyone's access.",
            "deadline": null,
            "type": "SOURCE_OWNER",
            "status": null,
            "emailNotificationEnabled": true,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "CampaignTemplateRoleComposition": {
        "value": {
          "id": "b9f41bc69e7a4291b9de0630396d030d",
          "name": "Campaign With Admin Role",
          "created": "2022-08-02T13:40:36.857Z",
          "modified": null,
          "description": "Campaign With Admin Role",
          "deadlineDuration": null,
          "ownerRef": {
            "email": "support@testmail.identitysoon.com",
            "type": "IDENTITY",
            "id": "7ec252acbd4245548bc25df22348cb75",
            "name": "SailPoint Support"
          },
          "scheduled": false,
          "campaign": {
            "created": null,
            "modified": null,
            "filter": null,
            "sunsetCommentsRequired": true,
            "sourceOwnerCampaignInfo": null,
            "searchCampaignInfo": null,
            "roleCompositionCampaignInfo": {
              "remediatorRef": {
                "type": "IDENTITY",
                "id": "7ec252acbd4245548bc25df22348cb75",
                "name": "SailPoint Support"
              },
              "reviewerId": null,
              "reviewer": null,
              "roleIds": [
                "b15d609fc5c8434b865fe552315fda8f"
              ],
              "query": null,
              "description": null
            },
            "alerts": null,
            "totalCertifications": null,
            "completedCertifications": null,
            "sourcesWithOrphanEntitlements": null,
            "id": null,
            "name": "Campaign With Admin Role",
            "description": "Campaign With Admin Role",
            "deadline": null,
            "type": "ROLE_COMPOSITION",
            "status": null,
            "emailNotificationEnabled": false,
            "autoRevokeAllowed": false,
            "recommendationsEnabled": false,
            "correlatedStatus": "CORRELATED",
            "mandatoryCommentRequirement": "NO_DECISIONS"
          }
        }
      },
      "evaluateEmpty": {
        "summary": "Evaluate response when no reassignment configuration is found",
        "value": {
          "reassignToId": "2c9180825a6c1adc015a71c9023f0818",
          "lookupTrail": []
        }
      },
      "evaluateLong": {
        "summary": "Evaluate response when a long reassignment trail is found",
        "value": {
          "reassignToId": "2c9180825a6c1adc015a71c9023f0818",
          "lookupTrail": [
            {
              "reassignedToId": "2c918084575812550157589064f33b89",
              "reassignedFromId": "2c9180825a6c1adc015a71c9023f0818",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            },
            {
              "reassignedToId": "073204941f3f49c0b3a3c49d1c17ef0e",
              "reassignedFromId": "2c918084575812550157589064f33b89",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            },
            {
              "reassignedToId": "31d9c631f5574571a935aaa48a6255df",
              "reassignedFromId": "073204941f3f49c0b3a3c49d1c17ef0e",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            },
            {
              "reassignedToId": "279de502e5dc43f4854e1b96f57c578f",
              "reassignedFromId": "31d9c631f5574571a935aaa48a6255df",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            }
          ]
        }
      },
      "evaluateSelfReview": {
        "summary": "Evaluate response when a self-review is found and manager or org admin escalation is applied",
        "value": {
          "reassignToId": "2c9180825a6c1adc015a71c9023f0818",
          "lookupTrail": [
            {
              "reassignedToId": "2c918084575812550157589064f33b89",
              "reassignedFromId": "2c9180825a6c1adc015a71c9023f0818",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            },
            {
              "reassignedToId": "073204941f3f49c0b3a3c49d1c17ef0e",
              "reassignedFromId": "2c918084575812550157589064f33b89",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            },
            {
              "reassignedToId": "31d9c631f5574571a935aaa48a6255df",
              "reassignedFromId": "073204941f3f49c0b3a3c49d1c17ef0e",
              "reassignmentType": "SELF_REVIEW_DELEGATION"
            },
            {
              "reassignedToId": "279de502e5dc43f4854e1b96f57c578f",
              "reassignedFromId": "31d9c631f5574571a935aaa48a6255df",
              "reassignmentType": "AUTOMATIC_REASSIGNMENT"
            }
          ]
        }
      },
      "SlimDiscoveredApplications": {
        "description": "List of discovered applications",
        "value": [
          {
            "id": "app-123",
            "name": "Example App",
            "discoverySource": "csv",
            "discoveredVendor": "Example Vendor",
            "description": "An application for managing examples.",
            "recommendedConnectors": [
              "ConnectorA",
              "ConnectorB"
            ],
            "discoveredAt": "2023-07-01T12:00:00Z",
            "createdAt": "2024-06-01T12:00:00Z",
            "status": "ACTIVE"
          },
          {
            "id": "app-456",
            "name": "Sample Tracker",
            "discoverySource": "Okta SaaS",
            "discoveredVendor": "Sample Vendor",
            "description": "A tool for monitoring and managing samples.",
            "recommendedConnectors": [
              "ConnectorC",
              "ConnectorD"
            ],
            "discoveredAt": "2023-08-15T08:00:00Z",
            "createdAt": "2024-05-20T08:00:00Z",
            "status": "ACTIVE"
          },
          {
            "id": "app-789",
            "name": "Demo Manager",
            "discoverySource": "Okta SaaS",
            "discoveredVendor": "Demo Provider",
            "description": "Software to demonstrate basic functionalities.",
            "recommendedConnectors": [
              "ConnectorE",
              "ConnectorF"
            ],
            "discoveredAt": "2023-09-10T15:00:00Z",
            "createdAt": "2024-07-03T15:00:00Z",
            "status": "ACTIVE"
          }
        ]
      },
      "FullDiscoveredApplications": {
        "description": "List of discovered applications with their respective associated sources",
        "value": [
          {
            "id": "app-123",
            "name": "Example App",
            "discoverySource": "csv",
            "discoveredVendor": "Example Vendor",
            "description": "An application for managing examples.",
            "recommendedConnectors": [
              "ConnectorA",
              "ConnectorB"
            ],
            "discoveredAt": "2023-07-01T12:00:00Z",
            "createdAt": "2024-06-01T12:00:00Z",
            "status": "ACTIVE",
            "associatedSources": [
              "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
            ]
          },
          {
            "id": "app-456",
            "name": "Sample Tracker",
            "discoverySource": "Okta SaaS",
            "discoveredVendor": "Sample Vendor",
            "description": "A tool for monitoring and managing samples.",
            "recommendedConnectors": [
              "ConnectorC",
              "ConnectorD"
            ],
            "discoveredAt": "2023-08-15T08:00:00Z",
            "createdAt": "2024-05-20T08:00:00Z",
            "status": "ACTIVE",
            "associatedSources": [
              "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f",
              "e0cc5d7d-bf7f-4f81-b2af-8885b09d9923"
            ]
          },
          {
            "id": "app-789",
            "name": "Demo Manager",
            "discoverySource": "Okta SaaS",
            "discoveredVendor": "Demo Provider",
            "description": "Software to demonstrate basic functionalities.",
            "recommendedConnectors": [
              "ConnectorE",
              "ConnectorF"
            ],
            "discoveredAt": "2023-09-10T15:00:00Z",
            "createdAt": "2024-07-03T15:00:00Z",
            "status": "ACTIVE",
            "associatedSources": [
              "4e2d7605-833f-4c34-8d03-5b2c7d2f4f66",
              "f9b7e2ce-aced-4117-a95f-4ffad8b33989",
              "a3b159f2-5f09-43c9-b40e-a6f317aa5b8f"
            ]
          }
        ]
      }
    }
  }
}